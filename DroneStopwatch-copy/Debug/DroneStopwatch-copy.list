
DroneStopwatch-copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800727c  0800727c  0000827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007304  08007304  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800730c  0800730c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800730c  0800730c  0000830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007310  08007310  00008310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007314  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  20000060  08007374  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  08007374  000097f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014907  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002943  00000000  00000000  0001d997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000202e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed0  00000000  00000000  000215a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023122  00000000  00000000  00022478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001738d  00000000  00000000  0004559a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5d36  00000000  00000000  0005c927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013265d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005804  00000000  00000000  001326a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00137ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007264 	.word	0x08007264

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007264 	.word	0x08007264

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	f023 030f 	bic.w	r3, r3, #15
 8000dfe:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f043 030c 	orr.w	r3, r3, #12
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	f043 030c 	orr.w	r3, r3, #12
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	791b      	ldrb	r3, [r3, #4]
 8000e36:	4619      	mov	r1, r3
 8000e38:	f107 0208 	add.w	r2, r7, #8
 8000e3c:	2364      	movs	r3, #100	@ 0x64
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2304      	movs	r3, #4
 8000e42:	f001 fc6d 	bl	8002720 <HAL_I2C_Master_Transmit>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af02      	add	r7, sp, #8
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	460b      	mov	r3, r1
 8000e58:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f023 030f 	bic.w	r3, r3, #15
 8000e60:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	f043 030d 	orr.w	r3, r3, #13
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f043 0309 	orr.w	r3, r3, #9
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	f043 030d 	orr.w	r3, r3, #13
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	f043 0309 	orr.w	r3, r3, #9
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f107 0208 	add.w	r2, r7, #8
 8000e9e:	2364      	movs	r3, #100	@ 0x64
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	f001 fc3c 	bl	8002720 <HAL_I2C_Master_Transmit>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff96 	bl	8000dec <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e006      	b.n	8000ed4 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffc0 	bl	8000e4e <lcd_send_data>
    for (int i = 0; i < 70; i++)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b45      	cmp	r3, #69	@ 0x45
 8000ed8:	ddf5      	ble.n	8000ec6 <lcd_clear+0x16>
    }
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int row, int col)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
    if (row == 0)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e003      	b.n	8000f08 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f06:	607b      	str	r3, [r7, #4]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff ff6c 	bl	8000dec <lcd_send_cmd>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000f24:	2032      	movs	r0, #50	@ 0x32
 8000f26:	f000 ffd3 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f2a:	2130      	movs	r1, #48	@ 0x30
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff5d 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(5);
 8000f32:	2005      	movs	r0, #5
 8000f34:	f000 ffcc 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f38:	2130      	movs	r1, #48	@ 0x30
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff56 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f000 ffc5 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f46:	2130      	movs	r1, #48	@ 0x30
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff4f 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(10);
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f000 ffbe 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000f54:	2120      	movs	r1, #32
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff48 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 ffb7 	bl	8001ed0 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8000f62:	2128      	movs	r1, #40	@ 0x28
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff41 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 ffb0 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000f70:	2108      	movs	r1, #8
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff3a 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 ffa9 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000f7e:	2101      	movs	r1, #1
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff33 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(2);
 8000f86:	2002      	movs	r0, #2
 8000f88:	f000 ffa2 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000f8c:	2106      	movs	r1, #6
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff2c 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 ff9b 	bl	8001ed0 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000f9a:	210c      	movs	r1, #12
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff25 	bl	8000dec <lcd_send_cmd>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8000fb4:	e007      	b.n	8000fc6 <lcd_puts+0x1c>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	603a      	str	r2, [r7, #0]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff44 	bl	8000e4e <lcd_send_data>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f3      	bne.n	8000fb6 <lcd_puts+0xc>
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_TIM_PeriodElapsedCallback>:
volatile uint8_t start_stop_stay = 0;
volatile uint8_t checkDelay = 10;

volatile uint32_t distance = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && isRunning) { // Check if interrupt is from TIM2
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe8:	d109      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x26>
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x26>

            stopwatch_count++;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ffc:	6013      	str	r3, [r2, #0]
        }

}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000698 	.word	0x20000698
 8001010:	20000694 	.word	0x20000694

08001014 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001024:	d11e      	bne.n	8001064 <HAL_TIM_IC_CaptureCallback+0x50>
        // Capture the start of the pulse
        if (echo_captured == 0) {
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10a      	bne.n	8001046 <HAL_TIM_IC_CaptureCallback+0x32>
            echo_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001030:	2100      	movs	r1, #0
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f004 f804 	bl	8005040 <HAL_TIM_ReadCapturedValue>
 8001038:	4603      	mov	r3, r0
 800103a:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800103c:	6013      	str	r3, [r2, #0]
            echo_captured = 1;
 800103e:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
        else if (echo_captured == 1) {
            echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
            echo_captured = 2;  // Capture complete
        }
    }
}
 8001044:	e00e      	b.n	8001064 <HAL_TIM_IC_CaptureCallback+0x50>
        else if (echo_captured == 1) {
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b01      	cmp	r3, #1
 800104e:	d109      	bne.n	8001064 <HAL_TIM_IC_CaptureCallback+0x50>
            echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f003 fff4 	bl	8005040 <HAL_TIM_ReadCapturedValue>
 8001058:	4603      	mov	r3, r0
 800105a:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_TIM_IC_CaptureCallback+0x60>)
 800105c:	6013      	str	r3, [r2, #0]
            echo_captured = 2;  // Capture complete
 800105e:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001060:	2202      	movs	r2, #2
 8001062:	701a      	strb	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200006a4 	.word	0x200006a4
 8001070:	2000069c 	.word	0x2000069c
 8001074:	200006a0 	.word	0x200006a0

08001078 <readSensor>:
            echo_captured = 2;
        }
    }
}
*/
void readSensor() {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start the PWM (TRIG pulse)
 800107c:	2100      	movs	r1, #0
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <readSensor+0x2c>)
 8001080:	f003 fa0e 	bl	80044a0 <HAL_TIM_PWM_Start>
	    HAL_Delay(1);  							   // Pulse duration: 10us (10ms MATKO)
 8001084:	2001      	movs	r0, #1
 8001086:	f000 ff23 	bl	8001ed0 <HAL_Delay>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);   // Stop the PWM
 800108a:	2100      	movs	r1, #0
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <readSensor+0x2c>)
 800108e:	f003 facf 	bl	8004630 <HAL_TIM_PWM_Stop>
	    __HAL_TIM_SET_COUNTER(&htim2, 0);          // Reset counter for TIM2
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <readSensor+0x30>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
	    echo_captured = 0;                         // Reset capture state
 800109a:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <readSensor+0x34>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000118 	.word	0x20000118
 80010a8:	200000d0 	.word	0x200000d0
 80010ac:	200006a4 	.word	0x200006a4

080010b0 <getDistanceInCm>:

float getDistanceInCm() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
    if (echo_captured == 2) {
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <getDistanceInCm+0x4c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d115      	bne.n	80010ec <getDistanceInCm+0x3c>
        uint32_t pulse_width = echo_end - echo_start;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <getDistanceInCm+0x50>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <getDistanceInCm+0x54>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	607b      	str	r3, [r7, #4]
        return (pulse_width / 58.0); // Convert to cm
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fa39 	bl	8000544 <__aeabi_ui2d>
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <getDistanceInCm+0x58>)
 80010d8:	f7ff fbd8 	bl	800088c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fcba 	bl	8000a5c <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	e000      	b.n	80010ee <getDistanceInCm+0x3e>
    }
    return -1;
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <getDistanceInCm+0x5c>)
}
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200006a4 	.word	0x200006a4
 8001100:	200006a0 	.word	0x200006a0
 8001104:	2000069c 	.word	0x2000069c
 8001108:	404d0000 	.word	0x404d0000
 800110c:	bf800000 	.word	0xbf800000

08001110 <checkForDrone>:

void checkForDrone() {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    readSensor();
 8001116:	f7ff ffaf 	bl	8001078 <readSensor>
    HAL_Delay(checkDelay);
 800111a:	4b51      	ldr	r3, [pc, #324]	@ (8001260 <checkForDrone+0x150>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fed5 	bl	8001ed0 <HAL_Delay>
    float distance = getDistanceInCm();
 8001126:	f7ff ffc3 	bl	80010b0 <getDistanceInCm>
 800112a:	ed87 0a01 	vstr	s0, [r7, #4]
    checkDelay = 10;
 800112e:	4b4c      	ldr	r3, [pc, #304]	@ (8001260 <checkForDrone+0x150>)
 8001130:	220a      	movs	r2, #10
 8001132:	701a      	strb	r2, [r3, #0]
    uint8_t currentState = (distance > 0 && distance < 30) ? 1 : 0;
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	dd0a      	ble.n	8001158 <checkForDrone+0x48>
 8001142:	edd7 7a01 	vldr	s15, [r7, #4]
 8001146:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800114a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d501      	bpl.n	8001158 <checkForDrone+0x48>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <checkForDrone+0x4a>
 8001158:	2300      	movs	r3, #0
 800115a:	70fb      	strb	r3, [r7, #3]


    if(currentState != previousState){
 800115c:	4b41      	ldr	r3, [pc, #260]	@ (8001264 <checkForDrone+0x154>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	78fa      	ldrb	r2, [r7, #3]
 8001164:	429a      	cmp	r2, r3
 8001166:	d073      	beq.n	8001250 <checkForDrone+0x140>
    checkDelay = 100;
 8001168:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <checkForDrone+0x150>)
 800116a:	2264      	movs	r2, #100	@ 0x64
 800116c:	701a      	strb	r2, [r3, #0]
    if (previousState == 1 && currentState == 0 && start_stop_stay % 4 == 0) {
 800116e:	4b3d      	ldr	r3, [pc, #244]	@ (8001264 <checkForDrone+0x154>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d119      	bne.n	80011ac <checkForDrone+0x9c>
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d116      	bne.n	80011ac <checkForDrone+0x9c>
 800117e:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <checkForDrone+0x158>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10e      	bne.n	80011ac <checkForDrone+0x9c>
        if (!isRunning ) {
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <checkForDrone+0x15c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d15b      	bne.n	8001250 <checkForDrone+0x140>
            start_stopwatch();
 8001198:	f000 f8cc 	bl	8001334 <start_stopwatch>
            start_stop_stay++;;
 800119c:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <checkForDrone+0x158>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <checkForDrone+0x158>)
 80011a8:	701a      	strb	r2, [r3, #0]
        if (!isRunning ) {
 80011aa:	e051      	b.n	8001250 <checkForDrone+0x140>
        }
    }

    else if (previousState == 0 && currentState == 1 && start_stop_stay % 4 == 1) {
 80011ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <checkForDrone+0x154>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d119      	bne.n	80011ea <checkForDrone+0xda>
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d116      	bne.n	80011ea <checkForDrone+0xda>
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <checkForDrone+0x158>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d10e      	bne.n	80011ea <checkForDrone+0xda>
        if (isRunning ) {
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <checkForDrone+0x15c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d03c      	beq.n	8001250 <checkForDrone+0x140>
            stop_stopwatch();
 80011d6:	f000 f8bf 	bl	8001358 <stop_stopwatch>
            start_stop_stay++;
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <checkForDrone+0x158>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <checkForDrone+0x158>)
 80011e6:	701a      	strb	r2, [r3, #0]
        if (isRunning ) {
 80011e8:	e032      	b.n	8001250 <checkForDrone+0x140>
        }
    }

    else if(previousState == 1 && currentState == 0 && start_stop_stay % 4 == 2){
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <checkForDrone+0x154>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d114      	bne.n	800121e <checkForDrone+0x10e>
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d111      	bne.n	800121e <checkForDrone+0x10e>
 80011fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <checkForDrone+0x158>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d109      	bne.n	800121e <checkForDrone+0x10e>
        send_time_to_outputs();
 800120a:	f000 f831 	bl	8001270 <send_time_to_outputs>
        start_stop_stay++;
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <checkForDrone+0x158>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <checkForDrone+0x158>)
 800121a:	701a      	strb	r2, [r3, #0]
    else if(previousState == 1 && currentState == 0 && start_stop_stay % 4 == 2){
 800121c:	e018      	b.n	8001250 <checkForDrone+0x140>
        }

    else if(previousState == 0 && currentState == 1 && start_stop_stay % 4 == 3){
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <checkForDrone+0x154>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d113      	bne.n	8001250 <checkForDrone+0x140>
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d110      	bne.n	8001250 <checkForDrone+0x140>
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <checkForDrone+0x158>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d108      	bne.n	8001250 <checkForDrone+0x140>
            send_time_to_outputs();
 800123e:	f000 f817 	bl	8001270 <send_time_to_outputs>
            start_stop_stay++;
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <checkForDrone+0x158>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <checkForDrone+0x158>)
 800124e:	701a      	strb	r2, [r3, #0]
            }
    }


    previousState = currentState;
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <checkForDrone+0x154>)
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	7013      	strb	r3, [r2, #0]

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000
 8001264:	200006a5 	.word	0x200006a5
 8001268:	200006a6 	.word	0x200006a6
 800126c:	20000698 	.word	0x20000698

08001270 <send_time_to_outputs>:


void send_time_to_outputs() {
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af02      	add	r7, sp, #8
	HAL_Delay(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f000 fe2a 	bl	8001ed0 <HAL_Delay>
    char buffer[20]="";
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
    sprintf(buffer, "\rTime: %lu.%02lus", stopwatch_count / 100, stopwatch_count % 100);
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <send_time_to_outputs+0xac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a23      	ldr	r2, [pc, #140]	@ (8001320 <send_time_to_outputs+0xb0>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	0959      	lsrs	r1, r3, #5
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <send_time_to_outputs+0xac>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <send_time_to_outputs+0xb0>)
 80012a0:	fba3 0302 	umull	r0, r3, r3, r2
 80012a4:	095b      	lsrs	r3, r3, #5
 80012a6:	2064      	movs	r0, #100	@ 0x64
 80012a8:	fb00 f303 	mul.w	r3, r0, r3
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	1d38      	adds	r0, r7, #4
 80012b0:	460a      	mov	r2, r1
 80012b2:	491c      	ldr	r1, [pc, #112]	@ (8001324 <send_time_to_outputs+0xb4>)
 80012b4:	f005 fb36 	bl	8006924 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ffa8 	bl	8000210 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	1d39      	adds	r1, r7, #4
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	4817      	ldr	r0, [pc, #92]	@ (8001328 <send_time_to_outputs+0xb8>)
 80012cc:	f004 fc40 	bl	8005b50 <HAL_UART_Transmit>

    snprintf(buffer, sizeof(buffer), "Time: %lu.%02lus", stopwatch_count / 100, stopwatch_count % 100);
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <send_time_to_outputs+0xac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <send_time_to_outputs+0xb0>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0959      	lsrs	r1, r3, #5
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <send_time_to_outputs+0xac>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <send_time_to_outputs+0xb0>)
 80012e2:	fba3 0302 	umull	r0, r3, r3, r2
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2064      	movs	r0, #100	@ 0x64
 80012ea:	fb00 f303 	mul.w	r3, r0, r3
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	1d38      	adds	r0, r7, #4
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	460b      	mov	r3, r1
 80012f6:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <send_time_to_outputs+0xbc>)
 80012f8:	2114      	movs	r1, #20
 80012fa:	f005 fadf 	bl	80068bc <sniprintf>
    lcd_gotoxy(&lcd1, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	480b      	ldr	r0, [pc, #44]	@ (8001330 <send_time_to_outputs+0xc0>)
 8001304:	f7ff fdee 	bl	8000ee4 <lcd_gotoxy>
    lcd_puts(&lcd1, buffer);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4808      	ldr	r0, [pc, #32]	@ (8001330 <send_time_to_outputs+0xc0>)
 800130e:	f7ff fe4c 	bl	8000faa <lcd_puts>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000694 	.word	0x20000694
 8001320:	51eb851f 	.word	0x51eb851f
 8001324:	0800727c 	.word	0x0800727c
 8001328:	20000160 	.word	0x20000160
 800132c:	08007290 	.word	0x08007290
 8001330:	2000068c 	.word	0x2000068c

08001334 <start_stopwatch>:

void start_stopwatch() {
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
    stopwatch_count = 0;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <start_stopwatch+0x1c>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
    isRunning = 1;
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <start_stopwatch+0x20>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000694 	.word	0x20000694
 8001354:	20000698 	.word	0x20000698

08001358 <stop_stopwatch>:

void stop_stopwatch() {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    isRunning = 0;
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <stop_stopwatch+0x14>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
    send_time_to_outputs();
 8001362:	f7ff ff85 	bl	8001270 <send_time_to_outputs>
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000698 	.word	0x20000698

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001374:	f000 fd3a 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001378:	f000 f83a 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137c:	f000 fa10 	bl	80017a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001380:	f000 f9b6 	bl	80016f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001384:	f000 f9de 	bl	8001744 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001388:	f000 f8cc 	bl	8001524 <MX_TIM2_Init>
  MX_TIM3_Init();
 800138c:	f000 f93a 	bl	8001604 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001390:	f000 f89a 	bl	80014c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Start the TIM2 base timer for input capture
 8001394:	4811      	ldr	r0, [pc, #68]	@ (80013dc <main+0x6c>)
 8001396:	f002 ffb9 	bl	800430c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);  // Start TIM2 input capture for ECHO signal
 800139a:	2100      	movs	r1, #0
 800139c:	480f      	ldr	r0, [pc, #60]	@ (80013dc <main+0x6c>)
 800139e:	f003 fa11 	bl	80047c4 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start PWM for TRIG pin
 80013a2:	2100      	movs	r1, #0
 80013a4:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <main+0x70>)
 80013a6:	f003 f87b 	bl	80044a0 <HAL_TIM_PWM_Start>

  send_time_to_outputs();
 80013aa:	f7ff ff61 	bl	8001270 <send_time_to_outputs>

  // LCD initialization
	  lcd1.hi2c = &hi2c1;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <main+0x74>)
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <main+0x78>)
 80013b2:	601a      	str	r2, [r3, #0]
	  lcd1.address = 0x4E;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <main+0x74>)
 80013b6:	224e      	movs	r2, #78	@ 0x4e
 80013b8:	711a      	strb	r2, [r3, #4]
	  lcd_init(&lcd1);
 80013ba:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <main+0x74>)
 80013bc:	f7ff fdae 	bl	8000f1c <lcd_init>

  // CONTENT ON LCD
	  lcd_clear(&lcd1);
 80013c0:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <main+0x74>)
 80013c2:	f7ff fd75 	bl	8000eb0 <lcd_clear>
  /* USER CODE END 2 */

  while (1)
        {
          checkForDrone();
 80013c6:	f7ff fea3 	bl	8001110 <checkForDrone>
          if(isRunning) send_time_to_outputs();
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <main+0x7c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f8      	beq.n	80013c6 <main+0x56>
 80013d4:	f7ff ff4c 	bl	8001270 <send_time_to_outputs>
          checkForDrone();
 80013d8:	e7f5      	b.n	80013c6 <main+0x56>
 80013da:	bf00      	nop
 80013dc:	200000d0 	.word	0x200000d0
 80013e0:	20000118 	.word	0x20000118
 80013e4:	2000068c 	.word	0x2000068c
 80013e8:	2000007c 	.word	0x2000007c
 80013ec:	20000698 	.word	0x20000698

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	@ 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	2234      	movs	r2, #52	@ 0x34
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fab0 	bl	8006964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <SystemClock_Config+0xd0>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	4a28      	ldr	r2, [pc, #160]	@ (80014c0 <SystemClock_Config+0xd0>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001422:	6413      	str	r3, [r2, #64]	@ 0x40
 8001424:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <SystemClock_Config+0xd0>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <SystemClock_Config+0xd4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a22      	ldr	r2, [pc, #136]	@ (80014c4 <SystemClock_Config+0xd4>)
 800143a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <SystemClock_Config+0xd4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001454:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001460:	2304      	movs	r3, #4
 8001462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001464:	23a8      	movs	r3, #168	@ 0xa8
 8001466:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001468:	2302      	movs	r3, #2
 800146a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800146c:	2307      	movs	r3, #7
 800146e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4618      	mov	r0, r3
 800147a:	f002 fc59 	bl	8003d30 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001484:	f000 fa3a 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2302      	movs	r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001494:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800149a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	2105      	movs	r1, #5
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fdce 	bl	8003048 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014b2:	f000 fa23 	bl	80018fc <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3750      	adds	r7, #80	@ 0x50
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	@ (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	@ (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f000 ffc7 	bl	8002498 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 f9f4 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000007c 	.word	0x2000007c
 800151c:	40005400 	.word	0x40005400
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <MX_TIM2_Init+0xdc>)
 8001550:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <MX_TIM2_Init+0xdc>)
 8001558:	2253      	movs	r2, #83	@ 0x53
 800155a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <MX_TIM2_Init+0xdc>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001562:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <MX_TIM2_Init+0xdc>)
 8001564:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001568:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_TIM2_Init+0xdc>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <MX_TIM2_Init+0xdc>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001576:	4822      	ldr	r0, [pc, #136]	@ (8001600 <MX_TIM2_Init+0xdc>)
 8001578:	f002 fe78 	bl	800426c <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001582:	f000 f9bb 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	4619      	mov	r1, r3
 8001592:	481b      	ldr	r0, [pc, #108]	@ (8001600 <MX_TIM2_Init+0xdc>)
 8001594:	f003 fc8c 	bl	8004eb0 <HAL_TIM_ConfigClockSource>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800159e:	f000 f9ad 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015a2:	4817      	ldr	r0, [pc, #92]	@ (8001600 <MX_TIM2_Init+0xdc>)
 80015a4:	f003 f8b4 	bl	8004710 <HAL_TIM_IC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015ae:	f000 f9a5 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	480f      	ldr	r0, [pc, #60]	@ (8001600 <MX_TIM2_Init+0xdc>)
 80015c2:	f004 f9e5 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80015cc:	f000 f996 	bl	80018fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80015d0:	230a      	movs	r3, #10
 80015d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015d4:	2301      	movs	r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	@ (8001600 <MX_TIM2_Init+0xdc>)
 80015e8:	f003 fb04 	bl	8004bf4 <HAL_TIM_IC_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80015f2:	f000 f983 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	@ 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200000d0 	.word	0x200000d0

08001604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	@ 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001634:	4b2c      	ldr	r3, [pc, #176]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 8001636:	4a2d      	ldr	r2, [pc, #180]	@ (80016ec <MX_TIM3_Init+0xe8>)
 8001638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 800163c:	2253      	movs	r2, #83	@ 0x53
 800163e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b29      	ldr	r3, [pc, #164]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001646:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 8001648:	f242 720f 	movw	r2, #9999	@ 0x270f
 800164c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800165a:	4823      	ldr	r0, [pc, #140]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 800165c:	f002 fe06 	bl	800426c <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001666:	f000 f949 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001674:	4619      	mov	r1, r3
 8001676:	481c      	ldr	r0, [pc, #112]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 8001678:	f003 fc1a 	bl	8004eb0 <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001682:	f000 f93b 	bl	80018fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001686:	4818      	ldr	r0, [pc, #96]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 8001688:	f002 feb0 	bl	80043ec <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001692:	f000 f933 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	4619      	mov	r1, r3
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 80016a6:	f004 f973 	bl	8005990 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016b0:	f000 f924 	bl	80018fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	@ 0x60
 80016b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 9;
 80016b8:	2309      	movs	r3, #9
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 80016cc:	f003 fb2e 	bl	8004d2c <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016d6:	f000 f911 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016da:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <MX_TIM3_Init+0xe4>)
 80016dc:	f000 f9e8 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3738      	adds	r7, #56	@ 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000118 	.word	0x20000118
 80016ec:	40000400 	.word	0x40000400

080016f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <MX_USART3_UART_Init+0x50>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b09      	ldr	r3, [pc, #36]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b08      	ldr	r3, [pc, #32]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <MX_USART3_UART_Init+0x4c>)
 8001728:	f004 f9c2 	bl	8005ab0 <HAL_UART_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001732:	f000 f8e3 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000160 	.word	0x20000160
 8001740:	40004800 	.word	0x40004800

08001744 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800174a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800174e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001752:	2206      	movs	r2, #6
 8001754:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001758:	2202      	movs	r2, #2
 800175a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001764:	2202      	movs	r2, #2
 8001766:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800176a:	2201      	movs	r2, #1
 800176c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001774:	4b09      	ldr	r3, [pc, #36]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177c:	2201      	movs	r2, #1
 800177e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001788:	f001 fb23 	bl	8002dd2 <HAL_PCD_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001792:	f000 f8b3 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001a8 	.word	0x200001a8

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	@ 0x30
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	4b4c      	ldr	r3, [pc, #304]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a4b      	ldr	r2, [pc, #300]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	4b45      	ldr	r3, [pc, #276]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a44      	ldr	r2, [pc, #272]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b42      	ldr	r3, [pc, #264]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b3e      	ldr	r3, [pc, #248]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a3d      	ldr	r2, [pc, #244]	@ (80018ec <MX_GPIO_Init+0x14c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b3b      	ldr	r3, [pc, #236]	@ (80018ec <MX_GPIO_Init+0x14c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <MX_GPIO_Init+0x14c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a36      	ldr	r2, [pc, #216]	@ (80018ec <MX_GPIO_Init+0x14c>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <MX_GPIO_Init+0x14c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <MX_GPIO_Init+0x14c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a2f      	ldr	r2, [pc, #188]	@ (80018ec <MX_GPIO_Init+0x14c>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <MX_GPIO_Init+0x14c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <MX_GPIO_Init+0x14c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a28      	ldr	r2, [pc, #160]	@ (80018ec <MX_GPIO_Init+0x14c>)
 800184c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <MX_GPIO_Init+0x14c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001864:	4822      	ldr	r0, [pc, #136]	@ (80018f0 <MX_GPIO_Init+0x150>)
 8001866:	f000 fdfd 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2140      	movs	r1, #64	@ 0x40
 800186e:	4821      	ldr	r0, [pc, #132]	@ (80018f4 <MX_GPIO_Init+0x154>)
 8001870:	f000 fdf8 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	481b      	ldr	r0, [pc, #108]	@ (80018f8 <MX_GPIO_Init+0x158>)
 800188c:	f000 fc56 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001890:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	4811      	ldr	r0, [pc, #68]	@ (80018f0 <MX_GPIO_Init+0x150>)
 80018aa:	f000 fc47 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018ae:	2340      	movs	r3, #64	@ 0x40
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	480b      	ldr	r0, [pc, #44]	@ (80018f4 <MX_GPIO_Init+0x154>)
 80018c6:	f000 fc39 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018ca:	2380      	movs	r3, #128	@ 0x80
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_GPIO_Init+0x154>)
 80018de:	f000 fc2d 	bl	800213c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e2:	bf00      	nop
 80018e4:	3730      	adds	r7, #48	@ 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40020800 	.word	0x40020800

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <Error_Handler+0x8>

08001908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <HAL_MspInit+0x4c>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191c:	6453      	str	r3, [r2, #68]	@ 0x44
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_MspInit+0x4c>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	@ (80019dc <HAL_I2C_MspInit+0x84>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12c      	bne.n	80019d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_I2C_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <HAL_I2C_MspInit+0x88>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_I2C_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001996:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199c:	2312      	movs	r3, #18
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a8:	2304      	movs	r3, #4
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <HAL_I2C_MspInit+0x8c>)
 80019b4:	f000 fbc2 	bl	800213c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_I2C_MspInit+0x88>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <HAL_I2C_MspInit+0x88>)
 80019c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_I2C_MspInit+0x88>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	@ 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40005400 	.word	0x40005400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a08:	d134      	bne.n	8001a74 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a42:	2301      	movs	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4812      	ldr	r0, [pc, #72]	@ (8001aa8 <HAL_TIM_Base_MspInit+0xc0>)
 8001a5e:	f000 fb6d 	bl	800213c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201c      	movs	r0, #28
 8001a68:	f000 fb31 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6c:	201c      	movs	r0, #28
 8001a6e:	f000 fb4a 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a72:	e012      	b.n	8001a9a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0c      	ldr	r2, [pc, #48]	@ (8001aac <HAL_TIM_Base_MspInit+0xc4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10d      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xbc>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	@ 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40000400 	.word	0x40000400

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <HAL_TIM_MspPostInit+0x68>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11d      	bne.n	8001b0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aee:	2340      	movs	r3, #64	@ 0x40
 8001af0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <HAL_TIM_MspPostInit+0x70>)
 8001b0a:	f000 fb17 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <HAL_UART_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12c      	bne.n	8001ba0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_UART_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b90:	2307      	movs	r3, #7
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <HAL_UART_MspInit+0x8c>)
 8001b9c:	f000 face 	bl	800213c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40004800 	.word	0x40004800
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020c00 	.word	0x40020c00

08001bb4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b0a0      	sub	sp, #128	@ 0x80
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	225c      	movs	r2, #92	@ 0x5c
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fec5 	bl	8006964 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001be2:	d14e      	bne.n	8001c82 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001bea:	2300      	movs	r3, #0
 8001bec:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fb42 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001bfe:	f7ff fe7d 	bl	80018fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a20      	ldr	r2, [pc, #128]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c1e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c30:	230a      	movs	r3, #10
 8001c32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4815      	ldr	r0, [pc, #84]	@ (8001c90 <HAL_PCD_MspInit+0xdc>)
 8001c3c:	f000 fa7e 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c44:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c52:	4619      	mov	r1, r3
 8001c54:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <HAL_PCD_MspInit+0xdc>)
 8001c56:	f000 fa71 	bl	800213c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c64:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c76:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_PCD_MspInit+0xd8>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001c82:	bf00      	nop
 8001c84:	3780      	adds	r7, #128	@ 0x80
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <MemManage_Handler+0x4>

08001cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cea:	f000 f8d1 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <TIM2_IRQHandler+0x10>)
 8001cfa:	f002 fe8b 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200000d0 	.word	0x200000d0

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f004 fe1c 	bl	8006974 <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20020000 	.word	0x20020000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	200006a8 	.word	0x200006a8
 8001d70:	200007f8 	.word	0x200007f8

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d9c:	f7ff ffea 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	@ (8001de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f004 fddb 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff fad1 	bl	8001370 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ddc:	08007314 	.word	0x08007314
  ldr r2, =_sbss
 8001de0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001de4:	200007f8 	.word	0x200007f8

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f94f 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fd72 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f967 	bl	8002122 <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f92f 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000004 	.word	0x20000004
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000008 	.word	0x20000008

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	2000000c 	.word	0x2000000c
 8001eb4:	200006ac 	.word	0x200006ac

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200006ac 	.word	0x200006ac

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e165      	b.n	8002424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 8154 	bne.w	800241e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d005      	beq.n	800218e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	2b02      	cmp	r3, #2
 800218c:	d130      	bne.n	80021f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d017      	beq.n	800222c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80ae 	beq.w	800241e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b5d      	ldr	r3, [pc, #372]	@ (800243c <HAL_GPIO_Init+0x300>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	4a5c      	ldr	r2, [pc, #368]	@ (800243c <HAL_GPIO_Init+0x300>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d2:	4b5a      	ldr	r3, [pc, #360]	@ (800243c <HAL_GPIO_Init+0x300>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022de:	4a58      	ldr	r2, [pc, #352]	@ (8002440 <HAL_GPIO_Init+0x304>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4f      	ldr	r2, [pc, #316]	@ (8002444 <HAL_GPIO_Init+0x308>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x21a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4e      	ldr	r2, [pc, #312]	@ (8002448 <HAL_GPIO_Init+0x30c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x216>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4d      	ldr	r2, [pc, #308]	@ (800244c <HAL_GPIO_Init+0x310>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x212>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_GPIO_Init+0x314>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x20e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4b      	ldr	r2, [pc, #300]	@ (8002454 <HAL_GPIO_Init+0x318>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x20a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4a      	ldr	r2, [pc, #296]	@ (8002458 <HAL_GPIO_Init+0x31c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x206>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a49      	ldr	r2, [pc, #292]	@ (800245c <HAL_GPIO_Init+0x320>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x202>
 800233a:	2306      	movs	r3, #6
 800233c:	e00c      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 800233e:	2307      	movs	r3, #7
 8002340:	e00a      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002342:	2305      	movs	r3, #5
 8002344:	e008      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002346:	2304      	movs	r3, #4
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 800234a:	2303      	movs	r3, #3
 800234c:	e004      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 800234e:	2302      	movs	r3, #2
 8002350:	e002      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002356:	2300      	movs	r3, #0
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	f002 0203 	and.w	r2, r2, #3
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	4093      	lsls	r3, r2
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002368:	4935      	ldr	r1, [pc, #212]	@ (8002440 <HAL_GPIO_Init+0x304>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002376:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <HAL_GPIO_Init+0x324>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239a:	4a31      	ldr	r2, [pc, #196]	@ (8002460 <HAL_GPIO_Init+0x324>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <HAL_GPIO_Init+0x324>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c4:	4a26      	ldr	r2, [pc, #152]	@ (8002460 <HAL_GPIO_Init+0x324>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ca:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <HAL_GPIO_Init+0x324>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002460 <HAL_GPIO_Init+0x324>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_GPIO_Init+0x324>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002418:	4a11      	ldr	r2, [pc, #68]	@ (8002460 <HAL_GPIO_Init+0x324>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	f67f ae96 	bls.w	8002158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3724      	adds	r7, #36	@ 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40013800 	.word	0x40013800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40020800 	.word	0x40020800
 8002450:	40020c00 	.word	0x40020c00
 8002454:	40021000 	.word	0x40021000
 8002458:	40021400 	.word	0x40021400
 800245c:	40021800 	.word	0x40021800
 8002460:	40013c00 	.word	0x40013c00

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002480:	e003      	b.n	800248a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	041a      	lsls	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e12b      	b.n	8002702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fa4a 	bl	8001958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	@ 0x24
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024fc:	f000 fe96 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a81      	ldr	r2, [pc, #516]	@ (800270c <HAL_I2C_Init+0x274>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d807      	bhi.n	800251c <HAL_I2C_Init+0x84>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a80      	ldr	r2, [pc, #512]	@ (8002710 <HAL_I2C_Init+0x278>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e006      	b.n	800252a <HAL_I2C_Init+0x92>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a7d      	ldr	r2, [pc, #500]	@ (8002714 <HAL_I2C_Init+0x27c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e7      	b.n	8002702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a78      	ldr	r2, [pc, #480]	@ (8002718 <HAL_I2C_Init+0x280>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a6a      	ldr	r2, [pc, #424]	@ (800270c <HAL_I2C_Init+0x274>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <HAL_I2C_Init+0xd4>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	e009      	b.n	8002580 <HAL_I2C_Init+0xe8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	4a69      	ldr	r2, [pc, #420]	@ (800271c <HAL_I2C_Init+0x284>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002592:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	495c      	ldr	r1, [pc, #368]	@ (800270c <HAL_I2C_Init+0x274>)
 800259c:	428b      	cmp	r3, r1
 800259e:	d819      	bhi.n	80025d4 <HAL_I2C_Init+0x13c>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ae:	1c59      	adds	r1, r3, #1
 80025b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025b4:	400b      	ands	r3, r1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_I2C_Init+0x138>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e59      	subs	r1, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ce:	e051      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e04f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <HAL_I2C_Init+0x168>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e012      	b.n	8002626 <HAL_I2C_Init+0x18e>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Init+0x196>
 800262a:	2301      	movs	r3, #1
 800262c:	e022      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <HAL_I2C_Init+0x1bc>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e58      	subs	r0, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	440b      	add	r3, r1
 8002644:	fbb0 f3f3 	udiv	r3, r0, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002652:	e00f      	b.n	8002674 <HAL_I2C_Init+0x1dc>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	0099      	lsls	r1, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	6809      	ldr	r1, [r1, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6911      	ldr	r1, [r2, #16]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	000186a0 	.word	0x000186a0
 8002710:	001e847f 	.word	0x001e847f
 8002714:	003d08ff 	.word	0x003d08ff
 8002718:	431bde83 	.word	0x431bde83
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
 8002730:	4613      	mov	r3, r2
 8002732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff fbc0 	bl	8001eb8 <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 80e0 	bne.w	8002908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2319      	movs	r3, #25
 800274e:	2201      	movs	r2, #1
 8002750:	4970      	ldr	r1, [pc, #448]	@ (8002914 <HAL_I2C_Master_Transmit+0x1f4>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f964 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	e0d3      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2C_Master_Transmit+0x50>
 800276c:	2302      	movs	r3, #2
 800276e:	e0cc      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d007      	beq.n	8002796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	@ 0x21
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2210      	movs	r2, #16
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	893a      	ldrh	r2, [r7, #8]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a50      	ldr	r2, [pc, #320]	@ (8002918 <HAL_I2C_Master_Transmit+0x1f8>)
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f89c 	bl	800291c <I2C_MasterRequestWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e08d      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002804:	e066      	b.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa22 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d11b      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	6a39      	ldr	r1, [r7, #32]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fa19 	bl	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d107      	bne.n	80028d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e01a      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d194      	bne.n	8002806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002930:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d006      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d003      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002944:	d108      	bne.n	8002958 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00b      	b.n	8002970 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	2b12      	cmp	r3, #18
 800295e:	d107      	bne.n	8002970 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800296e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f84f 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002996:	d103      	bne.n	80029a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e035      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029ac:	d108      	bne.n	80029c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	e01b      	b.n	80029f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	11db      	asrs	r3, r3, #7
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0306 	and.w	r3, r3, #6
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f063 030f 	orn	r3, r3, #15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	490e      	ldr	r1, [pc, #56]	@ (8002a18 <I2C_MasterRequestWrite+0xfc>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f898 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e010      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4907      	ldr	r1, [pc, #28]	@ (8002a1c <I2C_MasterRequestWrite+0x100>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f888 	bl	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010008 	.word	0x00010008
 8002a1c:	00010002 	.word	0x00010002

08002a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a30:	e048      	b.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d044      	beq.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7ff fa3d 	bl	8001eb8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d139      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	e00c      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d116      	bne.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e023      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10d      	bne.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	e00c      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d093      	beq.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b22:	e071      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b32:	d123      	bne.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e067      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d041      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b84:	f7ff f998 	bl	8001eb8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d136      	bne.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10c      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e00b      	b.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e021      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10c      	bne.n	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e00b      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f af6d 	bne.w	8002b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f886 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e034      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d028      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7ff f91d 	bl	8001eb8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11d      	bne.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b80      	cmp	r3, #128	@ 0x80
 8002c9c:	d016      	beq.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e007      	b.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	2b80      	cmp	r3, #128	@ 0x80
 8002cd8:	d1c3      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f83e 	bl	8002d74 <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e034      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d028      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7ff f8d5 	bl	8001eb8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11d      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d016      	beq.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d1c3      	bne.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8a:	d11b      	bne.n	8002dc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af02      	add	r7, sp, #8
 8002dd8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e108      	b.n	8002ff6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fed8 	bl	8001bb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2203      	movs	r2, #3
 8002e08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e12:	d102      	bne.n	8002e1a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fab6 	bl	8006390 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7c1a      	ldrb	r2, [r3, #16]
 8002e2c:	f88d 2000 	strb.w	r2, [sp]
 8002e30:	3304      	adds	r3, #4
 8002e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e34:	f003 fa48 	bl	80062c8 <USB_CoreInit>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0d5      	b.n	8002ff6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 faae 	bl	80063b2 <USB_SetCurrentMode>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0c6      	b.n	8002ff6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e04a      	b.n	8002f04 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3315      	adds	r3, #21
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3314      	adds	r3, #20
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	b298      	uxth	r0, r3
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	332e      	adds	r3, #46	@ 0x2e
 8002eaa:	4602      	mov	r2, r0
 8002eac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3318      	adds	r3, #24
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	331c      	adds	r3, #28
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3320      	adds	r3, #32
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3324      	adds	r3, #36	@ 0x24
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	3301      	adds	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3af      	bcc.n	8002e6e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	e044      	b.n	8002f9e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	791b      	ldrb	r3, [r3, #4]
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3b5      	bcc.n	8002f14 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7c1a      	ldrb	r2, [r3, #16]
 8002fb0:	f88d 2000 	strb.w	r2, [sp]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb8:	f003 fa48 	bl	800644c <USB_DevInit>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e013      	b.n	8002ff6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7b1b      	ldrb	r3, [r3, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d102      	bne.n	8002fea <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f80a 	bl	8002ffe <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f003 fc03 	bl	80067fa <USB_DevDisconnect>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003030:	f043 0303 	orr.w	r3, r3, #3
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0cc      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b68      	ldr	r3, [pc, #416]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d90c      	bls.n	8003084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b65      	ldr	r3, [pc, #404]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b63      	ldr	r3, [pc, #396]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b8      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a58      	ldr	r2, [pc, #352]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b4:	4b53      	ldr	r3, [pc, #332]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b50      	ldr	r3, [pc, #320]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	494d      	ldr	r1, [pc, #308]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d044      	beq.n	8003168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b47      	ldr	r3, [pc, #284]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d119      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b3f      	ldr	r3, [pc, #252]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003116:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e067      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4934      	ldr	r1, [pc, #208]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003138:	f7fe febe 	bl	8001eb8 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fe feba 	bl	8001eb8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e04f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b2b      	ldr	r3, [pc, #172]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d20c      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e032      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4916      	ldr	r1, [pc, #88]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ba:	4b12      	ldr	r3, [pc, #72]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	490e      	ldr	r1, [pc, #56]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ce:	f000 fb7f 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490a      	ldr	r1, [pc, #40]	@ (8003208 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fe1e 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00
 8003204:	40023800 	.word	0x40023800
 8003208:	080072b8 	.word	0x080072b8
 800320c:	20000004 	.word	0x20000004
 8003210:	20000008 	.word	0x20000008

08003214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b03      	ldr	r3, [pc, #12]	@ (8003228 <HAL_RCC_GetHCLKFreq+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000004 	.word	0x20000004

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003230:	f7ff fff0 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	@ (8003250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	080072c8 	.word	0x080072c8

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003258:	f7ff ffdc 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0b5b      	lsrs	r3, r3, #13
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	@ (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	080072c8 	.word	0x080072c8

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08c      	sub	sp, #48	@ 0x30
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80032b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032ba:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	496c      	ldr	r1, [pc, #432]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80032d2:	2301      	movs	r3, #1
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80032e2:	4b64      	ldr	r3, [pc, #400]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	4960      	ldr	r1, [pc, #384]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003300:	2301      	movs	r3, #1
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d017      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003310:	4b58      	ldr	r3, [pc, #352]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4955      	ldr	r1, [pc, #340]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332e:	d101      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003330:	2301      	movs	r3, #1
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800333c:	2301      	movs	r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800334c:	4b49      	ldr	r3, [pc, #292]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800334e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003352:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335a:	4946      	ldr	r1, [pc, #280]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336a:	d101      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800336c:	2301      	movs	r3, #1
 800336e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003378:	2301      	movs	r3, #1
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 808a 	beq.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	4a38      	ldr	r2, [pc, #224]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	@ 0x40
 800339a:	4b36      	ldr	r3, [pc, #216]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033a6:	4b34      	ldr	r3, [pc, #208]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a33      	ldr	r2, [pc, #204]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033b2:	f7fe fd81 	bl	8001eb8 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80033b8:	e008      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fe fd7d 	bl	8001eb8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e278      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80033cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033d8:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033e0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d028      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033fe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003400:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003406:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800340c:	4a19      	ldr	r2, [pc, #100]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003412:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d114      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe fd4b 	bl	8001eb8 <HAL_GetTick>
 8003422:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fd47 	bl	8001eb8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e240      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ee      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003450:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003454:	d114      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003456:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800346a:	4902      	ldr	r1, [pc, #8]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	608b      	str	r3, [r1, #8]
 8003470:	e00c      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40007000 	.word	0x40007000
 800347c:	42470e40 	.word	0x42470e40
 8003480:	4b4a      	ldr	r3, [pc, #296]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a49      	ldr	r2, [pc, #292]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003486:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800348a:	6093      	str	r3, [r2, #8]
 800348c:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800348e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	4944      	ldr	r1, [pc, #272]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800349a:	4313      	orrs	r3, r2
 800349c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80034b0:	4b3f      	ldr	r3, [pc, #252]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80034b2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80034c0:	4b3a      	ldr	r3, [pc, #232]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ce:	4937      	ldr	r1, [pc, #220]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034e2:	4b32      	ldr	r3, [pc, #200]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f0:	492e      	ldr	r1, [pc, #184]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d011      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003504:	4b29      	ldr	r3, [pc, #164]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800350a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	4926      	ldr	r1, [pc, #152]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003522:	d101      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003524:	2301      	movs	r3, #1
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003534:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800353a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	491a      	ldr	r1, [pc, #104]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003564:	4911      	ldr	r1, [pc, #68]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003576:	2301      	movs	r3, #1
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d005      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003588:	f040 80ff 	bne.w	800378a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003592:	f7fe fc91 	bl	8001eb8 <HAL_GetTick>
 8003596:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003598:	e00e      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800359a:	f7fe fc8d 	bl	8001eb8 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d907      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e188      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x642>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	424711e0 	.word	0x424711e0
 80035b4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b8:	4b7e      	ldr	r3, [pc, #504]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ea      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d028      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d124      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80035ec:	4b71      	ldr	r3, [pc, #452]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	3301      	adds	r3, #1
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035fe:	4b6d      	ldr	r3, [pc, #436]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003604:	0e1b      	lsrs	r3, r3, #24
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	431a      	orrs	r2, r3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	071b      	lsls	r3, r3, #28
 800362e:	4961      	ldr	r1, [pc, #388]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003654:	2b00      	cmp	r3, #0
 8003656:	d035      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003660:	d130      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003662:	4b54      	ldr	r3, [pc, #336]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	3301      	adds	r3, #1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003674:	4b4f      	ldr	r3, [pc, #316]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800367a:	0f1b      	lsrs	r3, r3, #28
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	019b      	lsls	r3, r3, #6
 800368c:	431a      	orrs	r2, r3
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	431a      	orrs	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	071b      	lsls	r3, r3, #28
 80036a4:	4943      	ldr	r1, [pc, #268]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036ac:	4b41      	ldr	r3, [pc, #260]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036b2:	f023 021f 	bic.w	r2, r3, #31
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	493d      	ldr	r1, [pc, #244]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d029      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d8:	d124      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036da:	4b36      	ldr	r3, [pc, #216]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036ec:	4b31      	ldr	r3, [pc, #196]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f2:	0f1b      	lsrs	r3, r3, #28
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	019b      	lsls	r3, r3, #6
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	3b01      	subs	r3, #1
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	431a      	orrs	r2, r3
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	431a      	orrs	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	071b      	lsls	r3, r3, #28
 800371c:	4925      	ldr	r1, [pc, #148]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	071b      	lsls	r3, r3, #28
 8003756:	4917      	ldr	r1, [pc, #92]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800375e:	4b16      	ldr	r3, [pc, #88]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003764:	f7fe fba8 	bl	8001eb8 <HAL_GetTick>
 8003768:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800376c:	f7fe fba4 	bl	8001eb8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e09f      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800377e:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800378a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378c:	2b01      	cmp	r3, #1
 800378e:	f040 8095 	bne.w	80038bc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003798:	f7fe fb8e 	bl	8001eb8 <HAL_GetTick>
 800379c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800379e:	e00f      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037a0:	f7fe fb8a 	bl	8001eb8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d908      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e085      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x642>
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	42470068 	.word	0x42470068
 80037bc:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c0:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037cc:	d0e8      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02b      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d127      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80037f6:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	3301      	adds	r3, #1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	431a      	orrs	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	3b01      	subs	r3, #1
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	061b      	lsls	r3, r3, #24
 8003824:	4928      	ldr	r1, [pc, #160]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800382c:	4b26      	ldr	r3, [pc, #152]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800382e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003832:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	3b01      	subs	r3, #1
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	4922      	ldr	r1, [pc, #136]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01d      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800385a:	d118      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800385c:	4b1a      	ldr	r3, [pc, #104]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003862:	0e1b      	lsrs	r3, r3, #24
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	3b01      	subs	r3, #1
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	4910      	ldr	r1, [pc, #64]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800388e:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003894:	f7fe fb10 	bl	8001eb8 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800389c:	f7fe fb0c 	bl	8001eb8 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e007      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ae:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ba:	d1ef      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3730      	adds	r7, #48	@ 0x30
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	42470070 	.word	0x42470070

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b0ae      	sub	sp, #184	@ 0xb8
 80038d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f6:	4bcb      	ldr	r3, [pc, #812]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	f200 8206 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x440>
 8003904:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003941 	.word	0x08003941
 8003910:	08003d11 	.word	0x08003d11
 8003914:	08003d11 	.word	0x08003d11
 8003918:	08003d11 	.word	0x08003d11
 800391c:	08003949 	.word	0x08003949
 8003920:	08003d11 	.word	0x08003d11
 8003924:	08003d11 	.word	0x08003d11
 8003928:	08003d11 	.word	0x08003d11
 800392c:	08003951 	.word	0x08003951
 8003930:	08003d11 	.word	0x08003d11
 8003934:	08003d11 	.word	0x08003d11
 8003938:	08003d11 	.word	0x08003d11
 800393c:	08003b41 	.word	0x08003b41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4bb9      	ldr	r3, [pc, #740]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x358>)
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003946:	e1e7      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003948:	4bb8      	ldr	r3, [pc, #736]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x35c>)
 800394a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800394e:	e1e3      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003950:	4bb4      	ldr	r3, [pc, #720]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395c:	4bb1      	ldr	r3, [pc, #708]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d071      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003968:	4bae      	ldr	r3, [pc, #696]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003974:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003978:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800398a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	f04f 0000 	mov.w	r0, #0
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	0159      	lsls	r1, r3, #5
 800399c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a0:	0150      	lsls	r0, r2, #5
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4621      	mov	r1, r4
 80039a8:	1a51      	subs	r1, r2, r1
 80039aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80039ac:	4629      	mov	r1, r5
 80039ae:	eb63 0301 	sbc.w	r3, r3, r1
 80039b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80039c0:	4649      	mov	r1, r9
 80039c2:	018b      	lsls	r3, r1, #6
 80039c4:	4641      	mov	r1, r8
 80039c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ca:	4641      	mov	r1, r8
 80039cc:	018a      	lsls	r2, r1, #6
 80039ce:	4641      	mov	r1, r8
 80039d0:	1a51      	subs	r1, r2, r1
 80039d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039d4:	4649      	mov	r1, r9
 80039d6:	eb63 0301 	sbc.w	r3, r3, r1
 80039da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80039e8:	4649      	mov	r1, r9
 80039ea:	00cb      	lsls	r3, r1, #3
 80039ec:	4641      	mov	r1, r8
 80039ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f2:	4641      	mov	r1, r8
 80039f4:	00ca      	lsls	r2, r1, #3
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	4622      	mov	r2, r4
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a02:	462b      	mov	r3, r5
 8003a04:	460a      	mov	r2, r1
 8003a06:	eb42 0303 	adc.w	r3, r2, r3
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a18:	4629      	mov	r1, r5
 8003a1a:	024b      	lsls	r3, r1, #9
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a22:	4621      	mov	r1, r4
 8003a24:	024a      	lsls	r2, r1, #9
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003a3c:	f7fd f85e 	bl	8000afc <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4613      	mov	r3, r2
 8003a46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a4a:	e067      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4c:	4b75      	ldr	r3, [pc, #468]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a66:	2300      	movs	r3, #0
 8003a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	0159      	lsls	r1, r3, #5
 8003a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a80:	0150      	lsls	r0, r2, #5
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4621      	mov	r1, r4
 8003a88:	1a51      	subs	r1, r2, r1
 8003a8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	018b      	lsls	r3, r1, #6
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aaa:	4641      	mov	r1, r8
 8003aac:	018a      	lsls	r2, r1, #6
 8003aae:	4641      	mov	r1, r8
 8003ab0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ac6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ace:	4692      	mov	sl, r2
 8003ad0:	469b      	mov	fp, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	462b      	mov	r3, r5
 8003adc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003aee:	4629      	mov	r1, r5
 8003af0:	028b      	lsls	r3, r1, #10
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af8:	4621      	mov	r1, r4
 8003afa:	028a      	lsls	r2, r1, #10
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b04:	2200      	movs	r2, #0
 8003b06:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b08:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b0e:	f7fc fff5 	bl	8000afc <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4613      	mov	r3, r2
 8003b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b1c:	4b41      	ldr	r3, [pc, #260]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	3301      	adds	r3, #1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b3e:	e0eb      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b40:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4c:	4b35      	ldr	r3, [pc, #212]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d06b      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b58:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	2200      	movs	r2, #0
 8003b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b74:	4622      	mov	r2, r4
 8003b76:	462b      	mov	r3, r5
 8003b78:	f04f 0000 	mov.w	r0, #0
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	0159      	lsls	r1, r3, #5
 8003b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b86:	0150      	lsls	r0, r2, #5
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	1a51      	subs	r1, r2, r1
 8003b90:	61b9      	str	r1, [r7, #24]
 8003b92:	4629      	mov	r1, r5
 8003b94:	eb63 0301 	sbc.w	r3, r3, r1
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	018b      	lsls	r3, r1, #6
 8003baa:	4651      	mov	r1, sl
 8003bac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	018a      	lsls	r2, r1, #6
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	ebb2 0801 	subs.w	r8, r2, r1
 8003bba:	4659      	mov	r1, fp
 8003bbc:	eb63 0901 	sbc.w	r9, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd4:	4690      	mov	r8, r2
 8003bd6:	4699      	mov	r9, r3
 8003bd8:	4623      	mov	r3, r4
 8003bda:	eb18 0303 	adds.w	r3, r8, r3
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	462b      	mov	r3, r5
 8003be2:	eb49 0303 	adc.w	r3, r9, r3
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	024b      	lsls	r3, r1, #9
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bfe:	4621      	mov	r1, r4
 8003c00:	024a      	lsls	r2, r1, #9
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c14:	f7fc ff72 	bl	8000afc <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c22:	e065      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x420>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c30:	4b3d      	ldr	r3, [pc, #244]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	2200      	movs	r2, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c40:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c42:	2300      	movs	r3, #0
 8003c44:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	f04f 0000 	mov.w	r0, #0
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	0159      	lsls	r1, r3, #5
 8003c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5c:	0150      	lsls	r0, r2, #5
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4641      	mov	r1, r8
 8003c64:	1a51      	subs	r1, r2, r1
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4649      	mov	r1, r9
 8003c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	018b      	lsls	r3, r1, #6
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c86:	4651      	mov	r1, sl
 8003c88:	018a      	lsls	r2, r1, #6
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	1a54      	subs	r4, r2, r1
 8003c8e:	4659      	mov	r1, fp
 8003c90:	eb63 0501 	sbc.w	r5, r3, r1
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	00eb      	lsls	r3, r5, #3
 8003c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca2:	00e2      	lsls	r2, r4, #3
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	4643      	mov	r3, r8
 8003caa:	18e3      	adds	r3, r4, r3
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	464b      	mov	r3, r9
 8003cb0:	eb45 0303 	adc.w	r3, r5, r3
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	028b      	lsls	r3, r1, #10
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ccc:	4621      	mov	r1, r4
 8003cce:	028a      	lsls	r2, r1, #10
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cd8:	2200      	movs	r2, #0
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cdc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003cde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ce2:	f7fc ff0b 	bl	8000afc <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4613      	mov	r3, r2
 8003cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	0f1b      	lsrs	r3, r3, #28
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d0e:	e003      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	37b8      	adds	r7, #184	@ 0xb8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e28d      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8083 	beq.w	8003e56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d50:	4b94      	ldr	r3, [pc, #592]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d019      	beq.n	8003d90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d5c:	4b91      	ldr	r3, [pc, #580]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d68:	4b8e      	ldr	r3, [pc, #568]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d74:	d00c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d76:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d112      	bne.n	8003da8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d82:	4b88      	ldr	r3, [pc, #544]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	4b84      	ldr	r3, [pc, #528]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05b      	beq.n	8003e54 <HAL_RCC_OscConfig+0x124>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d157      	bne.n	8003e54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e25a      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x90>
 8003db2:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7b      	ldr	r2, [pc, #492]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e01d      	b.n	8003dfc <HAL_RCC_OscConfig+0xcc>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0xb4>
 8003dca:	4b76      	ldr	r3, [pc, #472]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a75      	ldr	r2, [pc, #468]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b73      	ldr	r3, [pc, #460]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a72      	ldr	r2, [pc, #456]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0xcc>
 8003de4:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6b      	ldr	r2, [pc, #428]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f858 	bl	8001eb8 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe f854 	bl	8001eb8 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e21f      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b61      	ldr	r3, [pc, #388]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0xdc>
 8003e2a:	e014      	b.n	8003e56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe f844 	bl	8001eb8 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fe f840 	bl	8001eb8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	@ 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e20b      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	4b57      	ldr	r3, [pc, #348]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x104>
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d06f      	beq.n	8003f42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e62:	4b50      	ldr	r3, [pc, #320]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d017      	beq.n	8003e9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e86:	4b47      	ldr	r3, [pc, #284]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d11c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b44      	ldr	r3, [pc, #272]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	4b41      	ldr	r3, [pc, #260]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x186>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e1d3      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4937      	ldr	r1, [pc, #220]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eca:	e03a      	b.n	8003f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed4:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <HAL_RCC_OscConfig+0x278>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fd ffed 	bl	8001eb8 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee2:	f7fd ffe9 	bl	8001eb8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e1b4      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f00:	4b28      	ldr	r3, [pc, #160]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4925      	ldr	r1, [pc, #148]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f16:	4b24      	ldr	r3, [pc, #144]	@ (8003fa8 <HAL_RCC_OscConfig+0x278>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fd ffcc 	bl	8001eb8 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f24:	f7fd ffc8 	bl	8001eb8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e193      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f36:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d036      	beq.n	8003fbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d016      	beq.n	8003f84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f56:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd ffac 	bl	8001eb8 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd ffa8 	bl	8001eb8 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e173      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f76:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x234>
 8003f82:	e01b      	b.n	8003fbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f84:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fd ff95 	bl	8001eb8 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	e00e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f92:	f7fd ff91 	bl	8001eb8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d907      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e15c      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	42470000 	.word	0x42470000
 8003fac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b8a      	ldr	r3, [pc, #552]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ea      	bne.n	8003f92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8097 	beq.w	80040f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b83      	ldr	r3, [pc, #524]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b7f      	ldr	r3, [pc, #508]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fea:	4b7c      	ldr	r3, [pc, #496]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b79      	ldr	r3, [pc, #484]	@ (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004006:	4b76      	ldr	r3, [pc, #472]	@ (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	@ (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fd ff51 	bl	8001eb8 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fd ff4d 	bl	8001eb8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e118      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	4b6c      	ldr	r3, [pc, #432]	@ (80041e0 <HAL_RCC_OscConfig+0x4b0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x31e>
 8004040:	4b66      	ldr	r3, [pc, #408]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004044:	4a65      	ldr	r2, [pc, #404]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	@ 0x70
 800404c:	e01c      	b.n	8004088 <HAL_RCC_OscConfig+0x358>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x340>
 8004056:	4b61      	ldr	r3, [pc, #388]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	4a60      	ldr	r2, [pc, #384]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	6713      	str	r3, [r2, #112]	@ 0x70
 8004062:	4b5e      	ldr	r3, [pc, #376]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004066:	4a5d      	ldr	r2, [pc, #372]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6713      	str	r3, [r2, #112]	@ 0x70
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0x358>
 8004070:	4b5a      	ldr	r3, [pc, #360]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004074:	4a59      	ldr	r2, [pc, #356]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6713      	str	r3, [r2, #112]	@ 0x70
 800407c:	4b57      	ldr	r3, [pc, #348]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004080:	4a56      	ldr	r2, [pc, #344]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004082:	f023 0304 	bic.w	r3, r3, #4
 8004086:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd ff12 	bl	8001eb8 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	e00a      	b.n	80040ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004098:	f7fd ff0e 	bl	8001eb8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e0d7      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	4b4b      	ldr	r3, [pc, #300]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ee      	beq.n	8004098 <HAL_RCC_OscConfig+0x368>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fefc 	bl	8001eb8 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c2:	e00a      	b.n	80040da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fd fef8 	bl	8001eb8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e0c1      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	4b40      	ldr	r3, [pc, #256]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ee      	bne.n	80040c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	4a3a      	ldr	r2, [pc, #232]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80040f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80ad 	beq.w	800425c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004102:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b08      	cmp	r3, #8
 800410c:	d060      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d145      	bne.n	80041a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b33      	ldr	r3, [pc, #204]	@ (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fecc 	bl	8001eb8 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd fec8 	bl	8001eb8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e093      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	4b29      	ldr	r3, [pc, #164]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	3b01      	subs	r3, #1
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	491b      	ldr	r1, [pc, #108]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd fe9d 	bl	8001eb8 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004182:	f7fd fe99 	bl	8001eb8 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e064      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004194:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x452>
 80041a0:	e05c      	b.n	800425c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <HAL_RCC_OscConfig+0x4b4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fe86 	bl	8001eb8 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fd fe82 	bl	8001eb8 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e04d      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <HAL_RCC_OscConfig+0x4ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x480>
 80041ce:	e045      	b.n	800425c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e040      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40007000 	.word	0x40007000
 80041e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <HAL_RCC_OscConfig+0x538>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d030      	beq.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d129      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d122      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800421e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004220:	4293      	cmp	r3, r2
 8004222:	d119      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d10f      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e041      	b.n	8004302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd fba8 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 ff2a 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d001      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e04e      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a23      	ldr	r2, [pc, #140]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d022      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434e:	d01d      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1f      	ldr	r2, [pc, #124]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d018      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1e      	ldr	r2, [pc, #120]	@ (80043d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d013      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1c      	ldr	r2, [pc, #112]	@ (80043dc <HAL_TIM_Base_Start_IT+0xd0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00e      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d009      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <HAL_TIM_Base_Start_IT+0x80>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d111      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d010      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e007      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40010400 	.word	0x40010400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40001800 	.word	0x40001800

080043ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e041      	b.n	8004482 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f839 	bl	800448a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 fe6a 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <HAL_TIM_PWM_Start+0x24>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e022      	b.n	800450a <HAL_TIM_PWM_Start+0x6a>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d109      	bne.n	80044de <HAL_TIM_PWM_Start+0x3e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	e015      	b.n	800450a <HAL_TIM_PWM_Start+0x6a>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d109      	bne.n	80044f8 <HAL_TIM_PWM_Start+0x58>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e008      	b.n	800450a <HAL_TIM_PWM_Start+0x6a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07c      	b.n	800460c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Start+0x82>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004520:	e013      	b.n	800454a <HAL_TIM_PWM_Start+0xaa>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Start+0x92>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004530:	e00b      	b.n	800454a <HAL_TIM_PWM_Start+0xaa>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start+0xa2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004540:	e003      	b.n	800454a <HAL_TIM_PWM_Start+0xaa>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2201      	movs	r2, #1
 8004550:	6839      	ldr	r1, [r7, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f001 f9f6 	bl	8005944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2d      	ldr	r2, [pc, #180]	@ (8004614 <HAL_TIM_PWM_Start+0x174>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_PWM_Start+0xcc>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2c      	ldr	r2, [pc, #176]	@ (8004618 <HAL_TIM_PWM_Start+0x178>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_TIM_PWM_Start+0xd0>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_TIM_PWM_Start+0xd2>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <HAL_TIM_PWM_Start+0x174>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x136>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004598:	d01d      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x136>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1f      	ldr	r2, [pc, #124]	@ (800461c <HAL_TIM_PWM_Start+0x17c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x136>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004620 <HAL_TIM_PWM_Start+0x180>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x136>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004624 <HAL_TIM_PWM_Start+0x184>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x136>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a16      	ldr	r2, [pc, #88]	@ (8004618 <HAL_TIM_PWM_Start+0x178>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x136>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <HAL_TIM_PWM_Start+0x188>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_PWM_Start+0x136>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a16      	ldr	r2, [pc, #88]	@ (800462c <HAL_TIM_PWM_Start+0x18c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d010      	beq.n	800460a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e007      	b.n	800460a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40014000 	.word	0x40014000
 800462c:	40001800 	.word	0x40001800

08004630 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f97e 	bl	8005944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2e      	ldr	r2, [pc, #184]	@ (8004708 <HAL_TIM_PWM_Stop+0xd8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIM_PWM_Stop+0x2c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2d      	ldr	r2, [pc, #180]	@ (800470c <HAL_TIM_PWM_Stop+0xdc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d101      	bne.n	8004660 <HAL_TIM_PWM_Stop+0x30>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_TIM_PWM_Stop+0x32>
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d017      	beq.n	8004696 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <HAL_TIM_PWM_Stop+0x66>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d107      	bne.n	8004696 <HAL_TIM_PWM_Stop+0x66>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <HAL_TIM_PWM_Stop+0x96>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a1a      	ldr	r2, [r3, #32]
 80046ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d107      	bne.n	80046c6 <HAL_TIM_PWM_Stop+0x96>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Stop+0xa6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d4:	e013      	b.n	80046fe <HAL_TIM_PWM_Stop+0xce>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_PWM_Stop+0xb6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e4:	e00b      	b.n	80046fe <HAL_TIM_PWM_Stop+0xce>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d104      	bne.n	80046f6 <HAL_TIM_PWM_Stop+0xc6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f4:	e003      	b.n	80046fe <HAL_TIM_PWM_Stop+0xce>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40010000 	.word	0x40010000
 800470c:	40010400 	.word	0x40010400

08004710 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e041      	b.n	80047a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f839 	bl	80047ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f000 fcd8 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_IC_Start_IT+0x1e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e013      	b.n	800480a <HAL_TIM_IC_Start_IT+0x46>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_IC_Start_IT+0x2e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e00b      	b.n	800480a <HAL_TIM_IC_Start_IT+0x46>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_IC_Start_IT+0x3e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	e003      	b.n	800480a <HAL_TIM_IC_Start_IT+0x46>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <HAL_TIM_IC_Start_IT+0x58>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e013      	b.n	8004844 <HAL_TIM_IC_Start_IT+0x80>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d104      	bne.n	800482c <HAL_TIM_IC_Start_IT+0x68>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e00b      	b.n	8004844 <HAL_TIM_IC_Start_IT+0x80>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d104      	bne.n	800483c <HAL_TIM_IC_Start_IT+0x78>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e003      	b.n	8004844 <HAL_TIM_IC_Start_IT+0x80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004842:	b2db      	uxtb	r3, r3
 8004844:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004846:	7bbb      	ldrb	r3, [r7, #14]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800484c:	7b7b      	ldrb	r3, [r7, #13]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0cc      	b.n	80049f0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <HAL_TIM_IC_Start_IT+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004864:	e013      	b.n	800488e <HAL_TIM_IC_Start_IT+0xca>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b04      	cmp	r3, #4
 800486a:	d104      	bne.n	8004876 <HAL_TIM_IC_Start_IT+0xb2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004874:	e00b      	b.n	800488e <HAL_TIM_IC_Start_IT+0xca>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d104      	bne.n	8004886 <HAL_TIM_IC_Start_IT+0xc2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004884:	e003      	b.n	800488e <HAL_TIM_IC_Start_IT+0xca>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d104      	bne.n	800489e <HAL_TIM_IC_Start_IT+0xda>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800489c:	e013      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x102>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_IC_Start_IT+0xea>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048ac:	e00b      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x102>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Start_IT+0xfa>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048bc:	e003      	b.n	80048c6 <HAL_TIM_IC_Start_IT+0x102>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d841      	bhi.n	8004950 <HAL_TIM_IC_Start_IT+0x18c>
 80048cc:	a201      	add	r2, pc, #4	@ (adr r2, 80048d4 <HAL_TIM_IC_Start_IT+0x110>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004951 	.word	0x08004951
 80048dc:	08004951 	.word	0x08004951
 80048e0:	08004951 	.word	0x08004951
 80048e4:	0800491b 	.word	0x0800491b
 80048e8:	08004951 	.word	0x08004951
 80048ec:	08004951 	.word	0x08004951
 80048f0:	08004951 	.word	0x08004951
 80048f4:	0800492d 	.word	0x0800492d
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004951 	.word	0x08004951
 8004900:	08004951 	.word	0x08004951
 8004904:	0800493f 	.word	0x0800493f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0202 	orr.w	r2, r2, #2
 8004916:	60da      	str	r2, [r3, #12]
      break;
 8004918:	e01d      	b.n	8004956 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0204 	orr.w	r2, r2, #4
 8004928:	60da      	str	r2, [r3, #12]
      break;
 800492a:	e014      	b.n	8004956 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0208 	orr.w	r2, r2, #8
 800493a:	60da      	str	r2, [r3, #12]
      break;
 800493c:	e00b      	b.n	8004956 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0210 	orr.w	r2, r2, #16
 800494c:	60da      	str	r2, [r3, #12]
      break;
 800494e:	e002      	b.n	8004956 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	bf00      	nop
  }

  if (status == HAL_OK)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d148      	bne.n	80049ee <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2201      	movs	r2, #1
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 ffed 	bl	8005944 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a22      	ldr	r2, [pc, #136]	@ (80049f8 <HAL_TIM_IC_Start_IT+0x234>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_TIM_IC_Start_IT+0x1f6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497c:	d01d      	beq.n	80049ba <HAL_TIM_IC_Start_IT+0x1f6>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1e      	ldr	r2, [pc, #120]	@ (80049fc <HAL_TIM_IC_Start_IT+0x238>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_TIM_IC_Start_IT+0x1f6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a00 <HAL_TIM_IC_Start_IT+0x23c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_TIM_IC_Start_IT+0x1f6>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <HAL_TIM_IC_Start_IT+0x240>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_TIM_IC_Start_IT+0x1f6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a19      	ldr	r2, [pc, #100]	@ (8004a08 <HAL_TIM_IC_Start_IT+0x244>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_TIM_IC_Start_IT+0x1f6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <HAL_TIM_IC_Start_IT+0x248>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_TIM_IC_Start_IT+0x1f6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a16      	ldr	r2, [pc, #88]	@ (8004a10 <HAL_TIM_IC_Start_IT+0x24c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d111      	bne.n	80049de <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d010      	beq.n	80049ee <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	e007      	b.n	80049ee <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40000400 	.word	0x40000400
 8004a00:	40000800 	.word	0x40000800
 8004a04:	40000c00 	.word	0x40000c00
 8004a08:	40010400 	.word	0x40010400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40001800 	.word	0x40001800

08004a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d020      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0202 	mvn.w	r2, #2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc fad8 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fb2e 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fb35 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0204 	mvn.w	r2, #4
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fab2 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb08 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fb0f 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0208 	mvn.w	r2, #8
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc fa8c 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fae2 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fae9 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0210 	mvn.w	r2, #16
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2208      	movs	r2, #8
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fa66 	bl	8001014 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fabc 	bl	80050c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fac3 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0201 	mvn.w	r2, #1
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fa2c 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 ff7c 	bl	8005a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa94 	bl	80050f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00c      	beq.n	8004bec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 ff4e 	bl	8005a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e088      	b.n	8004d24 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004c30:	f000 fcc4 	bl	80055bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 020c 	bic.w	r2, r2, #12
 8004c42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6999      	ldr	r1, [r3, #24]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	619a      	str	r2, [r3, #24]
 8004c56:	e060      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d11c      	bne.n	8004c98 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c6e:	f000 fd48 	bl	8005702 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6999      	ldr	r1, [r3, #24]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	021a      	lsls	r2, r3, #8
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	619a      	str	r2, [r3, #24]
 8004c96:	e040      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d11b      	bne.n	8004cd6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004cae:	f000 fd95 	bl	80057dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 020c 	bic.w	r2, r2, #12
 8004cc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69d9      	ldr	r1, [r3, #28]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	61da      	str	r2, [r3, #28]
 8004cd4:	e021      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b0c      	cmp	r3, #12
 8004cda:	d11c      	bne.n	8004d16 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004cec:	f000 fdb2 	bl	8005854 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69da      	ldr	r2, [r3, #28]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cfe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69d9      	ldr	r1, [r3, #28]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	61da      	str	r2, [r3, #28]
 8004d14:	e001      	b.n	8004d1a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e0ae      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	f200 809f 	bhi.w	8004e98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004e99 	.word	0x08004e99
 8004d68:	08004e99 	.word	0x08004e99
 8004d6c:	08004e99 	.word	0x08004e99
 8004d70:	08004dd5 	.word	0x08004dd5
 8004d74:	08004e99 	.word	0x08004e99
 8004d78:	08004e99 	.word	0x08004e99
 8004d7c:	08004e99 	.word	0x08004e99
 8004d80:	08004e17 	.word	0x08004e17
 8004d84:	08004e99 	.word	0x08004e99
 8004d88:	08004e99 	.word	0x08004e99
 8004d8c:	08004e99 	.word	0x08004e99
 8004d90:	08004e57 	.word	0x08004e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fa5e 	bl	800525c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0208 	orr.w	r2, r2, #8
 8004dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6999      	ldr	r1, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	619a      	str	r2, [r3, #24]
      break;
 8004dd2:	e064      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 faae 	bl	800533c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      break;
 8004e14:	e043      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fb03 	bl	8005428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0208 	orr.w	r2, r2, #8
 8004e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0204 	bic.w	r2, r2, #4
 8004e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69d9      	ldr	r1, [r3, #28]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
      break;
 8004e54:	e023      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fb57 	bl	8005510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	021a      	lsls	r2, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	61da      	str	r2, [r3, #28]
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e0b4      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x186>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f04:	d03e      	beq.n	8004f84 <HAL_TIM_ConfigClockSource+0xd4>
 8004f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f0a:	f200 8087 	bhi.w	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f12:	f000 8086 	beq.w	8005022 <HAL_TIM_ConfigClockSource+0x172>
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f1a:	d87f      	bhi.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b70      	cmp	r3, #112	@ 0x70
 8004f1e:	d01a      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0xa6>
 8004f20:	2b70      	cmp	r3, #112	@ 0x70
 8004f22:	d87b      	bhi.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b60      	cmp	r3, #96	@ 0x60
 8004f26:	d050      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x11a>
 8004f28:	2b60      	cmp	r3, #96	@ 0x60
 8004f2a:	d877      	bhi.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b50      	cmp	r3, #80	@ 0x50
 8004f2e:	d03c      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0xfa>
 8004f30:	2b50      	cmp	r3, #80	@ 0x50
 8004f32:	d873      	bhi.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	d058      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x13a>
 8004f38:	2b40      	cmp	r3, #64	@ 0x40
 8004f3a:	d86f      	bhi.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b30      	cmp	r3, #48	@ 0x30
 8004f3e:	d064      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x15a>
 8004f40:	2b30      	cmp	r3, #48	@ 0x30
 8004f42:	d86b      	bhi.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d060      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x15a>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d867      	bhi.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d05c      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x15a>
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d05a      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x15a>
 8004f54:	e062      	b.n	800501c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f66:	f000 fccd 	bl	8005904 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	609a      	str	r2, [r3, #8]
      break;
 8004f82:	e04f      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f94:	f000 fcb6 	bl	8005904 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fa6:	609a      	str	r2, [r3, #8]
      break;
 8004fa8:	e03c      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f000 fb74 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2150      	movs	r1, #80	@ 0x50
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fc83 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8004fc8:	e02c      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f000 fbd0 	bl	800577c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2160      	movs	r1, #96	@ 0x60
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fc73 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8004fe8:	e01c      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 fb54 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2140      	movs	r1, #64	@ 0x40
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fc63 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 8005008:	e00c      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f000 fc5a 	bl	80058ce <TIM_ITRx_SetConfig>
      break;
 800501a:	e003      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      break;
 8005020:	e000      	b.n	8005024 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d831      	bhi.n	80050b8 <HAL_TIM_ReadCapturedValue+0x78>
 8005054:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005091 	.word	0x08005091
 8005060:	080050b9 	.word	0x080050b9
 8005064:	080050b9 	.word	0x080050b9
 8005068:	080050b9 	.word	0x080050b9
 800506c:	0800509b 	.word	0x0800509b
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050b9 	.word	0x080050b9
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050a5 	.word	0x080050a5
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050b9 	.word	0x080050b9
 8005088:	080050b9 	.word	0x080050b9
 800508c:	080050af 	.word	0x080050af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005096:	60fb      	str	r3, [r7, #12]

      break;
 8005098:	e00f      	b.n	80050ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	60fb      	str	r3, [r7, #12]

      break;
 80050a2:	e00a      	b.n	80050ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050aa:	60fb      	str	r3, [r7, #12]

      break;
 80050ac:	e005      	b.n	80050ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	60fb      	str	r3, [r7, #12]

      break;
 80050b6:	e000      	b.n	80050ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80050b8:	bf00      	nop
  }

  return tmpreg;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a46      	ldr	r2, [pc, #280]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005122:	d00f      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a43      	ldr	r2, [pc, #268]	@ (8005234 <TIM_Base_SetConfig+0x130>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00b      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a42      	ldr	r2, [pc, #264]	@ (8005238 <TIM_Base_SetConfig+0x134>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a41      	ldr	r2, [pc, #260]	@ (800523c <TIM_Base_SetConfig+0x138>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a40      	ldr	r2, [pc, #256]	@ (8005240 <TIM_Base_SetConfig+0x13c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d108      	bne.n	8005156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d02b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005164:	d027      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a32      	ldr	r2, [pc, #200]	@ (8005234 <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d023      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a31      	ldr	r2, [pc, #196]	@ (8005238 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a30      	ldr	r2, [pc, #192]	@ (800523c <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2f      	ldr	r2, [pc, #188]	@ (8005240 <TIM_Base_SetConfig+0x13c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d017      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2e      	ldr	r2, [pc, #184]	@ (8005244 <TIM_Base_SetConfig+0x140>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2d      	ldr	r2, [pc, #180]	@ (8005248 <TIM_Base_SetConfig+0x144>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2c      	ldr	r2, [pc, #176]	@ (800524c <TIM_Base_SetConfig+0x148>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005250 <TIM_Base_SetConfig+0x14c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005254 <TIM_Base_SetConfig+0x150>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a29      	ldr	r2, [pc, #164]	@ (8005258 <TIM_Base_SetConfig+0x154>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a10      	ldr	r2, [pc, #64]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a12      	ldr	r2, [pc, #72]	@ (8005240 <TIM_Base_SetConfig+0x13c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]
  }
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800
 8005250:	40001800 	.word	0x40001800
 8005254:	40001c00 	.word	0x40001c00
 8005258:	40002000 	.word	0x40002000

0800525c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f023 0201 	bic.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 0302 	bic.w	r3, r3, #2
 80052a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <TIM_OC1_SetConfig+0xd8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC1_SetConfig+0x64>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005338 <TIM_OC1_SetConfig+0xdc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10c      	bne.n	80052da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0308 	bic.w	r3, r3, #8
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a15      	ldr	r2, [pc, #84]	@ (8005334 <TIM_OC1_SetConfig+0xd8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d003      	beq.n	80052ea <TIM_OC1_SetConfig+0x8e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a14      	ldr	r2, [pc, #80]	@ (8005338 <TIM_OC1_SetConfig+0xdc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d111      	bne.n	800530e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	621a      	str	r2, [r3, #32]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400

0800533c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 0210 	bic.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0320 	bic.w	r3, r3, #32
 8005386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <TIM_OC2_SetConfig+0xe4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC2_SetConfig+0x68>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a21      	ldr	r2, [pc, #132]	@ (8005424 <TIM_OC2_SetConfig+0xe8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10d      	bne.n	80053c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <TIM_OC2_SetConfig+0xe4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC2_SetConfig+0x94>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <TIM_OC2_SetConfig+0xe8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d113      	bne.n	80053f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400

08005428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a21      	ldr	r2, [pc, #132]	@ (8005508 <TIM_OC3_SetConfig+0xe0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_OC3_SetConfig+0x66>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a20      	ldr	r2, [pc, #128]	@ (800550c <TIM_OC3_SetConfig+0xe4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10d      	bne.n	80054aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <TIM_OC3_SetConfig+0xe0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC3_SetConfig+0x92>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a15      	ldr	r2, [pc, #84]	@ (800550c <TIM_OC3_SetConfig+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d113      	bne.n	80054e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40010000 	.word	0x40010000
 800550c:	40010400 	.word	0x40010400

08005510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a12      	ldr	r2, [pc, #72]	@ (80055b4 <TIM_OC4_SetConfig+0xa4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_OC4_SetConfig+0x68>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a11      	ldr	r2, [pc, #68]	@ (80055b8 <TIM_OC4_SetConfig+0xa8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d109      	bne.n	800558c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	019b      	lsls	r3, r3, #6
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400

080055bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f023 0201 	bic.w	r2, r3, #1
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a28      	ldr	r2, [pc, #160]	@ (8005688 <TIM_TI1_SetConfig+0xcc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01b      	beq.n	8005622 <TIM_TI1_SetConfig+0x66>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f0:	d017      	beq.n	8005622 <TIM_TI1_SetConfig+0x66>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a25      	ldr	r2, [pc, #148]	@ (800568c <TIM_TI1_SetConfig+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <TIM_TI1_SetConfig+0x66>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a24      	ldr	r2, [pc, #144]	@ (8005690 <TIM_TI1_SetConfig+0xd4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00f      	beq.n	8005622 <TIM_TI1_SetConfig+0x66>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a23      	ldr	r2, [pc, #140]	@ (8005694 <TIM_TI1_SetConfig+0xd8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00b      	beq.n	8005622 <TIM_TI1_SetConfig+0x66>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a22      	ldr	r2, [pc, #136]	@ (8005698 <TIM_TI1_SetConfig+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d007      	beq.n	8005622 <TIM_TI1_SetConfig+0x66>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a21      	ldr	r2, [pc, #132]	@ (800569c <TIM_TI1_SetConfig+0xe0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d003      	beq.n	8005622 <TIM_TI1_SetConfig+0x66>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a20      	ldr	r2, [pc, #128]	@ (80056a0 <TIM_TI1_SetConfig+0xe4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d101      	bne.n	8005626 <TIM_TI1_SetConfig+0x6a>
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <TIM_TI1_SetConfig+0x6c>
 8005626:	2300      	movs	r3, #0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e003      	b.n	8005646 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800564c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	b2db      	uxtb	r3, r3
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f023 030a 	bic.w	r3, r3, #10
 8005660:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f003 030a 	and.w	r3, r3, #10
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40010400 	.word	0x40010400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40001800 	.word	0x40001800

080056a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f023 030a 	bic.w	r3, r3, #10
 80056e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0210 	bic.w	r2, r3, #16
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800572e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	031b      	lsls	r3, r3, #12
 8005746:	b29b      	uxth	r3, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0210 	bic.w	r2, r3, #16
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	031b      	lsls	r3, r3, #12
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f023 0303 	bic.w	r3, r3, #3
 8005808:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005818:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	b2db      	uxtb	r3, r3
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800582c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005880:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005892:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	031b      	lsls	r3, r3, #12
 8005898:	b29b      	uxth	r3, r3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80058a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	031b      	lsls	r3, r3, #12
 80058ac:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f043 0307 	orr.w	r3, r3, #7
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	609a      	str	r2, [r3, #8]
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800591e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	021a      	lsls	r2, r3, #8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	431a      	orrs	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4313      	orrs	r3, r2
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	609a      	str	r2, [r3, #8]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2201      	movs	r2, #1
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	43db      	mvns	r3, r3
 8005966:	401a      	ands	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	431a      	orrs	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e05a      	b.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a21      	ldr	r2, [pc, #132]	@ (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d022      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f4:	d01d      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d018      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	@ (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a17      	ldr	r2, [pc, #92]	@ (8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a15      	ldr	r2, [pc, #84]	@ (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10c      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40001800 	.word	0x40001800

08005a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e042      	b.n	8005b48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fc f824 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2224      	movs	r2, #36	@ 0x24
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f973 	bl	8005de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	@ 0x28
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d175      	bne.n	8005c5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_UART_Transmit+0x2c>
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e06e      	b.n	8005c5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2221      	movs	r2, #33	@ 0x21
 8005b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b8e:	f7fc f993 	bl	8001eb8 <HAL_GetTick>
 8005b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba8:	d108      	bne.n	8005bbc <HAL_UART_Transmit+0x6c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e003      	b.n	8005bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bc4:	e02e      	b.n	8005c24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	@ 0x80
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f848 	bl	8005c66 <UART_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e03a      	b.n	8005c5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	3302      	adds	r3, #2
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	e007      	b.n	8005c16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	3301      	adds	r3, #1
 8005c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1cb      	bne.n	8005bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2140      	movs	r1, #64	@ 0x40
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f814 	bl	8005c66 <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e006      	b.n	8005c5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c76:	e03b      	b.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d037      	beq.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c80:	f7fc f91a 	bl	8001eb8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e03a      	b.n	8005d10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d023      	beq.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b80      	cmp	r3, #128	@ 0x80
 8005cac:	d020      	beq.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b40      	cmp	r3, #64	@ 0x40
 8005cb2:	d01d      	beq.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d116      	bne.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f81d 	bl	8005d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e00f      	b.n	8005d10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	bf0c      	ite	eq
 8005d00:	2301      	moveq	r3, #1
 8005d02:	2300      	movne	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d0b4      	beq.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b095      	sub	sp, #84	@ 0x54
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d40:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d119      	bne.n	8005dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db0:	61ba      	str	r2, [r7, #24]
 8005db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6979      	ldr	r1, [r7, #20]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005dd2:	bf00      	nop
 8005dd4:	3754      	adds	r7, #84	@ 0x54
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de4:	b0c0      	sub	sp, #256	@ 0x100
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	68d9      	ldr	r1, [r3, #12]
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	ea40 0301 	orr.w	r3, r0, r1
 8005e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e38:	f021 010c 	bic.w	r1, r1, #12
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e46:	430b      	orrs	r3, r1
 8005e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	6999      	ldr	r1, [r3, #24]
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	ea40 0301 	orr.w	r3, r0, r1
 8005e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80060ac <UART_SetConfig+0x2cc>)
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d005      	beq.n	8005e80 <UART_SetConfig+0xa0>
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80060b0 <UART_SetConfig+0x2d0>)
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d104      	bne.n	8005e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e80:	f7fd f9e8 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8005e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e88:	e003      	b.n	8005e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fd f9cf 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8005e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e9c:	f040 810c 	bne.w	80060b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	1891      	adds	r1, r2, r2
 8005eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	eb12 0801 	adds.w	r8, r2, r1
 8005ec8:	4629      	mov	r1, r5
 8005eca:	eb43 0901 	adc.w	r9, r3, r1
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee2:	4690      	mov	r8, r2
 8005ee4:	4699      	mov	r9, r3
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	eb18 0303 	adds.w	r3, r8, r3
 8005eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	eb49 0303 	adc.w	r3, r9, r3
 8005ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f0e:	460b      	mov	r3, r1
 8005f10:	18db      	adds	r3, r3, r3
 8005f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f14:	4613      	mov	r3, r2
 8005f16:	eb42 0303 	adc.w	r3, r2, r3
 8005f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f24:	f7fa fdea 	bl	8000afc <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4b61      	ldr	r3, [pc, #388]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	011c      	lsls	r4, r3, #4
 8005f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	1891      	adds	r1, r2, r2
 8005f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f50:	415b      	adcs	r3, r3
 8005f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f58:	4641      	mov	r1, r8
 8005f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f5e:	4649      	mov	r1, r9
 8005f60:	eb43 0b01 	adc.w	fp, r3, r1
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f78:	4692      	mov	sl, r2
 8005f7a:	469b      	mov	fp, r3
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f86:	464b      	mov	r3, r9
 8005f88:	eb4b 0303 	adc.w	r3, fp, r3
 8005f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	18db      	adds	r3, r3, r3
 8005fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005faa:	4613      	mov	r3, r2
 8005fac:	eb42 0303 	adc.w	r3, r2, r3
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fba:	f7fa fd9f 	bl	8000afc <__aeabi_uldivmod>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2264      	movs	r2, #100	@ 0x64
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	1acb      	subs	r3, r1, r3
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fda:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fe8:	441c      	add	r4, r3
 8005fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	1891      	adds	r1, r2, r2
 8006002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006004:	415b      	adcs	r3, r3
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800600c:	4641      	mov	r1, r8
 800600e:	1851      	adds	r1, r2, r1
 8006010:	6339      	str	r1, [r7, #48]	@ 0x30
 8006012:	4649      	mov	r1, r9
 8006014:	414b      	adcs	r3, r1
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006024:	4659      	mov	r1, fp
 8006026:	00cb      	lsls	r3, r1, #3
 8006028:	4651      	mov	r1, sl
 800602a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800602e:	4651      	mov	r1, sl
 8006030:	00ca      	lsls	r2, r1, #3
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	4603      	mov	r3, r0
 8006038:	4642      	mov	r2, r8
 800603a:	189b      	adds	r3, r3, r2
 800603c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006040:	464b      	mov	r3, r9
 8006042:	460a      	mov	r2, r1
 8006044:	eb42 0303 	adc.w	r3, r2, r3
 8006048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800605c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006060:	460b      	mov	r3, r1
 8006062:	18db      	adds	r3, r3, r3
 8006064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006066:	4613      	mov	r3, r2
 8006068:	eb42 0303 	adc.w	r3, r2, r3
 800606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800606e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006076:	f7fa fd41 	bl	8000afc <__aeabi_uldivmod>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8006080:	fba3 1302 	umull	r1, r3, r3, r2
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	2164      	movs	r1, #100	@ 0x64
 8006088:	fb01 f303 	mul.w	r3, r1, r3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	3332      	adds	r3, #50	@ 0x32
 8006092:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8006094:	fba2 2303 	umull	r2, r3, r2, r3
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	f003 0207 	and.w	r2, r3, #7
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4422      	add	r2, r4
 80060a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060a8:	e106      	b.n	80062b8 <UART_SetConfig+0x4d8>
 80060aa:	bf00      	nop
 80060ac:	40011000 	.word	0x40011000
 80060b0:	40011400 	.word	0x40011400
 80060b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ca:	4642      	mov	r2, r8
 80060cc:	464b      	mov	r3, r9
 80060ce:	1891      	adds	r1, r2, r2
 80060d0:	6239      	str	r1, [r7, #32]
 80060d2:	415b      	adcs	r3, r3
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060da:	4641      	mov	r1, r8
 80060dc:	1854      	adds	r4, r2, r1
 80060de:	4649      	mov	r1, r9
 80060e0:	eb43 0501 	adc.w	r5, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	00eb      	lsls	r3, r5, #3
 80060ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f2:	00e2      	lsls	r2, r4, #3
 80060f4:	4614      	mov	r4, r2
 80060f6:	461d      	mov	r5, r3
 80060f8:	4643      	mov	r3, r8
 80060fa:	18e3      	adds	r3, r4, r3
 80060fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006100:	464b      	mov	r3, r9
 8006102:	eb45 0303 	adc.w	r3, r5, r3
 8006106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006126:	4629      	mov	r1, r5
 8006128:	008b      	lsls	r3, r1, #2
 800612a:	4621      	mov	r1, r4
 800612c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006130:	4621      	mov	r1, r4
 8006132:	008a      	lsls	r2, r1, #2
 8006134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006138:	f7fa fce0 	bl	8000afc <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4b60      	ldr	r3, [pc, #384]	@ (80062c4 <UART_SetConfig+0x4e4>)
 8006142:	fba3 2302 	umull	r2, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	011c      	lsls	r4, r3, #4
 800614a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614e:	2200      	movs	r2, #0
 8006150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	1891      	adds	r1, r2, r2
 8006162:	61b9      	str	r1, [r7, #24]
 8006164:	415b      	adcs	r3, r3
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800616c:	4641      	mov	r1, r8
 800616e:	1851      	adds	r1, r2, r1
 8006170:	6139      	str	r1, [r7, #16]
 8006172:	4649      	mov	r1, r9
 8006174:	414b      	adcs	r3, r1
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006184:	4659      	mov	r1, fp
 8006186:	00cb      	lsls	r3, r1, #3
 8006188:	4651      	mov	r1, sl
 800618a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618e:	4651      	mov	r1, sl
 8006190:	00ca      	lsls	r2, r1, #3
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	4603      	mov	r3, r0
 8006198:	4642      	mov	r2, r8
 800619a:	189b      	adds	r3, r3, r2
 800619c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061a0:	464b      	mov	r3, r9
 80061a2:	460a      	mov	r2, r1
 80061a4:	eb42 0303 	adc.w	r3, r2, r3
 80061a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061c4:	4649      	mov	r1, r9
 80061c6:	008b      	lsls	r3, r1, #2
 80061c8:	4641      	mov	r1, r8
 80061ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ce:	4641      	mov	r1, r8
 80061d0:	008a      	lsls	r2, r1, #2
 80061d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061d6:	f7fa fc91 	bl	8000afc <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	4b38      	ldr	r3, [pc, #224]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80061e2:	fba3 2301 	umull	r2, r3, r3, r1
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2264      	movs	r2, #100	@ 0x64
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	1acb      	subs	r3, r1, r3
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	3332      	adds	r3, #50	@ 0x32
 80061f4:	4a33      	ldr	r2, [pc, #204]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006200:	441c      	add	r4, r3
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	673b      	str	r3, [r7, #112]	@ 0x70
 800620a:	677a      	str	r2, [r7, #116]	@ 0x74
 800620c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	415b      	adcs	r3, r3
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006220:	4641      	mov	r1, r8
 8006222:	1851      	adds	r1, r2, r1
 8006224:	6039      	str	r1, [r7, #0]
 8006226:	4649      	mov	r1, r9
 8006228:	414b      	adcs	r3, r1
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006238:	4659      	mov	r1, fp
 800623a:	00cb      	lsls	r3, r1, #3
 800623c:	4651      	mov	r1, sl
 800623e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006242:	4651      	mov	r1, sl
 8006244:	00ca      	lsls	r2, r1, #3
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	189b      	adds	r3, r3, r2
 8006250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006252:	464b      	mov	r3, r9
 8006254:	460a      	mov	r2, r1
 8006256:	eb42 0303 	adc.w	r3, r2, r3
 800625a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	663b      	str	r3, [r7, #96]	@ 0x60
 8006266:	667a      	str	r2, [r7, #100]	@ 0x64
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006274:	4649      	mov	r1, r9
 8006276:	008b      	lsls	r3, r1, #2
 8006278:	4641      	mov	r1, r8
 800627a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800627e:	4641      	mov	r1, r8
 8006280:	008a      	lsls	r2, r1, #2
 8006282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006286:	f7fa fc39 	bl	8000afc <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <UART_SetConfig+0x4e4>)
 8006290:	fba3 1302 	umull	r1, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	2164      	movs	r1, #100	@ 0x64
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	3332      	adds	r3, #50	@ 0x32
 80062a2:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4422      	add	r2, r4
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062be:	46bd      	mov	sp, r7
 80062c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c4:	51eb851f 	.word	0x51eb851f

080062c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062c8:	b084      	sub	sp, #16
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	f107 001c 	add.w	r0, r7, #28
 80062d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d123      	bne.n	800632a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80062f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800630a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800630e:	2b01      	cmp	r3, #1
 8006310:	d105      	bne.n	800631e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa9a 	bl	8006858 <USB_CoreReset>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
 8006328:	e01b      	b.n	8006362 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa8e 	bl	8006858 <USB_CoreReset>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006340:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	639a      	str	r2, [r3, #56]	@ 0x38
 8006354:	e005      	b.n	8006362 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006362:	7fbb      	ldrb	r3, [r7, #30]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10b      	bne.n	8006380 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f043 0206 	orr.w	r2, r3, #6
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800638c:	b004      	add	sp, #16
 800638e:	4770      	bx	lr

08006390 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f023 0201 	bic.w	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d115      	bne.n	8006400 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063e0:	200a      	movs	r0, #10
 80063e2:	f7fb fd75 	bl	8001ed0 <HAL_Delay>
      ms += 10U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	330a      	adds	r3, #10
 80063ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fa25 	bl	800683c <USB_GetMode>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d01e      	beq.n	8006436 <USB_SetCurrentMode+0x84>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80063fc:	d9f0      	bls.n	80063e0 <USB_SetCurrentMode+0x2e>
 80063fe:	e01a      	b.n	8006436 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d115      	bne.n	8006432 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006412:	200a      	movs	r0, #10
 8006414:	f7fb fd5c 	bl	8001ed0 <HAL_Delay>
      ms += 10U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	330a      	adds	r3, #10
 800641c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa0c 	bl	800683c <USB_GetMode>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <USB_SetCurrentMode+0x84>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2bc7      	cmp	r3, #199	@ 0xc7
 800642e:	d9f0      	bls.n	8006412 <USB_SetCurrentMode+0x60>
 8006430:	e001      	b.n	8006436 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e005      	b.n	8006442 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2bc8      	cmp	r3, #200	@ 0xc8
 800643a:	d101      	bne.n	8006440 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800644c:	b084      	sub	sp, #16
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800645a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006466:	2300      	movs	r3, #0
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	e009      	b.n	8006480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3340      	adds	r3, #64	@ 0x40
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	2200      	movs	r2, #0
 8006478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3301      	adds	r3, #1
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b0e      	cmp	r3, #14
 8006484:	d9f2      	bls.n	800646c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006486:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11c      	bne.n	80064c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800649c:	f043 0302 	orr.w	r3, r3, #2
 80064a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e005      	b.n	80064d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064da:	461a      	mov	r2, r3
 80064dc:	2300      	movs	r3, #0
 80064de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10d      	bne.n	8006504 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064f0:	2100      	movs	r1, #0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f968 	bl	80067c8 <USB_SetDevSpeed>
 80064f8:	e008      	b.n	800650c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064fa:	2101      	movs	r1, #1
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f963 	bl	80067c8 <USB_SetDevSpeed>
 8006502:	e003      	b.n	800650c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006504:	2103      	movs	r1, #3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f95e 	bl	80067c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800650c:	2110      	movs	r1, #16
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8fa 	bl	8006708 <USB_FlushTxFifo>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f924 	bl	800676c <USB_FlushRxFifo>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006534:	461a      	mov	r2, r3
 8006536:	2300      	movs	r3, #0
 8006538:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	461a      	mov	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e043      	b.n	80065e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800656a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800656e:	d118      	bne.n	80065a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006582:	461a      	mov	r2, r3
 8006584:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e013      	b.n	80065b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006598:	461a      	mov	r2, r3
 800659a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	e008      	b.n	80065b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ae:	461a      	mov	r2, r3
 80065b0:	2300      	movs	r3, #0
 80065b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c0:	461a      	mov	r2, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d2:	461a      	mov	r2, r3
 80065d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3301      	adds	r3, #1
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065e4:	461a      	mov	r2, r3
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d3b5      	bcc.n	8006558 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	e043      	b.n	800667a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006608:	d118      	bne.n	800663c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e013      	b.n	800664e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	461a      	mov	r2, r3
 8006634:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	e008      	b.n	800664e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006648:	461a      	mov	r2, r3
 800664a:	2300      	movs	r3, #0
 800664c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665a:	461a      	mov	r2, r3
 800665c:	2300      	movs	r3, #0
 800665e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666c:	461a      	mov	r2, r3
 800666e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006672:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	3301      	adds	r3, #1
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800667e:	461a      	mov	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4293      	cmp	r3, r2
 8006684:	d3b5      	bcc.n	80065f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006698:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d105      	bne.n	80066bc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f043 0210 	orr.w	r2, r3, #16
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	4b10      	ldr	r3, [pc, #64]	@ (8006704 <USB_DevInit+0x2b8>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f043 0208 	orr.w	r2, r3, #8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d107      	bne.n	80066f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066ec:	f043 0304 	orr.w	r3, r3, #4
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006700:	b004      	add	sp, #16
 8006702:	4770      	bx	lr
 8006704:	803c3800 	.word	0x803c3800

08006708 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006722:	d901      	bls.n	8006728 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e01b      	b.n	8006760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	daf2      	bge.n	8006716 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	019b      	lsls	r3, r3, #6
 8006738:	f043 0220 	orr.w	r2, r3, #32
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800674c:	d901      	bls.n	8006752 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e006      	b.n	8006760 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b20      	cmp	r3, #32
 800675c:	d0f0      	beq.n	8006740 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006784:	d901      	bls.n	800678a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e018      	b.n	80067bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	daf2      	bge.n	8006778 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2210      	movs	r2, #16
 800679a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a8:	d901      	bls.n	80067ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e006      	b.n	80067bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	2b10      	cmp	r3, #16
 80067b8:	d0f0      	beq.n	800679c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067e8:	4313      	orrs	r3, r2
 80067ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006814:	f023 0303 	bic.w	r3, r3, #3
 8006818:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006828:	f043 0302 	orr.w	r3, r3, #2
 800682c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	f003 0301 	and.w	r3, r3, #1
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3301      	adds	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006870:	d901      	bls.n	8006876 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e01b      	b.n	80068ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	daf2      	bge.n	8006864 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f043 0201 	orr.w	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800689a:	d901      	bls.n	80068a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e006      	b.n	80068ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d0f0      	beq.n	800688e <USB_CoreReset+0x36>

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <sniprintf>:
 80068bc:	b40c      	push	{r2, r3}
 80068be:	b530      	push	{r4, r5, lr}
 80068c0:	4b17      	ldr	r3, [pc, #92]	@ (8006920 <sniprintf+0x64>)
 80068c2:	1e0c      	subs	r4, r1, #0
 80068c4:	681d      	ldr	r5, [r3, #0]
 80068c6:	b09d      	sub	sp, #116	@ 0x74
 80068c8:	da08      	bge.n	80068dc <sniprintf+0x20>
 80068ca:	238b      	movs	r3, #139	@ 0x8b
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	f04f 30ff 	mov.w	r0, #4294967295
 80068d2:	b01d      	add	sp, #116	@ 0x74
 80068d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d8:	b002      	add	sp, #8
 80068da:	4770      	bx	lr
 80068dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80068e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80068e4:	bf14      	ite	ne
 80068e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068ea:	4623      	moveq	r3, r4
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068f4:	9002      	str	r0, [sp, #8]
 80068f6:	9006      	str	r0, [sp, #24]
 80068f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068fe:	ab21      	add	r3, sp, #132	@ 0x84
 8006900:	a902      	add	r1, sp, #8
 8006902:	4628      	mov	r0, r5
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	f000 f9b5 	bl	8006c74 <_svfiprintf_r>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	bfbc      	itt	lt
 800690e:	238b      	movlt	r3, #139	@ 0x8b
 8006910:	602b      	strlt	r3, [r5, #0]
 8006912:	2c00      	cmp	r4, #0
 8006914:	d0dd      	beq.n	80068d2 <sniprintf+0x16>
 8006916:	9b02      	ldr	r3, [sp, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	e7d9      	b.n	80068d2 <sniprintf+0x16>
 800691e:	bf00      	nop
 8006920:	20000010 	.word	0x20000010

08006924 <siprintf>:
 8006924:	b40e      	push	{r1, r2, r3}
 8006926:	b500      	push	{lr}
 8006928:	b09c      	sub	sp, #112	@ 0x70
 800692a:	ab1d      	add	r3, sp, #116	@ 0x74
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	9006      	str	r0, [sp, #24]
 8006930:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006934:	4809      	ldr	r0, [pc, #36]	@ (800695c <siprintf+0x38>)
 8006936:	9107      	str	r1, [sp, #28]
 8006938:	9104      	str	r1, [sp, #16]
 800693a:	4909      	ldr	r1, [pc, #36]	@ (8006960 <siprintf+0x3c>)
 800693c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006940:	9105      	str	r1, [sp, #20]
 8006942:	6800      	ldr	r0, [r0, #0]
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	a902      	add	r1, sp, #8
 8006948:	f000 f994 	bl	8006c74 <_svfiprintf_r>
 800694c:	9b02      	ldr	r3, [sp, #8]
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	b01c      	add	sp, #112	@ 0x70
 8006954:	f85d eb04 	ldr.w	lr, [sp], #4
 8006958:	b003      	add	sp, #12
 800695a:	4770      	bx	lr
 800695c:	20000010 	.word	0x20000010
 8006960:	ffff0208 	.word	0xffff0208

08006964 <memset>:
 8006964:	4402      	add	r2, r0
 8006966:	4603      	mov	r3, r0
 8006968:	4293      	cmp	r3, r2
 800696a:	d100      	bne.n	800696e <memset+0xa>
 800696c:	4770      	bx	lr
 800696e:	f803 1b01 	strb.w	r1, [r3], #1
 8006972:	e7f9      	b.n	8006968 <memset+0x4>

08006974 <__errno>:
 8006974:	4b01      	ldr	r3, [pc, #4]	@ (800697c <__errno+0x8>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000010 	.word	0x20000010

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4d0d      	ldr	r5, [pc, #52]	@ (80069b8 <__libc_init_array+0x38>)
 8006984:	4c0d      	ldr	r4, [pc, #52]	@ (80069bc <__libc_init_array+0x3c>)
 8006986:	1b64      	subs	r4, r4, r5
 8006988:	10a4      	asrs	r4, r4, #2
 800698a:	2600      	movs	r6, #0
 800698c:	42a6      	cmp	r6, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	4d0b      	ldr	r5, [pc, #44]	@ (80069c0 <__libc_init_array+0x40>)
 8006992:	4c0c      	ldr	r4, [pc, #48]	@ (80069c4 <__libc_init_array+0x44>)
 8006994:	f000 fc66 	bl	8007264 <_init>
 8006998:	1b64      	subs	r4, r4, r5
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	2600      	movs	r6, #0
 800699e:	42a6      	cmp	r6, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a8:	4798      	blx	r3
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b2:	4798      	blx	r3
 80069b4:	3601      	adds	r6, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	0800730c 	.word	0x0800730c
 80069bc:	0800730c 	.word	0x0800730c
 80069c0:	0800730c 	.word	0x0800730c
 80069c4:	08007310 	.word	0x08007310

080069c8 <__retarget_lock_acquire_recursive>:
 80069c8:	4770      	bx	lr

080069ca <__retarget_lock_release_recursive>:
 80069ca:	4770      	bx	lr

080069cc <_free_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4605      	mov	r5, r0
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d041      	beq.n	8006a58 <_free_r+0x8c>
 80069d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d8:	1f0c      	subs	r4, r1, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfb8      	it	lt
 80069de:	18e4      	addlt	r4, r4, r3
 80069e0:	f000 f8e0 	bl	8006ba4 <__malloc_lock>
 80069e4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a5c <_free_r+0x90>)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	b933      	cbnz	r3, 80069f8 <_free_r+0x2c>
 80069ea:	6063      	str	r3, [r4, #4]
 80069ec:	6014      	str	r4, [r2, #0]
 80069ee:	4628      	mov	r0, r5
 80069f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f4:	f000 b8dc 	b.w	8006bb0 <__malloc_unlock>
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d908      	bls.n	8006a0e <_free_r+0x42>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	1821      	adds	r1, r4, r0
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf01      	itttt	eq
 8006a04:	6819      	ldreq	r1, [r3, #0]
 8006a06:	685b      	ldreq	r3, [r3, #4]
 8006a08:	1809      	addeq	r1, r1, r0
 8006a0a:	6021      	streq	r1, [r4, #0]
 8006a0c:	e7ed      	b.n	80069ea <_free_r+0x1e>
 8006a0e:	461a      	mov	r2, r3
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	b10b      	cbz	r3, 8006a18 <_free_r+0x4c>
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	d9fa      	bls.n	8006a0e <_free_r+0x42>
 8006a18:	6811      	ldr	r1, [r2, #0]
 8006a1a:	1850      	adds	r0, r2, r1
 8006a1c:	42a0      	cmp	r0, r4
 8006a1e:	d10b      	bne.n	8006a38 <_free_r+0x6c>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	4401      	add	r1, r0
 8006a24:	1850      	adds	r0, r2, r1
 8006a26:	4283      	cmp	r3, r0
 8006a28:	6011      	str	r1, [r2, #0]
 8006a2a:	d1e0      	bne.n	80069ee <_free_r+0x22>
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	6053      	str	r3, [r2, #4]
 8006a32:	4408      	add	r0, r1
 8006a34:	6010      	str	r0, [r2, #0]
 8006a36:	e7da      	b.n	80069ee <_free_r+0x22>
 8006a38:	d902      	bls.n	8006a40 <_free_r+0x74>
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	602b      	str	r3, [r5, #0]
 8006a3e:	e7d6      	b.n	80069ee <_free_r+0x22>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	1821      	adds	r1, r4, r0
 8006a44:	428b      	cmp	r3, r1
 8006a46:	bf04      	itt	eq
 8006a48:	6819      	ldreq	r1, [r3, #0]
 8006a4a:	685b      	ldreq	r3, [r3, #4]
 8006a4c:	6063      	str	r3, [r4, #4]
 8006a4e:	bf04      	itt	eq
 8006a50:	1809      	addeq	r1, r1, r0
 8006a52:	6021      	streq	r1, [r4, #0]
 8006a54:	6054      	str	r4, [r2, #4]
 8006a56:	e7ca      	b.n	80069ee <_free_r+0x22>
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200007f4 	.word	0x200007f4

08006a60 <sbrk_aligned>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4e0f      	ldr	r6, [pc, #60]	@ (8006aa0 <sbrk_aligned+0x40>)
 8006a64:	460c      	mov	r4, r1
 8006a66:	6831      	ldr	r1, [r6, #0]
 8006a68:	4605      	mov	r5, r0
 8006a6a:	b911      	cbnz	r1, 8006a72 <sbrk_aligned+0x12>
 8006a6c:	f000 fba6 	bl	80071bc <_sbrk_r>
 8006a70:	6030      	str	r0, [r6, #0]
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 fba1 	bl	80071bc <_sbrk_r>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	d103      	bne.n	8006a86 <sbrk_aligned+0x26>
 8006a7e:	f04f 34ff 	mov.w	r4, #4294967295
 8006a82:	4620      	mov	r0, r4
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	1cc4      	adds	r4, r0, #3
 8006a88:	f024 0403 	bic.w	r4, r4, #3
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d0f8      	beq.n	8006a82 <sbrk_aligned+0x22>
 8006a90:	1a21      	subs	r1, r4, r0
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 fb92 	bl	80071bc <_sbrk_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d1f2      	bne.n	8006a82 <sbrk_aligned+0x22>
 8006a9c:	e7ef      	b.n	8006a7e <sbrk_aligned+0x1e>
 8006a9e:	bf00      	nop
 8006aa0:	200007f0 	.word	0x200007f0

08006aa4 <_malloc_r>:
 8006aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	1ccd      	adds	r5, r1, #3
 8006aaa:	f025 0503 	bic.w	r5, r5, #3
 8006aae:	3508      	adds	r5, #8
 8006ab0:	2d0c      	cmp	r5, #12
 8006ab2:	bf38      	it	cc
 8006ab4:	250c      	movcc	r5, #12
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	4606      	mov	r6, r0
 8006aba:	db01      	blt.n	8006ac0 <_malloc_r+0x1c>
 8006abc:	42a9      	cmp	r1, r5
 8006abe:	d904      	bls.n	8006aca <_malloc_r+0x26>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	6033      	str	r3, [r6, #0]
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ba0 <_malloc_r+0xfc>
 8006ace:	f000 f869 	bl	8006ba4 <__malloc_lock>
 8006ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad6:	461c      	mov	r4, r3
 8006ad8:	bb44      	cbnz	r4, 8006b2c <_malloc_r+0x88>
 8006ada:	4629      	mov	r1, r5
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff ffbf 	bl	8006a60 <sbrk_aligned>
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	d158      	bne.n	8006b9a <_malloc_r+0xf6>
 8006ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8006aec:	4627      	mov	r7, r4
 8006aee:	2f00      	cmp	r7, #0
 8006af0:	d143      	bne.n	8006b7a <_malloc_r+0xd6>
 8006af2:	2c00      	cmp	r4, #0
 8006af4:	d04b      	beq.n	8006b8e <_malloc_r+0xea>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	4639      	mov	r1, r7
 8006afa:	4630      	mov	r0, r6
 8006afc:	eb04 0903 	add.w	r9, r4, r3
 8006b00:	f000 fb5c 	bl	80071bc <_sbrk_r>
 8006b04:	4581      	cmp	r9, r0
 8006b06:	d142      	bne.n	8006b8e <_malloc_r+0xea>
 8006b08:	6821      	ldr	r1, [r4, #0]
 8006b0a:	1a6d      	subs	r5, r5, r1
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7ff ffa6 	bl	8006a60 <sbrk_aligned>
 8006b14:	3001      	adds	r0, #1
 8006b16:	d03a      	beq.n	8006b8e <_malloc_r+0xea>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	442b      	add	r3, r5
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	bb62      	cbnz	r2, 8006b80 <_malloc_r+0xdc>
 8006b26:	f8c8 7000 	str.w	r7, [r8]
 8006b2a:	e00f      	b.n	8006b4c <_malloc_r+0xa8>
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	1b52      	subs	r2, r2, r5
 8006b30:	d420      	bmi.n	8006b74 <_malloc_r+0xd0>
 8006b32:	2a0b      	cmp	r2, #11
 8006b34:	d917      	bls.n	8006b66 <_malloc_r+0xc2>
 8006b36:	1961      	adds	r1, r4, r5
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	6025      	str	r5, [r4, #0]
 8006b3c:	bf18      	it	ne
 8006b3e:	6059      	strne	r1, [r3, #4]
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	bf08      	it	eq
 8006b44:	f8c8 1000 	streq.w	r1, [r8]
 8006b48:	5162      	str	r2, [r4, r5]
 8006b4a:	604b      	str	r3, [r1, #4]
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f000 f82f 	bl	8006bb0 <__malloc_unlock>
 8006b52:	f104 000b 	add.w	r0, r4, #11
 8006b56:	1d23      	adds	r3, r4, #4
 8006b58:	f020 0007 	bic.w	r0, r0, #7
 8006b5c:	1ac2      	subs	r2, r0, r3
 8006b5e:	bf1c      	itt	ne
 8006b60:	1a1b      	subne	r3, r3, r0
 8006b62:	50a3      	strne	r3, [r4, r2]
 8006b64:	e7af      	b.n	8006ac6 <_malloc_r+0x22>
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	bf0c      	ite	eq
 8006b6c:	f8c8 2000 	streq.w	r2, [r8]
 8006b70:	605a      	strne	r2, [r3, #4]
 8006b72:	e7eb      	b.n	8006b4c <_malloc_r+0xa8>
 8006b74:	4623      	mov	r3, r4
 8006b76:	6864      	ldr	r4, [r4, #4]
 8006b78:	e7ae      	b.n	8006ad8 <_malloc_r+0x34>
 8006b7a:	463c      	mov	r4, r7
 8006b7c:	687f      	ldr	r7, [r7, #4]
 8006b7e:	e7b6      	b.n	8006aee <_malloc_r+0x4a>
 8006b80:	461a      	mov	r2, r3
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d1fb      	bne.n	8006b80 <_malloc_r+0xdc>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6053      	str	r3, [r2, #4]
 8006b8c:	e7de      	b.n	8006b4c <_malloc_r+0xa8>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f80c 	bl	8006bb0 <__malloc_unlock>
 8006b98:	e794      	b.n	8006ac4 <_malloc_r+0x20>
 8006b9a:	6005      	str	r5, [r0, #0]
 8006b9c:	e7d6      	b.n	8006b4c <_malloc_r+0xa8>
 8006b9e:	bf00      	nop
 8006ba0:	200007f4 	.word	0x200007f4

08006ba4 <__malloc_lock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	@ (8006bac <__malloc_lock+0x8>)
 8006ba6:	f7ff bf0f 	b.w	80069c8 <__retarget_lock_acquire_recursive>
 8006baa:	bf00      	nop
 8006bac:	200007ec 	.word	0x200007ec

08006bb0 <__malloc_unlock>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	@ (8006bb8 <__malloc_unlock+0x8>)
 8006bb2:	f7ff bf0a 	b.w	80069ca <__retarget_lock_release_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	200007ec 	.word	0x200007ec

08006bbc <__ssputs_r>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	688e      	ldr	r6, [r1, #8]
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	42be      	cmp	r6, r7
 8006bc6:	680b      	ldr	r3, [r1, #0]
 8006bc8:	4682      	mov	sl, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	4690      	mov	r8, r2
 8006bce:	d82d      	bhi.n	8006c2c <__ssputs_r+0x70>
 8006bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bd8:	d026      	beq.n	8006c28 <__ssputs_r+0x6c>
 8006bda:	6965      	ldr	r5, [r4, #20]
 8006bdc:	6909      	ldr	r1, [r1, #16]
 8006bde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006be2:	eba3 0901 	sub.w	r9, r3, r1
 8006be6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bea:	1c7b      	adds	r3, r7, #1
 8006bec:	444b      	add	r3, r9
 8006bee:	106d      	asrs	r5, r5, #1
 8006bf0:	429d      	cmp	r5, r3
 8006bf2:	bf38      	it	cc
 8006bf4:	461d      	movcc	r5, r3
 8006bf6:	0553      	lsls	r3, r2, #21
 8006bf8:	d527      	bpl.n	8006c4a <__ssputs_r+0x8e>
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7ff ff52 	bl	8006aa4 <_malloc_r>
 8006c00:	4606      	mov	r6, r0
 8006c02:	b360      	cbz	r0, 8006c5e <__ssputs_r+0xa2>
 8006c04:	6921      	ldr	r1, [r4, #16]
 8006c06:	464a      	mov	r2, r9
 8006c08:	f000 fae8 	bl	80071dc <memcpy>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	6126      	str	r6, [r4, #16]
 8006c1a:	6165      	str	r5, [r4, #20]
 8006c1c:	444e      	add	r6, r9
 8006c1e:	eba5 0509 	sub.w	r5, r5, r9
 8006c22:	6026      	str	r6, [r4, #0]
 8006c24:	60a5      	str	r5, [r4, #8]
 8006c26:	463e      	mov	r6, r7
 8006c28:	42be      	cmp	r6, r7
 8006c2a:	d900      	bls.n	8006c2e <__ssputs_r+0x72>
 8006c2c:	463e      	mov	r6, r7
 8006c2e:	6820      	ldr	r0, [r4, #0]
 8006c30:	4632      	mov	r2, r6
 8006c32:	4641      	mov	r1, r8
 8006c34:	f000 faa8 	bl	8007188 <memmove>
 8006c38:	68a3      	ldr	r3, [r4, #8]
 8006c3a:	1b9b      	subs	r3, r3, r6
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	4433      	add	r3, r6
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	2000      	movs	r0, #0
 8006c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	f000 fad4 	bl	80071f8 <_realloc_r>
 8006c50:	4606      	mov	r6, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d1e0      	bne.n	8006c18 <__ssputs_r+0x5c>
 8006c56:	6921      	ldr	r1, [r4, #16]
 8006c58:	4650      	mov	r0, sl
 8006c5a:	f7ff feb7 	bl	80069cc <_free_r>
 8006c5e:	230c      	movs	r3, #12
 8006c60:	f8ca 3000 	str.w	r3, [sl]
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	e7e9      	b.n	8006c46 <__ssputs_r+0x8a>
	...

08006c74 <_svfiprintf_r>:
 8006c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c78:	4698      	mov	r8, r3
 8006c7a:	898b      	ldrh	r3, [r1, #12]
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	b09d      	sub	sp, #116	@ 0x74
 8006c80:	4607      	mov	r7, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	4614      	mov	r4, r2
 8006c86:	d510      	bpl.n	8006caa <_svfiprintf_r+0x36>
 8006c88:	690b      	ldr	r3, [r1, #16]
 8006c8a:	b973      	cbnz	r3, 8006caa <_svfiprintf_r+0x36>
 8006c8c:	2140      	movs	r1, #64	@ 0x40
 8006c8e:	f7ff ff09 	bl	8006aa4 <_malloc_r>
 8006c92:	6028      	str	r0, [r5, #0]
 8006c94:	6128      	str	r0, [r5, #16]
 8006c96:	b930      	cbnz	r0, 8006ca6 <_svfiprintf_r+0x32>
 8006c98:	230c      	movs	r3, #12
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	b01d      	add	sp, #116	@ 0x74
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca6:	2340      	movs	r3, #64	@ 0x40
 8006ca8:	616b      	str	r3, [r5, #20]
 8006caa:	2300      	movs	r3, #0
 8006cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cae:	2320      	movs	r3, #32
 8006cb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cb8:	2330      	movs	r3, #48	@ 0x30
 8006cba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e58 <_svfiprintf_r+0x1e4>
 8006cbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cc2:	f04f 0901 	mov.w	r9, #1
 8006cc6:	4623      	mov	r3, r4
 8006cc8:	469a      	mov	sl, r3
 8006cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cce:	b10a      	cbz	r2, 8006cd4 <_svfiprintf_r+0x60>
 8006cd0:	2a25      	cmp	r2, #37	@ 0x25
 8006cd2:	d1f9      	bne.n	8006cc8 <_svfiprintf_r+0x54>
 8006cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cd8:	d00b      	beq.n	8006cf2 <_svfiprintf_r+0x7e>
 8006cda:	465b      	mov	r3, fp
 8006cdc:	4622      	mov	r2, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff ff6b 	bl	8006bbc <__ssputs_r>
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	f000 80a7 	beq.w	8006e3a <_svfiprintf_r+0x1c6>
 8006cec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cee:	445a      	add	r2, fp
 8006cf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 809f 	beq.w	8006e3a <_svfiprintf_r+0x1c6>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d06:	f10a 0a01 	add.w	sl, sl, #1
 8006d0a:	9304      	str	r3, [sp, #16]
 8006d0c:	9307      	str	r3, [sp, #28]
 8006d0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d12:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d14:	4654      	mov	r4, sl
 8006d16:	2205      	movs	r2, #5
 8006d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1c:	484e      	ldr	r0, [pc, #312]	@ (8006e58 <_svfiprintf_r+0x1e4>)
 8006d1e:	f7f9 fa7f 	bl	8000220 <memchr>
 8006d22:	9a04      	ldr	r2, [sp, #16]
 8006d24:	b9d8      	cbnz	r0, 8006d5e <_svfiprintf_r+0xea>
 8006d26:	06d0      	lsls	r0, r2, #27
 8006d28:	bf44      	itt	mi
 8006d2a:	2320      	movmi	r3, #32
 8006d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d30:	0711      	lsls	r1, r2, #28
 8006d32:	bf44      	itt	mi
 8006d34:	232b      	movmi	r3, #43	@ 0x2b
 8006d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d40:	d015      	beq.n	8006d6e <_svfiprintf_r+0xfa>
 8006d42:	9a07      	ldr	r2, [sp, #28]
 8006d44:	4654      	mov	r4, sl
 8006d46:	2000      	movs	r0, #0
 8006d48:	f04f 0c0a 	mov.w	ip, #10
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d52:	3b30      	subs	r3, #48	@ 0x30
 8006d54:	2b09      	cmp	r3, #9
 8006d56:	d94b      	bls.n	8006df0 <_svfiprintf_r+0x17c>
 8006d58:	b1b0      	cbz	r0, 8006d88 <_svfiprintf_r+0x114>
 8006d5a:	9207      	str	r2, [sp, #28]
 8006d5c:	e014      	b.n	8006d88 <_svfiprintf_r+0x114>
 8006d5e:	eba0 0308 	sub.w	r3, r0, r8
 8006d62:	fa09 f303 	lsl.w	r3, r9, r3
 8006d66:	4313      	orrs	r3, r2
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	46a2      	mov	sl, r4
 8006d6c:	e7d2      	b.n	8006d14 <_svfiprintf_r+0xa0>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	1d19      	adds	r1, r3, #4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	9103      	str	r1, [sp, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfbb      	ittet	lt
 8006d7a:	425b      	neglt	r3, r3
 8006d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d80:	9307      	strge	r3, [sp, #28]
 8006d82:	9307      	strlt	r3, [sp, #28]
 8006d84:	bfb8      	it	lt
 8006d86:	9204      	strlt	r2, [sp, #16]
 8006d88:	7823      	ldrb	r3, [r4, #0]
 8006d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d8c:	d10a      	bne.n	8006da4 <_svfiprintf_r+0x130>
 8006d8e:	7863      	ldrb	r3, [r4, #1]
 8006d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d92:	d132      	bne.n	8006dfa <_svfiprintf_r+0x186>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	1d1a      	adds	r2, r3, #4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	9203      	str	r2, [sp, #12]
 8006d9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006da0:	3402      	adds	r4, #2
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e68 <_svfiprintf_r+0x1f4>
 8006da8:	7821      	ldrb	r1, [r4, #0]
 8006daa:	2203      	movs	r2, #3
 8006dac:	4650      	mov	r0, sl
 8006dae:	f7f9 fa37 	bl	8000220 <memchr>
 8006db2:	b138      	cbz	r0, 8006dc4 <_svfiprintf_r+0x150>
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	eba0 000a 	sub.w	r0, r0, sl
 8006dba:	2240      	movs	r2, #64	@ 0x40
 8006dbc:	4082      	lsls	r2, r0
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	3401      	adds	r4, #1
 8006dc2:	9304      	str	r3, [sp, #16]
 8006dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc8:	4824      	ldr	r0, [pc, #144]	@ (8006e5c <_svfiprintf_r+0x1e8>)
 8006dca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dce:	2206      	movs	r2, #6
 8006dd0:	f7f9 fa26 	bl	8000220 <memchr>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d036      	beq.n	8006e46 <_svfiprintf_r+0x1d2>
 8006dd8:	4b21      	ldr	r3, [pc, #132]	@ (8006e60 <_svfiprintf_r+0x1ec>)
 8006dda:	bb1b      	cbnz	r3, 8006e24 <_svfiprintf_r+0x1b0>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	3307      	adds	r3, #7
 8006de0:	f023 0307 	bic.w	r3, r3, #7
 8006de4:	3308      	adds	r3, #8
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dea:	4433      	add	r3, r6
 8006dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dee:	e76a      	b.n	8006cc6 <_svfiprintf_r+0x52>
 8006df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006df4:	460c      	mov	r4, r1
 8006df6:	2001      	movs	r0, #1
 8006df8:	e7a8      	b.n	8006d4c <_svfiprintf_r+0xd8>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	3401      	adds	r4, #1
 8006dfe:	9305      	str	r3, [sp, #20]
 8006e00:	4619      	mov	r1, r3
 8006e02:	f04f 0c0a 	mov.w	ip, #10
 8006e06:	4620      	mov	r0, r4
 8006e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e0c:	3a30      	subs	r2, #48	@ 0x30
 8006e0e:	2a09      	cmp	r2, #9
 8006e10:	d903      	bls.n	8006e1a <_svfiprintf_r+0x1a6>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0c6      	beq.n	8006da4 <_svfiprintf_r+0x130>
 8006e16:	9105      	str	r1, [sp, #20]
 8006e18:	e7c4      	b.n	8006da4 <_svfiprintf_r+0x130>
 8006e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e1e:	4604      	mov	r4, r0
 8006e20:	2301      	movs	r3, #1
 8006e22:	e7f0      	b.n	8006e06 <_svfiprintf_r+0x192>
 8006e24:	ab03      	add	r3, sp, #12
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e64 <_svfiprintf_r+0x1f0>)
 8006e2c:	a904      	add	r1, sp, #16
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f3af 8000 	nop.w
 8006e34:	1c42      	adds	r2, r0, #1
 8006e36:	4606      	mov	r6, r0
 8006e38:	d1d6      	bne.n	8006de8 <_svfiprintf_r+0x174>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	065b      	lsls	r3, r3, #25
 8006e3e:	f53f af2d 	bmi.w	8006c9c <_svfiprintf_r+0x28>
 8006e42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e44:	e72c      	b.n	8006ca0 <_svfiprintf_r+0x2c>
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <_svfiprintf_r+0x1f0>)
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	4638      	mov	r0, r7
 8006e52:	f000 f879 	bl	8006f48 <_printf_i>
 8006e56:	e7ed      	b.n	8006e34 <_svfiprintf_r+0x1c0>
 8006e58:	080072d0 	.word	0x080072d0
 8006e5c:	080072da 	.word	0x080072da
 8006e60:	00000000 	.word	0x00000000
 8006e64:	08006bbd 	.word	0x08006bbd
 8006e68:	080072d6 	.word	0x080072d6

08006e6c <_printf_common>:
 8006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	4616      	mov	r6, r2
 8006e72:	4698      	mov	r8, r3
 8006e74:	688a      	ldr	r2, [r1, #8]
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	bfb8      	it	lt
 8006e80:	4613      	movlt	r3, r2
 8006e82:	6033      	str	r3, [r6, #0]
 8006e84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e88:	4607      	mov	r7, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	b10a      	cbz	r2, 8006e92 <_printf_common+0x26>
 8006e8e:	3301      	adds	r3, #1
 8006e90:	6033      	str	r3, [r6, #0]
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	0699      	lsls	r1, r3, #26
 8006e96:	bf42      	ittt	mi
 8006e98:	6833      	ldrmi	r3, [r6, #0]
 8006e9a:	3302      	addmi	r3, #2
 8006e9c:	6033      	strmi	r3, [r6, #0]
 8006e9e:	6825      	ldr	r5, [r4, #0]
 8006ea0:	f015 0506 	ands.w	r5, r5, #6
 8006ea4:	d106      	bne.n	8006eb4 <_printf_common+0x48>
 8006ea6:	f104 0a19 	add.w	sl, r4, #25
 8006eaa:	68e3      	ldr	r3, [r4, #12]
 8006eac:	6832      	ldr	r2, [r6, #0]
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	42ab      	cmp	r3, r5
 8006eb2:	dc26      	bgt.n	8006f02 <_printf_common+0x96>
 8006eb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006eb8:	6822      	ldr	r2, [r4, #0]
 8006eba:	3b00      	subs	r3, #0
 8006ebc:	bf18      	it	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	0692      	lsls	r2, r2, #26
 8006ec2:	d42b      	bmi.n	8006f1c <_printf_common+0xb0>
 8006ec4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ec8:	4641      	mov	r1, r8
 8006eca:	4638      	mov	r0, r7
 8006ecc:	47c8      	blx	r9
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d01e      	beq.n	8006f10 <_printf_common+0xa4>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	6922      	ldr	r2, [r4, #16]
 8006ed6:	f003 0306 	and.w	r3, r3, #6
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	bf02      	ittt	eq
 8006ede:	68e5      	ldreq	r5, [r4, #12]
 8006ee0:	6833      	ldreq	r3, [r6, #0]
 8006ee2:	1aed      	subeq	r5, r5, r3
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	bf0c      	ite	eq
 8006ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eec:	2500      	movne	r5, #0
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	bfc4      	itt	gt
 8006ef2:	1a9b      	subgt	r3, r3, r2
 8006ef4:	18ed      	addgt	r5, r5, r3
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	341a      	adds	r4, #26
 8006efa:	42b5      	cmp	r5, r6
 8006efc:	d11a      	bne.n	8006f34 <_printf_common+0xc8>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e008      	b.n	8006f14 <_printf_common+0xa8>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4652      	mov	r2, sl
 8006f06:	4641      	mov	r1, r8
 8006f08:	4638      	mov	r0, r7
 8006f0a:	47c8      	blx	r9
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d103      	bne.n	8006f18 <_printf_common+0xac>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f18:	3501      	adds	r5, #1
 8006f1a:	e7c6      	b.n	8006eaa <_printf_common+0x3e>
 8006f1c:	18e1      	adds	r1, r4, r3
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	2030      	movs	r0, #48	@ 0x30
 8006f22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f26:	4422      	add	r2, r4
 8006f28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f30:	3302      	adds	r3, #2
 8006f32:	e7c7      	b.n	8006ec4 <_printf_common+0x58>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4622      	mov	r2, r4
 8006f38:	4641      	mov	r1, r8
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	47c8      	blx	r9
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d0e6      	beq.n	8006f10 <_printf_common+0xa4>
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7d9      	b.n	8006efa <_printf_common+0x8e>
	...

08006f48 <_printf_i>:
 8006f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4c:	7e0f      	ldrb	r7, [r1, #24]
 8006f4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f50:	2f78      	cmp	r7, #120	@ 0x78
 8006f52:	4691      	mov	r9, r2
 8006f54:	4680      	mov	r8, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	469a      	mov	sl, r3
 8006f5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f5e:	d807      	bhi.n	8006f70 <_printf_i+0x28>
 8006f60:	2f62      	cmp	r7, #98	@ 0x62
 8006f62:	d80a      	bhi.n	8006f7a <_printf_i+0x32>
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	f000 80d2 	beq.w	800710e <_printf_i+0x1c6>
 8006f6a:	2f58      	cmp	r7, #88	@ 0x58
 8006f6c:	f000 80b9 	beq.w	80070e2 <_printf_i+0x19a>
 8006f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f78:	e03a      	b.n	8006ff0 <_printf_i+0xa8>
 8006f7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f7e:	2b15      	cmp	r3, #21
 8006f80:	d8f6      	bhi.n	8006f70 <_printf_i+0x28>
 8006f82:	a101      	add	r1, pc, #4	@ (adr r1, 8006f88 <_printf_i+0x40>)
 8006f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f88:	08006fe1 	.word	0x08006fe1
 8006f8c:	08006ff5 	.word	0x08006ff5
 8006f90:	08006f71 	.word	0x08006f71
 8006f94:	08006f71 	.word	0x08006f71
 8006f98:	08006f71 	.word	0x08006f71
 8006f9c:	08006f71 	.word	0x08006f71
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08006f71 	.word	0x08006f71
 8006fa8:	08006f71 	.word	0x08006f71
 8006fac:	08006f71 	.word	0x08006f71
 8006fb0:	08006f71 	.word	0x08006f71
 8006fb4:	080070f5 	.word	0x080070f5
 8006fb8:	0800701f 	.word	0x0800701f
 8006fbc:	080070af 	.word	0x080070af
 8006fc0:	08006f71 	.word	0x08006f71
 8006fc4:	08006f71 	.word	0x08006f71
 8006fc8:	08007117 	.word	0x08007117
 8006fcc:	08006f71 	.word	0x08006f71
 8006fd0:	0800701f 	.word	0x0800701f
 8006fd4:	08006f71 	.word	0x08006f71
 8006fd8:	08006f71 	.word	0x08006f71
 8006fdc:	080070b7 	.word	0x080070b7
 8006fe0:	6833      	ldr	r3, [r6, #0]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6032      	str	r2, [r6, #0]
 8006fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e09d      	b.n	8007130 <_printf_i+0x1e8>
 8006ff4:	6833      	ldr	r3, [r6, #0]
 8006ff6:	6820      	ldr	r0, [r4, #0]
 8006ff8:	1d19      	adds	r1, r3, #4
 8006ffa:	6031      	str	r1, [r6, #0]
 8006ffc:	0606      	lsls	r6, r0, #24
 8006ffe:	d501      	bpl.n	8007004 <_printf_i+0xbc>
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	e003      	b.n	800700c <_printf_i+0xc4>
 8007004:	0645      	lsls	r5, r0, #25
 8007006:	d5fb      	bpl.n	8007000 <_printf_i+0xb8>
 8007008:	f9b3 5000 	ldrsh.w	r5, [r3]
 800700c:	2d00      	cmp	r5, #0
 800700e:	da03      	bge.n	8007018 <_printf_i+0xd0>
 8007010:	232d      	movs	r3, #45	@ 0x2d
 8007012:	426d      	negs	r5, r5
 8007014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007018:	4859      	ldr	r0, [pc, #356]	@ (8007180 <_printf_i+0x238>)
 800701a:	230a      	movs	r3, #10
 800701c:	e011      	b.n	8007042 <_printf_i+0xfa>
 800701e:	6821      	ldr	r1, [r4, #0]
 8007020:	6833      	ldr	r3, [r6, #0]
 8007022:	0608      	lsls	r0, r1, #24
 8007024:	f853 5b04 	ldr.w	r5, [r3], #4
 8007028:	d402      	bmi.n	8007030 <_printf_i+0xe8>
 800702a:	0649      	lsls	r1, r1, #25
 800702c:	bf48      	it	mi
 800702e:	b2ad      	uxthmi	r5, r5
 8007030:	2f6f      	cmp	r7, #111	@ 0x6f
 8007032:	4853      	ldr	r0, [pc, #332]	@ (8007180 <_printf_i+0x238>)
 8007034:	6033      	str	r3, [r6, #0]
 8007036:	bf14      	ite	ne
 8007038:	230a      	movne	r3, #10
 800703a:	2308      	moveq	r3, #8
 800703c:	2100      	movs	r1, #0
 800703e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007042:	6866      	ldr	r6, [r4, #4]
 8007044:	60a6      	str	r6, [r4, #8]
 8007046:	2e00      	cmp	r6, #0
 8007048:	bfa2      	ittt	ge
 800704a:	6821      	ldrge	r1, [r4, #0]
 800704c:	f021 0104 	bicge.w	r1, r1, #4
 8007050:	6021      	strge	r1, [r4, #0]
 8007052:	b90d      	cbnz	r5, 8007058 <_printf_i+0x110>
 8007054:	2e00      	cmp	r6, #0
 8007056:	d04b      	beq.n	80070f0 <_printf_i+0x1a8>
 8007058:	4616      	mov	r6, r2
 800705a:	fbb5 f1f3 	udiv	r1, r5, r3
 800705e:	fb03 5711 	mls	r7, r3, r1, r5
 8007062:	5dc7      	ldrb	r7, [r0, r7]
 8007064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007068:	462f      	mov	r7, r5
 800706a:	42bb      	cmp	r3, r7
 800706c:	460d      	mov	r5, r1
 800706e:	d9f4      	bls.n	800705a <_printf_i+0x112>
 8007070:	2b08      	cmp	r3, #8
 8007072:	d10b      	bne.n	800708c <_printf_i+0x144>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	07df      	lsls	r7, r3, #31
 8007078:	d508      	bpl.n	800708c <_printf_i+0x144>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6861      	ldr	r1, [r4, #4]
 800707e:	4299      	cmp	r1, r3
 8007080:	bfde      	ittt	le
 8007082:	2330      	movle	r3, #48	@ 0x30
 8007084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800708c:	1b92      	subs	r2, r2, r6
 800708e:	6122      	str	r2, [r4, #16]
 8007090:	f8cd a000 	str.w	sl, [sp]
 8007094:	464b      	mov	r3, r9
 8007096:	aa03      	add	r2, sp, #12
 8007098:	4621      	mov	r1, r4
 800709a:	4640      	mov	r0, r8
 800709c:	f7ff fee6 	bl	8006e6c <_printf_common>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d14a      	bne.n	800713a <_printf_i+0x1f2>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	b004      	add	sp, #16
 80070aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	f043 0320 	orr.w	r3, r3, #32
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	4833      	ldr	r0, [pc, #204]	@ (8007184 <_printf_i+0x23c>)
 80070b8:	2778      	movs	r7, #120	@ 0x78
 80070ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	6831      	ldr	r1, [r6, #0]
 80070c2:	061f      	lsls	r7, r3, #24
 80070c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070c8:	d402      	bmi.n	80070d0 <_printf_i+0x188>
 80070ca:	065f      	lsls	r7, r3, #25
 80070cc:	bf48      	it	mi
 80070ce:	b2ad      	uxthmi	r5, r5
 80070d0:	6031      	str	r1, [r6, #0]
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	bf44      	itt	mi
 80070d6:	f043 0320 	orrmi.w	r3, r3, #32
 80070da:	6023      	strmi	r3, [r4, #0]
 80070dc:	b11d      	cbz	r5, 80070e6 <_printf_i+0x19e>
 80070de:	2310      	movs	r3, #16
 80070e0:	e7ac      	b.n	800703c <_printf_i+0xf4>
 80070e2:	4827      	ldr	r0, [pc, #156]	@ (8007180 <_printf_i+0x238>)
 80070e4:	e7e9      	b.n	80070ba <_printf_i+0x172>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f023 0320 	bic.w	r3, r3, #32
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	e7f6      	b.n	80070de <_printf_i+0x196>
 80070f0:	4616      	mov	r6, r2
 80070f2:	e7bd      	b.n	8007070 <_printf_i+0x128>
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	6825      	ldr	r5, [r4, #0]
 80070f8:	6961      	ldr	r1, [r4, #20]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6030      	str	r0, [r6, #0]
 80070fe:	062e      	lsls	r6, r5, #24
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	d501      	bpl.n	8007108 <_printf_i+0x1c0>
 8007104:	6019      	str	r1, [r3, #0]
 8007106:	e002      	b.n	800710e <_printf_i+0x1c6>
 8007108:	0668      	lsls	r0, r5, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0x1bc>
 800710c:	8019      	strh	r1, [r3, #0]
 800710e:	2300      	movs	r3, #0
 8007110:	6123      	str	r3, [r4, #16]
 8007112:	4616      	mov	r6, r2
 8007114:	e7bc      	b.n	8007090 <_printf_i+0x148>
 8007116:	6833      	ldr	r3, [r6, #0]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	6032      	str	r2, [r6, #0]
 800711c:	681e      	ldr	r6, [r3, #0]
 800711e:	6862      	ldr	r2, [r4, #4]
 8007120:	2100      	movs	r1, #0
 8007122:	4630      	mov	r0, r6
 8007124:	f7f9 f87c 	bl	8000220 <memchr>
 8007128:	b108      	cbz	r0, 800712e <_printf_i+0x1e6>
 800712a:	1b80      	subs	r0, r0, r6
 800712c:	6060      	str	r0, [r4, #4]
 800712e:	6863      	ldr	r3, [r4, #4]
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	2300      	movs	r3, #0
 8007134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007138:	e7aa      	b.n	8007090 <_printf_i+0x148>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	4632      	mov	r2, r6
 800713e:	4649      	mov	r1, r9
 8007140:	4640      	mov	r0, r8
 8007142:	47d0      	blx	sl
 8007144:	3001      	adds	r0, #1
 8007146:	d0ad      	beq.n	80070a4 <_printf_i+0x15c>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	079b      	lsls	r3, r3, #30
 800714c:	d413      	bmi.n	8007176 <_printf_i+0x22e>
 800714e:	68e0      	ldr	r0, [r4, #12]
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	4298      	cmp	r0, r3
 8007154:	bfb8      	it	lt
 8007156:	4618      	movlt	r0, r3
 8007158:	e7a6      	b.n	80070a8 <_printf_i+0x160>
 800715a:	2301      	movs	r3, #1
 800715c:	4632      	mov	r2, r6
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d09d      	beq.n	80070a4 <_printf_i+0x15c>
 8007168:	3501      	adds	r5, #1
 800716a:	68e3      	ldr	r3, [r4, #12]
 800716c:	9903      	ldr	r1, [sp, #12]
 800716e:	1a5b      	subs	r3, r3, r1
 8007170:	42ab      	cmp	r3, r5
 8007172:	dcf2      	bgt.n	800715a <_printf_i+0x212>
 8007174:	e7eb      	b.n	800714e <_printf_i+0x206>
 8007176:	2500      	movs	r5, #0
 8007178:	f104 0619 	add.w	r6, r4, #25
 800717c:	e7f5      	b.n	800716a <_printf_i+0x222>
 800717e:	bf00      	nop
 8007180:	080072e1 	.word	0x080072e1
 8007184:	080072f2 	.word	0x080072f2

08007188 <memmove>:
 8007188:	4288      	cmp	r0, r1
 800718a:	b510      	push	{r4, lr}
 800718c:	eb01 0402 	add.w	r4, r1, r2
 8007190:	d902      	bls.n	8007198 <memmove+0x10>
 8007192:	4284      	cmp	r4, r0
 8007194:	4623      	mov	r3, r4
 8007196:	d807      	bhi.n	80071a8 <memmove+0x20>
 8007198:	1e43      	subs	r3, r0, #1
 800719a:	42a1      	cmp	r1, r4
 800719c:	d008      	beq.n	80071b0 <memmove+0x28>
 800719e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a6:	e7f8      	b.n	800719a <memmove+0x12>
 80071a8:	4402      	add	r2, r0
 80071aa:	4601      	mov	r1, r0
 80071ac:	428a      	cmp	r2, r1
 80071ae:	d100      	bne.n	80071b2 <memmove+0x2a>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ba:	e7f7      	b.n	80071ac <memmove+0x24>

080071bc <_sbrk_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d06      	ldr	r5, [pc, #24]	@ (80071d8 <_sbrk_r+0x1c>)
 80071c0:	2300      	movs	r3, #0
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	f7fa fd9e 	bl	8001d08 <_sbrk>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_sbrk_r+0x1a>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_sbrk_r+0x1a>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	200007e8 	.word	0x200007e8

080071dc <memcpy>:
 80071dc:	440a      	add	r2, r1
 80071de:	4291      	cmp	r1, r2
 80071e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071e4:	d100      	bne.n	80071e8 <memcpy+0xc>
 80071e6:	4770      	bx	lr
 80071e8:	b510      	push	{r4, lr}
 80071ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f2:	4291      	cmp	r1, r2
 80071f4:	d1f9      	bne.n	80071ea <memcpy+0xe>
 80071f6:	bd10      	pop	{r4, pc}

080071f8 <_realloc_r>:
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	4680      	mov	r8, r0
 80071fe:	4615      	mov	r5, r2
 8007200:	460c      	mov	r4, r1
 8007202:	b921      	cbnz	r1, 800720e <_realloc_r+0x16>
 8007204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007208:	4611      	mov	r1, r2
 800720a:	f7ff bc4b 	b.w	8006aa4 <_malloc_r>
 800720e:	b92a      	cbnz	r2, 800721c <_realloc_r+0x24>
 8007210:	f7ff fbdc 	bl	80069cc <_free_r>
 8007214:	2400      	movs	r4, #0
 8007216:	4620      	mov	r0, r4
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	f000 f81a 	bl	8007254 <_malloc_usable_size_r>
 8007220:	4285      	cmp	r5, r0
 8007222:	4606      	mov	r6, r0
 8007224:	d802      	bhi.n	800722c <_realloc_r+0x34>
 8007226:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800722a:	d8f4      	bhi.n	8007216 <_realloc_r+0x1e>
 800722c:	4629      	mov	r1, r5
 800722e:	4640      	mov	r0, r8
 8007230:	f7ff fc38 	bl	8006aa4 <_malloc_r>
 8007234:	4607      	mov	r7, r0
 8007236:	2800      	cmp	r0, #0
 8007238:	d0ec      	beq.n	8007214 <_realloc_r+0x1c>
 800723a:	42b5      	cmp	r5, r6
 800723c:	462a      	mov	r2, r5
 800723e:	4621      	mov	r1, r4
 8007240:	bf28      	it	cs
 8007242:	4632      	movcs	r2, r6
 8007244:	f7ff ffca 	bl	80071dc <memcpy>
 8007248:	4621      	mov	r1, r4
 800724a:	4640      	mov	r0, r8
 800724c:	f7ff fbbe 	bl	80069cc <_free_r>
 8007250:	463c      	mov	r4, r7
 8007252:	e7e0      	b.n	8007216 <_realloc_r+0x1e>

08007254 <_malloc_usable_size_r>:
 8007254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007258:	1f18      	subs	r0, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	bfbc      	itt	lt
 800725e:	580b      	ldrlt	r3, [r1, r0]
 8007260:	18c0      	addlt	r0, r0, r3
 8007262:	4770      	bx	lr

08007264 <_init>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	bf00      	nop
 8007268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726a:	bc08      	pop	{r3}
 800726c:	469e      	mov	lr, r3
 800726e:	4770      	bx	lr

08007270 <_fini>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	bf00      	nop
 8007274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007276:	bc08      	pop	{r3}
 8007278:	469e      	mov	lr, r3
 800727a:	4770      	bx	lr
