
DroneStopwatch-copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d64  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006f34  08006f34  00007f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fdc  08006fdc  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fdc  08006fdc  00007fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe4  08006fe4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe4  08006fe4  00007fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00007fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006fec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  2000005c  08007048  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08007048  00008828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c20  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bf  00000000  00000000  0001ccac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0001f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f02  00000000  00000000  00020978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230ec  00000000  00000000  0002187a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175b1  00000000  00000000  00044966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5cfe  00000000  00000000  0005bf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005934  00000000  00000000  00131c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0013758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006f1c 	.word	0x08006f1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08006f1c 	.word	0x08006f1c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b96a 	b.w	8000e28 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	460c      	mov	r4, r1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d14e      	bne.n	8000c16 <__udivmoddi4+0xaa>
 8000b78:	4694      	mov	ip, r2
 8000b7a:	458c      	cmp	ip, r1
 8000b7c:	4686      	mov	lr, r0
 8000b7e:	fab2 f282 	clz	r2, r2
 8000b82:	d962      	bls.n	8000c4a <__udivmoddi4+0xde>
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0320 	rsb	r3, r2, #32
 8000b8a:	4091      	lsls	r1, r2
 8000b8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b94:	4319      	orrs	r1, r3
 8000b96:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9e:	fa1f f68c 	uxth.w	r6, ip
 8000ba2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ba6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000baa:	fb07 1114 	mls	r1, r7, r4, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb04 f106 	mul.w	r1, r4, r6
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x64>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc2:	f080 8112 	bcs.w	8000dea <__udivmoddi4+0x27e>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 810f 	bls.w	8000dea <__udivmoddi4+0x27e>
 8000bcc:	3c02      	subs	r4, #2
 8000bce:	4463      	add	r3, ip
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	fa1f f38e 	uxth.w	r3, lr
 8000bd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bda:	fb07 1110 	mls	r1, r7, r0, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb00 f606 	mul.w	r6, r0, r6
 8000be6:	429e      	cmp	r6, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x94>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf2:	f080 80fc 	bcs.w	8000dee <__udivmoddi4+0x282>
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	f240 80f9 	bls.w	8000dee <__udivmoddi4+0x282>
 8000bfc:	4463      	add	r3, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	1b9b      	subs	r3, r3, r6
 8000c02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11d      	cbz	r5, 8000c12 <__udivmoddi4+0xa6>
 8000c0a:	40d3      	lsrs	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d905      	bls.n	8000c26 <__udivmoddi4+0xba>
 8000c1a:	b10d      	cbz	r5, 8000c20 <__udivmoddi4+0xb4>
 8000c1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4608      	mov	r0, r1
 8000c24:	e7f5      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000c26:	fab3 f183 	clz	r1, r3
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d146      	bne.n	8000cbc <__udivmoddi4+0x150>
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	d302      	bcc.n	8000c38 <__udivmoddi4+0xcc>
 8000c32:	4290      	cmp	r0, r2
 8000c34:	f0c0 80f0 	bcc.w	8000e18 <__udivmoddi4+0x2ac>
 8000c38:	1a86      	subs	r6, r0, r2
 8000c3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d0e6      	beq.n	8000c12 <__udivmoddi4+0xa6>
 8000c44:	e9c5 6300 	strd	r6, r3, [r5]
 8000c48:	e7e3      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	f040 8090 	bne.w	8000d70 <__udivmoddi4+0x204>
 8000c50:	eba1 040c 	sub.w	r4, r1, ip
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa1f f78c 	uxth.w	r7, ip
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6e:	fb07 f006 	mul.w	r0, r7, r6
 8000c72:	4298      	cmp	r0, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x11c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x11a>
 8000c80:	4298      	cmp	r0, r3
 8000c82:	f200 80cd 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c86:	4626      	mov	r6, r4
 8000c88:	1a1c      	subs	r4, r3, r0
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c92:	fb08 4410 	mls	r4, r8, r0, r4
 8000c96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9a:	fb00 f707 	mul.w	r7, r0, r7
 8000c9e:	429f      	cmp	r7, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x148>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x146>
 8000cac:	429f      	cmp	r7, r3
 8000cae:	f200 80b0 	bhi.w	8000e12 <__udivmoddi4+0x2a6>
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	1bdb      	subs	r3, r3, r7
 8000cb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cba:	e7a5      	b.n	8000c08 <__udivmoddi4+0x9c>
 8000cbc:	f1c1 0620 	rsb	r6, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ccc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd0:	ea43 030c 	orr.w	r3, r3, ip
 8000cd4:	40f4      	lsrs	r4, r6
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	0c38      	lsrs	r0, r7, #16
 8000cdc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce4:	fa1f fc87 	uxth.w	ip, r7
 8000ce8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf4:	45a1      	cmp	r9, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d90a      	bls.n	8000d12 <__udivmoddi4+0x1a6>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d02:	f080 8084 	bcs.w	8000e0e <__udivmoddi4+0x2a2>
 8000d06:	45a1      	cmp	r9, r4
 8000d08:	f240 8081 	bls.w	8000e0e <__udivmoddi4+0x2a2>
 8000d0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	eba4 0409 	sub.w	r4, r4, r9
 8000d16:	fa1f f983 	uxth.w	r9, r3
 8000d1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x1d2>
 8000d2e:	193c      	adds	r4, r7, r4
 8000d30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d34:	d267      	bcs.n	8000e06 <__udivmoddi4+0x29a>
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0x29a>
 8000d3a:	3b02      	subs	r3, #2
 8000d3c:	443c      	add	r4, r7
 8000d3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d42:	fba0 9302 	umull	r9, r3, r0, r2
 8000d46:	eba4 040c 	sub.w	r4, r4, ip
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	46ce      	mov	lr, r9
 8000d4e:	469c      	mov	ip, r3
 8000d50:	d351      	bcc.n	8000df6 <__udivmoddi4+0x28a>
 8000d52:	d04e      	beq.n	8000df2 <__udivmoddi4+0x286>
 8000d54:	b155      	cbz	r5, 8000d6c <__udivmoddi4+0x200>
 8000d56:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d62:	40cb      	lsrs	r3, r1
 8000d64:	431e      	orrs	r6, r3
 8000d66:	40cc      	lsrs	r4, r1
 8000d68:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e750      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000d70:	f1c2 0320 	rsb	r3, r2, #32
 8000d74:	fa20 f103 	lsr.w	r1, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d80:	4094      	lsls	r4, r2
 8000d82:	430c      	orrs	r4, r1
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d8c:	fa1f f78c 	uxth.w	r7, ip
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3110 	mls	r1, r8, r0, r3
 8000d98:	0c23      	lsrs	r3, r4, #16
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f107 	mul.w	r1, r0, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x24c>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dae:	d22c      	bcs.n	8000e0a <__udivmoddi4+0x29e>
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d92a      	bls.n	8000e0a <__udivmoddi4+0x29e>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb01 f307 	mul.w	r3, r1, r7
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x276>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dd8:	d213      	bcs.n	8000e02 <__udivmoddi4+0x296>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d911      	bls.n	8000e02 <__udivmoddi4+0x296>
 8000dde:	3902      	subs	r1, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	1ae4      	subs	r4, r4, r3
 8000de4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000de8:	e739      	b.n	8000c5e <__udivmoddi4+0xf2>
 8000dea:	4604      	mov	r4, r0
 8000dec:	e6f0      	b.n	8000bd0 <__udivmoddi4+0x64>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e706      	b.n	8000c00 <__udivmoddi4+0x94>
 8000df2:	45c8      	cmp	r8, r9
 8000df4:	d2ae      	bcs.n	8000d54 <__udivmoddi4+0x1e8>
 8000df6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dfe:	3801      	subs	r0, #1
 8000e00:	e7a8      	b.n	8000d54 <__udivmoddi4+0x1e8>
 8000e02:	4631      	mov	r1, r6
 8000e04:	e7ed      	b.n	8000de2 <__udivmoddi4+0x276>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e799      	b.n	8000d3e <__udivmoddi4+0x1d2>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e7d4      	b.n	8000db8 <__udivmoddi4+0x24c>
 8000e0e:	46d6      	mov	lr, sl
 8000e10:	e77f      	b.n	8000d12 <__udivmoddi4+0x1a6>
 8000e12:	4463      	add	r3, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e74d      	b.n	8000cb4 <__udivmoddi4+0x148>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e70f      	b.n	8000c40 <__udivmoddi4+0xd4>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	e730      	b.n	8000c88 <__udivmoddi4+0x11c>
 8000e26:	bf00      	nop

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	f023 030f 	bic.w	r3, r3, #15
 8000e3e:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f043 030c 	orr.w	r3, r3, #12
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	f043 030c 	orr.w	r3, r3, #12
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000e64:	7bbb      	ldrb	r3, [r7, #14]
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	791b      	ldrb	r3, [r3, #4]
 8000e76:	4619      	mov	r1, r3
 8000e78:	f107 0208 	add.w	r2, r7, #8
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2304      	movs	r3, #4
 8000e82:	f001 feb7 	bl	8002bf4 <HAL_I2C_Master_Transmit>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af02      	add	r7, sp, #8
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	f023 030f 	bic.w	r3, r3, #15
 8000ea0:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	f043 030d 	orr.w	r3, r3, #13
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f043 0309 	orr.w	r3, r3, #9
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	f043 030d 	orr.w	r3, r3, #13
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	f043 0309 	orr.w	r3, r3, #9
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f107 0208 	add.w	r2, r7, #8
 8000ede:	2364      	movs	r3, #100	@ 0x64
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	f001 fe86 	bl	8002bf4 <HAL_I2C_Master_Transmit>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff96 	bl	8000e2c <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e006      	b.n	8000f14 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000f06:	2120      	movs	r1, #32
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffc0 	bl	8000e8e <lcd_send_data>
    for (int i = 0; i < 70; i++)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b45      	cmp	r3, #69	@ 0x45
 8000f18:	ddf5      	ble.n	8000f06 <lcd_clear+0x16>
    }
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int row, int col)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    if (row == 0)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d104      	bne.n	8000f40 <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	e003      	b.n	8000f48 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f46:	607b      	str	r3, [r7, #4]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ff6c 	bl	8000e2c <lcd_send_cmd>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000f64:	2032      	movs	r0, #50	@ 0x32
 8000f66:	f001 fa05 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f6a:	2130      	movs	r1, #48	@ 0x30
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff5d 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(5);
 8000f72:	2005      	movs	r0, #5
 8000f74:	f001 f9fe 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f78:	2130      	movs	r1, #48	@ 0x30
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff56 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f001 f9f7 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f86:	2130      	movs	r1, #48	@ 0x30
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff4f 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(10);
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f001 f9f0 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000f94:	2120      	movs	r1, #32
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff48 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(10);
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f001 f9e9 	bl	8002374 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8000fa2:	2128      	movs	r1, #40	@ 0x28
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff41 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f001 f9e2 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff3a 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f001 f9db 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff33 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(2);
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f001 f9d4 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000fcc:	2106      	movs	r1, #6
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff2c 	bl	8000e2c <lcd_send_cmd>
    HAL_Delay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f001 f9cd 	bl	8002374 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000fda:	210c      	movs	r1, #12
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff25 	bl	8000e2c <lcd_send_cmd>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8000ff4:	e007      	b.n	8001006 <lcd_puts+0x1c>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	603a      	str	r2, [r7, #0]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff44 	bl	8000e8e <lcd_send_data>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f3      	bne.n	8000ff6 <lcd_puts+0xc>
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <delay_ms>:

void start_stopwatch();
void stop_stopwatch();
void send_time_to_outputs();

void delay_ms(uint32_t delayMs) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();
 8001020:	f001 f99c 	bl	800235c <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - start < delayMs) {
 8001026:	bf00      	nop
 8001028:	f001 f998 	bl	800235c <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <delay_ms+0x10>

    }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <delay_us>:

void delay_us(uint32_t delay) {
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
    // Calculate the number of cycles per microsecond
    uint32_t cycles_per_us = 168; // 168 MHz -> 1 cycle = 1/168,000,000 s, so 168 cycles per microsecond
 800104a:	23a8      	movs	r3, #168	@ 0xa8
 800104c:	60bb      	str	r3, [r7, #8]
    uint32_t total_cycles = delay * cycles_per_us;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	60fb      	str	r3, [r7, #12]
    while (total_cycles--) {
 8001058:	e000      	b.n	800105c <delay_us+0x1a>

        __NOP();
 800105a:	bf00      	nop
    while (total_cycles--) {
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1e5a      	subs	r2, r3, #1
 8001060:	60fa      	str	r2, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <delay_us+0x18>
    }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]

	currentMillis = HAL_GetTick();
 800107e:	f001 f96d 	bl	800235c <HAL_GetTick>
 8001082:	4603      	mov	r3, r0
 8001084:	4a13      	ldr	r2, [pc, #76]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001086:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == GPIO_PIN_0 && (currentMillis - previousMillis > 200)) {
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d11e      	bne.n	80010cc <HAL_GPIO_EXTI_Callback+0x58>
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0x60>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2bc8      	cmp	r3, #200	@ 0xc8
 800109a:	d917      	bls.n	80010cc <HAL_GPIO_EXTI_Callback+0x58>

        if(isRunning){	stop_stopwatch();  start_stop_stay = 2; send_time_to_outputs(); }
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <HAL_GPIO_EXTI_Callback+0x68>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_EXTI_Callback+0x42>
 80010a6:	f000 fb2f 	bl	8001708 <stop_stopwatch>
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	f000 fa9a 	bl	80015e8 <send_time_to_outputs>
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_EXTI_Callback+0x50>
        else		 {	start_stopwatch(); start_stop_stay = 1; send_time_to_outputs();}
 80010b6:	f000 fb15 	bl	80016e4 <start_stopwatch>
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	f000 fa92 	bl	80015e8 <send_time_to_outputs>

        previousMillis = currentMillis;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a03      	ldr	r2, [pc, #12]	@ (80010d8 <HAL_GPIO_EXTI_Callback+0x64>)
 80010ca:	6013      	str	r3, [r2, #0]
    }
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200006d4 	.word	0x200006d4
 80010d8:	200006d0 	.word	0x200006d0
 80010dc:	20000694 	.word	0x20000694
 80010e0:	200006bd 	.word	0x200006bd

080010e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3 && isRunning) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d109      	bne.n	800110a <HAL_TIM_PeriodElapsedCallback+0x26>
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_TIM_PeriodElapsedCallback+0x26>
            stopwatch_count++;
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001108:	6013      	str	r3, [r2, #0]

        }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40000400 	.word	0x40000400
 800111c:	20000694 	.word	0x20000694
 8001120:	20000690 	.word	0x20000690

08001124 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001134:	d156      	bne.n	80011e4 <HAL_TIM_IC_CaptureCallback+0xc0>
		uint8_t ch_index = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	75fb      	strb	r3, [r7, #23]
		uint32_t ch_value = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
		// Determine which channel triggered the interrupt
		switch (htim->Channel) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7f1b      	ldrb	r3, [r3, #28]
 8001142:	3b01      	subs	r3, #1
 8001144:	2b07      	cmp	r3, #7
 8001146:	d84c      	bhi.n	80011e2 <HAL_TIM_IC_CaptureCallback+0xbe>
 8001148:	a201      	add	r2, pc, #4	@ (adr r2, 8001150 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001171 	.word	0x08001171
 8001154:	0800117b 	.word	0x0800117b
 8001158:	080011e3 	.word	0x080011e3
 800115c:	08001185 	.word	0x08001185
 8001160:	080011e3 	.word	0x080011e3
 8001164:	080011e3 	.word	0x080011e3
 8001168:	080011e3 	.word	0x080011e3
 800116c:	0800118f 	.word	0x0800118f
			case HAL_TIM_ACTIVE_CHANNEL_1: ch_index = 0; ch_value = TIM_CHANNEL_1; break;
 8001170:	2300      	movs	r3, #0
 8001172:	75fb      	strb	r3, [r7, #23]
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	e00e      	b.n	8001198 <HAL_TIM_IC_CaptureCallback+0x74>
			case HAL_TIM_ACTIVE_CHANNEL_2: ch_index = 1; ch_value = TIM_CHANNEL_2; break;
 800117a:	2301      	movs	r3, #1
 800117c:	75fb      	strb	r3, [r7, #23]
 800117e:	2304      	movs	r3, #4
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	e009      	b.n	8001198 <HAL_TIM_IC_CaptureCallback+0x74>
			case HAL_TIM_ACTIVE_CHANNEL_3: ch_index = 2; ch_value = TIM_CHANNEL_3; break;
 8001184:	2302      	movs	r3, #2
 8001186:	75fb      	strb	r3, [r7, #23]
 8001188:	2308      	movs	r3, #8
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	e004      	b.n	8001198 <HAL_TIM_IC_CaptureCallback+0x74>
			case HAL_TIM_ACTIVE_CHANNEL_4: ch_index = 3; ch_value = TIM_CHANNEL_4; break;
 800118e:	2303      	movs	r3, #3
 8001190:	75fb      	strb	r3, [r7, #23]
 8001192:	230c      	movs	r3, #12
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	bf00      	nop
			default: return;
		}

		 uint32_t captured_value = HAL_TIM_ReadCapturedValue(htim, ch_value);
 8001198:	6939      	ldr	r1, [r7, #16]
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f003 ff5c 	bl	8005058 <HAL_TIM_ReadCapturedValue>
 80011a0:	60f8      	str	r0, [r7, #12]

		// Capture start or end of pulse
		if (echo_captured[ch_index] == 0) {
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_TIM_IC_CaptureCallback+0x9e>
			echo_start[ch_index] = captured_value;
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	490f      	ldr	r1, [pc, #60]	@ (80011f0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			echo_captured[ch_index] = 1;
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011bc:	2101      	movs	r1, #1
 80011be:	54d1      	strb	r1, [r2, r3]
 80011c0:	e010      	b.n	80011e4 <HAL_TIM_IC_CaptureCallback+0xc0>
		} else if (echo_captured[ch_index] == 1) {
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10a      	bne.n	80011e4 <HAL_TIM_IC_CaptureCallback+0xc0>
			echo_end[ch_index] = captured_value;
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	4908      	ldr	r1, [pc, #32]	@ (80011f4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			echo_captured[ch_index] = 2;  // Capture complete
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 80011dc:	2102      	movs	r1, #2
 80011de:	54d1      	strb	r1, [r2, r3]
 80011e0:	e000      	b.n	80011e4 <HAL_TIM_IC_CaptureCallback+0xc0>
			default: return;
 80011e2:	bf00      	nop

		}


	}
}
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200006b8 	.word	0x200006b8
 80011f0:	20000698 	.word	0x20000698
 80011f4:	200006a8 	.word	0x200006a8

080011f8 <readSensor>:


void readSensor() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	2140      	movs	r1, #64	@ 0x40
 8001202:	4816      	ldr	r0, [pc, #88]	@ (800125c <readSensor+0x64>)
 8001204:	f001 fb80 	bl	8002908 <HAL_GPIO_WritePin>
		delay_us(10);								// Delay 10us, as per datasheet
 8001208:	200a      	movs	r0, #10
 800120a:	f7ff ff1a 	bl	8001042 <delay_us>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2140      	movs	r1, #64	@ 0x40
 8001212:	4812      	ldr	r0, [pc, #72]	@ (800125c <readSensor+0x64>)
 8001214:	f001 fb78 	bl	8002908 <HAL_GPIO_WritePin>

	    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <readSensor+0x68>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
	    for (int i = 0; i < NUM_SENSORS; i++){
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	e011      	b.n	800124a <readSensor+0x52>
	    	echo_captured[i] = 0;
 8001226:	4a0f      	ldr	r2, [pc, #60]	@ (8001264 <readSensor+0x6c>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
	    	echo_end[i] = 0;
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <readSensor+0x70>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2100      	movs	r1, #0
 8001236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	echo_start[i] = 0;
 800123a:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <readSensor+0x74>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2100      	movs	r1, #0
 8001240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    for (int i = 0; i < NUM_SENSORS; i++){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b03      	cmp	r3, #3
 800124e:	ddea      	ble.n	8001226 <readSensor+0x2e>
	    }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000
 8001260:	20000114 	.word	0x20000114
 8001264:	200006b8 	.word	0x200006b8
 8001268:	200006a8 	.word	0x200006a8
 800126c:	20000698 	.word	0x20000698

08001270 <getDistanceInCm>:

float getDistanceInCm(uint8_t ch_index) {
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
    if (echo_captured[ch_index] == 2) {
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a28      	ldr	r2, [pc, #160]	@ (8001320 <getDistanceInCm+0xb0>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d144      	bne.n	8001310 <getDistanceInCm+0xa0>
        uint32_t pulse_width;

        if (echo_end[ch_index] >= echo_start[ch_index]) {
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a26      	ldr	r2, [pc, #152]	@ (8001324 <getDistanceInCm+0xb4>)
 800128a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4925      	ldr	r1, [pc, #148]	@ (8001328 <getDistanceInCm+0xb8>)
 8001292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001296:	429a      	cmp	r2, r3
 8001298:	d30a      	bcc.n	80012b0 <getDistanceInCm+0x40>
            pulse_width = echo_end[ch_index] - echo_start[ch_index];
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a21      	ldr	r2, [pc, #132]	@ (8001324 <getDistanceInCm+0xb4>)
 800129e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4920      	ldr	r1, [pc, #128]	@ (8001328 <getDistanceInCm+0xb8>)
 80012a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e00c      	b.n	80012ca <getDistanceInCm+0x5a>
        } else {
            // Timer overflow case -> ARR+1 = 10000
            pulse_width = 10000 - echo_start[ch_index] + echo_end[ch_index];
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <getDistanceInCm+0xb4>)
 80012b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	491b      	ldr	r1, [pc, #108]	@ (8001328 <getDistanceInCm+0xb8>)
 80012bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80012c6:	3310      	adds	r3, #16
 80012c8:	60fb      	str	r3, [r7, #12]
        }
        distances[ch_index] = pulse_width / 58.0;
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff f93a 	bl	8000544 <__aeabi_ui2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b15      	ldr	r3, [pc, #84]	@ (800132c <getDistanceInCm+0xbc>)
 80012d6:	f7ff fad9 	bl	800088c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	79fc      	ldrb	r4, [r7, #7]
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fbba 	bl	8000a5c <__aeabi_d2uiz>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <getDistanceInCm+0xc0>)
 80012ec:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        return (pulse_width / 58.0); // Convert to cm
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f7ff f927 	bl	8000544 <__aeabi_ui2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <getDistanceInCm+0xbc>)
 80012fc:	f7ff fac6 	bl	800088c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fbc8 	bl	8000a9c <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	e000      	b.n	8001312 <getDistanceInCm+0xa2>
    }
    return -1;
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <getDistanceInCm+0xc4>)
}
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	200006b8 	.word	0x200006b8
 8001324:	200006a8 	.word	0x200006a8
 8001328:	20000698 	.word	0x20000698
 800132c:	404d0000 	.word	0x404d0000
 8001330:	200006c0 	.word	0x200006c0
 8001334:	bf800000 	.word	0xbf800000

08001338 <toggleLED>:

void toggleLED(uint8_t index, uint8_t v){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
	if(index < 0 || index > NUM_SENSORS) return;
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b04      	cmp	r3, #4
 800134c:	d81f      	bhi.n	800138e <toggleLED+0x56>
	else{
		switch(index){
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d015      	beq.n	8001380 <toggleLED+0x48>
 8001354:	2b02      	cmp	r3, #2
 8001356:	dc1c      	bgt.n	8001392 <toggleLED+0x5a>
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <toggleLED+0x2a>
 800135c:	2b01      	cmp	r3, #1
 800135e:	d008      	beq.n	8001372 <toggleLED+0x3a>
		    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, v);
		    		break;
		    	case 2:
		    		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, v);
		    		break;
		    	default: return;
 8001360:	e017      	b.n	8001392 <toggleLED+0x5a>
		    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, v);
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	461a      	mov	r2, r3
 8001366:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800136a:	480c      	ldr	r0, [pc, #48]	@ (800139c <toggleLED+0x64>)
 800136c:	f001 facc 	bl	8002908 <HAL_GPIO_WritePin>
		    		break;
 8001370:	e010      	b.n	8001394 <toggleLED+0x5c>
		    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, v);
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	461a      	mov	r2, r3
 8001376:	2120      	movs	r1, #32
 8001378:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <toggleLED+0x68>)
 800137a:	f001 fac5 	bl	8002908 <HAL_GPIO_WritePin>
		    		break;
 800137e:	e009      	b.n	8001394 <toggleLED+0x5c>
		    		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, v);
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	461a      	mov	r2, r3
 8001384:	2102      	movs	r1, #2
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <toggleLED+0x6c>)
 8001388:	f001 fabe 	bl	8002908 <HAL_GPIO_WritePin>
		    		break;
 800138c:	e002      	b.n	8001394 <toggleLED+0x5c>
	if(index < 0 || index > NUM_SENSORS) return;
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <toggleLED+0x5c>
		    	default: return;
 8001392:	bf00      	nop
		}
	}
}
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021800 	.word	0x40021800

080013a8 <resetLEDs>:

void resetLEDs(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b2:	4807      	ldr	r0, [pc, #28]	@ (80013d0 <resetLEDs+0x28>)
 80013b4:	f001 faa8 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2120      	movs	r1, #32
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <resetLEDs+0x2c>)
 80013be:	f001 faa3 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2102      	movs	r1, #2
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <resetLEDs+0x30>)
 80013c8:	f001 fa9e 	bl	8002908 <HAL_GPIO_WritePin>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021800 	.word	0x40021800

080013dc <checkForDrone>:

void checkForDrone() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
    readSensor();
 80013e2:	f7ff ff09 	bl	80011f8 <readSensor>
    delay_ms(15);
 80013e6:	200f      	movs	r0, #15
 80013e8:	f7ff fe16 	bl	8001018 <delay_ms>
    float distance[NUM_SENSORS] = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
    uint8_t currentState = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
    currentMillis = HAL_GetTick();
 80013fc:	f000 ffae 	bl	800235c <HAL_GetTick>
 8001400:	4603      	mov	r3, r0
 8001402:	4a72      	ldr	r2, [pc, #456]	@ (80015cc <checkForDrone+0x1f0>)
 8001404:	6013      	str	r3, [r2, #0]

    for(int i = 0; i < NUM_SENSORS; i++){
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	e039      	b.n	8001480 <checkForDrone+0xa4>
        	distance[i] = getDistanceInCm(i);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff2d 	bl	8001270 <getDistanceInCm>
 8001416:	eef0 7a40 	vmov.f32	s15, s0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3318      	adds	r3, #24
 8001420:	443b      	add	r3, r7
 8001422:	3b18      	subs	r3, #24
 8001424:	edc3 7a00 	vstr	s15, [r3]
        	if(distance[i] > 0 && distance[i] < 30){
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	3318      	adds	r3, #24
 800142e:	443b      	add	r3, r7
 8001430:	3b18      	subs	r3, #24
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	dd14      	ble.n	800146a <checkForDrone+0x8e>
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3318      	adds	r3, #24
 8001446:	443b      	add	r3, r7
 8001448:	3b18      	subs	r3, #24
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	d506      	bpl.n	800146a <checkForDrone+0x8e>
        		currentState = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	75fb      	strb	r3, [r7, #23]
        		ledId = i;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b5a      	ldr	r3, [pc, #360]	@ (80015d0 <checkForDrone+0x1f4>)
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e001      	b.n	800146e <checkForDrone+0x92>
        	}
        	else{
        		currentState = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
        	}
        	if(currentState != previousState){
 800146e:	4b59      	ldr	r3, [pc, #356]	@ (80015d4 <checkForDrone+0x1f8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	7dfa      	ldrb	r2, [r7, #23]
 8001476:	429a      	cmp	r2, r3
 8001478:	d106      	bne.n	8001488 <checkForDrone+0xac>
    for(int i = 0; i < NUM_SENSORS; i++){
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3301      	adds	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b03      	cmp	r3, #3
 8001484:	ddc2      	ble.n	800140c <checkForDrone+0x30>
 8001486:	e000      	b.n	800148a <checkForDrone+0xae>
        		break;
 8001488:	bf00      	nop
        	}
        }

    // If we are within the ignore period, exit early without updating state
    if(currentMillis - previousMillis < 2000){
 800148a:	4b50      	ldr	r3, [pc, #320]	@ (80015cc <checkForDrone+0x1f0>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b52      	ldr	r3, [pc, #328]	@ (80015d8 <checkForDrone+0x1fc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001498:	f0c0 8093 	bcc.w	80015c2 <checkForDrone+0x1e6>

    	return;
    }

    resetLEDs();
 800149c:	f7ff ff84 	bl	80013a8 <resetLEDs>

    if(currentState != previousState){
 80014a0:	4b4c      	ldr	r3, [pc, #304]	@ (80015d4 <checkForDrone+0x1f8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	7dfa      	ldrb	r2, [r7, #23]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f000 8086 	beq.w	80015ba <checkForDrone+0x1de>
    if (previousState == 1 && currentState == 0 && start_stop_stay % 4 == 0) {
 80014ae:	4b49      	ldr	r3, [pc, #292]	@ (80015d4 <checkForDrone+0x1f8>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d126      	bne.n	8001506 <checkForDrone+0x12a>
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d123      	bne.n	8001506 <checkForDrone+0x12a>
 80014be:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <checkForDrone+0x200>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11b      	bne.n	8001506 <checkForDrone+0x12a>
        if (!isRunning ) {
 80014ce:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <checkForDrone+0x204>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d170      	bne.n	80015ba <checkForDrone+0x1de>
        	lcd_clear(&lcd1);
 80014d8:	4842      	ldr	r0, [pc, #264]	@ (80015e4 <checkForDrone+0x208>)
 80014da:	f7ff fd09 	bl	8000ef0 <lcd_clear>
            start_stopwatch();
 80014de:	f000 f901 	bl	80016e4 <start_stopwatch>
            start_stop_stay++;
 80014e2:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <checkForDrone+0x200>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <checkForDrone+0x200>)
 80014ee:	701a      	strb	r2, [r3, #0]
            previousMillis = currentMillis;
 80014f0:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <checkForDrone+0x1f0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a38      	ldr	r2, [pc, #224]	@ (80015d8 <checkForDrone+0x1fc>)
 80014f6:	6013      	str	r3, [r2, #0]
            toggleLED(ledId, 1);
 80014f8:	4b35      	ldr	r3, [pc, #212]	@ (80015d0 <checkForDrone+0x1f4>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff1a 	bl	8001338 <toggleLED>
        if (!isRunning ) {
 8001504:	e059      	b.n	80015ba <checkForDrone+0x1de>

        }
    }

    else if (previousState == 0 && currentState == 1 && start_stop_stay % 4 == 1) {
 8001506:	4b33      	ldr	r3, [pc, #204]	@ (80015d4 <checkForDrone+0x1f8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d125      	bne.n	800155c <checkForDrone+0x180>
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d122      	bne.n	800155c <checkForDrone+0x180>
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <checkForDrone+0x200>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d11a      	bne.n	800155c <checkForDrone+0x180>
        if (isRunning ) {
 8001526:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <checkForDrone+0x204>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d044      	beq.n	80015ba <checkForDrone+0x1de>
            stop_stopwatch();
 8001530:	f000 f8ea 	bl	8001708 <stop_stopwatch>
            start_stop_stay++;
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <checkForDrone+0x200>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <checkForDrone+0x200>)
 8001540:	701a      	strb	r2, [r3, #0]
            send_time_to_outputs();				//Updating LCD output now, then delaying readings
 8001542:	f000 f851 	bl	80015e8 <send_time_to_outputs>
            previousMillis = currentMillis;
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <checkForDrone+0x1f0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <checkForDrone+0x1fc>)
 800154c:	6013      	str	r3, [r2, #0]
            toggleLED(ledId, 1);
 800154e:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <checkForDrone+0x1f4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2101      	movs	r1, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff feef 	bl	8001338 <toggleLED>
        if (isRunning ) {
 800155a:	e02e      	b.n	80015ba <checkForDrone+0x1de>
        }
    }

    else if(previousState == 1 && currentState == 0 && start_stop_stay % 4 == 2){
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <checkForDrone+0x1f8>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d114      	bne.n	8001590 <checkForDrone+0x1b4>
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d111      	bne.n	8001590 <checkForDrone+0x1b4>
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <checkForDrone+0x200>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d109      	bne.n	8001590 <checkForDrone+0x1b4>
        send_time_to_outputs();
 800157c:	f000 f834 	bl	80015e8 <send_time_to_outputs>
        start_stop_stay++;
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <checkForDrone+0x200>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <checkForDrone+0x200>)
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e014      	b.n	80015ba <checkForDrone+0x1de>
        }

    else if(previousState == 0 && currentState == 1 && start_stop_stay % 4 == 3){
 8001590:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <checkForDrone+0x1f8>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <checkForDrone+0x1de>
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10c      	bne.n	80015ba <checkForDrone+0x1de>
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <checkForDrone+0x200>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d104      	bne.n	80015ba <checkForDrone+0x1de>
            send_time_to_outputs();
 80015b0:	f000 f81a 	bl	80015e8 <send_time_to_outputs>
            start_stop_stay=0;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <checkForDrone+0x200>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]

            }
    }
    previousState = currentState;
 80015ba:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <checkForDrone+0x1f8>)
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	7013      	strb	r3, [r2, #0]
 80015c0:	e000      	b.n	80015c4 <checkForDrone+0x1e8>
    	return;
 80015c2:	bf00      	nop

}
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200006d4 	.word	0x200006d4
 80015d0:	200006be 	.word	0x200006be
 80015d4:	200006bc 	.word	0x200006bc
 80015d8:	200006d0 	.word	0x200006d0
 80015dc:	200006bd 	.word	0x200006bd
 80015e0:	20000694 	.word	0x20000694
 80015e4:	20000688 	.word	0x20000688

080015e8 <send_time_to_outputs>:


void send_time_to_outputs() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

    char buffer[20]="";
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]

    // snprintf - ensures that the buffer is not overrun and always null-terminated (no random letters from previous itteration
    //snprintf(buffer, sizeof(buffer), "Time: %lu.%02lus    ", stopwatch_count / 100, stopwatch_count % 100);
    sprintf(buffer, "Time: %lu.%.2lus ", stopwatch_count/100,stopwatch_count%100);
 8001600:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <send_time_to_outputs+0xd4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2e      	ldr	r2, [pc, #184]	@ (80016c0 <send_time_to_outputs+0xd8>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0959      	lsrs	r1, r3, #5
 800160c:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <send_time_to_outputs+0xd4>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <send_time_to_outputs+0xd8>)
 8001612:	fba3 0302 	umull	r0, r3, r3, r2
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2064      	movs	r0, #100	@ 0x64
 800161a:	fb00 f303 	mul.w	r3, r0, r3
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	1d38      	adds	r0, r7, #4
 8001622:	460a      	mov	r2, r1
 8001624:	4927      	ldr	r1, [pc, #156]	@ (80016c4 <send_time_to_outputs+0xdc>)
 8001626:	f004 ffd9 	bl	80065dc <siprintf>
    lcd_gotoxy(&lcd1, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	4826      	ldr	r0, [pc, #152]	@ (80016c8 <send_time_to_outputs+0xe0>)
 8001630:	f7ff fc78 	bl	8000f24 <lcd_gotoxy>
    lcd_puts(&lcd1, buffer);
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4823      	ldr	r0, [pc, #140]	@ (80016c8 <send_time_to_outputs+0xe0>)
 800163a:	f7ff fcd6 	bl	8000fea <lcd_puts>

    switch(start_stop_stay % 4){
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <send_time_to_outputs+0xe4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d002      	beq.n	8001652 <send_time_to_outputs+0x6a>
 800164c:	2b02      	cmp	r3, #2
 800164e:	d007      	beq.n	8001660 <send_time_to_outputs+0x78>
 8001650:	e00d      	b.n	800166e <send_time_to_outputs+0x86>
    case 1:
    	snprintf(buffer, sizeof(buffer), "Mode: Running...");
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <send_time_to_outputs+0xe8>)
 8001656:	2114      	movs	r1, #20
 8001658:	4618      	mov	r0, r3
 800165a:	f004 ff8b 	bl	8006574 <sniprintf>
    	break;
 800165e:	e00c      	b.n	800167a <send_time_to_outputs+0x92>
    case 2:
    	snprintf(buffer, sizeof(buffer), "Mode: Stopped   ");
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <send_time_to_outputs+0xec>)
 8001664:	2114      	movs	r1, #20
 8001666:	4618      	mov	r0, r3
 8001668:	f004 ff84 	bl	8006574 <sniprintf>
    	break;
 800166c:	e005      	b.n	800167a <send_time_to_outputs+0x92>
    default:
    	snprintf(buffer, sizeof(buffer), "Mode: Default   ");
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <send_time_to_outputs+0xf0>)
 8001672:	2114      	movs	r1, #20
 8001674:	4618      	mov	r0, r3
 8001676:	f004 ff7d 	bl	8006574 <sniprintf>
    }

    lcd_gotoxy(&lcd1, 1, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2101      	movs	r1, #1
 800167e:	4812      	ldr	r0, [pc, #72]	@ (80016c8 <send_time_to_outputs+0xe0>)
 8001680:	f7ff fc50 	bl	8000f24 <lcd_gotoxy>
    lcd_puts(&lcd1, buffer);
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	480f      	ldr	r0, [pc, #60]	@ (80016c8 <send_time_to_outputs+0xe0>)
 800168a:	f7ff fcae 	bl	8000fea <lcd_puts>

    sprintf(buffer, "TIME:%lu \n", stopwatch_count);
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <send_time_to_outputs+0xd4>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4911      	ldr	r1, [pc, #68]	@ (80016dc <send_time_to_outputs+0xf4>)
 8001696:	4618      	mov	r0, r3
 8001698:	f004 ffa0 	bl	80065dc <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fdb6 	bl	8000210 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	1d39      	adds	r1, r7, #4
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <send_time_to_outputs+0xf8>)
 80016b0:	f004 f8aa 	bl	8005808 <HAL_UART_Transmit>

}
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000690 	.word	0x20000690
 80016c0:	51eb851f 	.word	0x51eb851f
 80016c4:	08006f34 	.word	0x08006f34
 80016c8:	20000688 	.word	0x20000688
 80016cc:	200006bd 	.word	0x200006bd
 80016d0:	08006f48 	.word	0x08006f48
 80016d4:	08006f5c 	.word	0x08006f5c
 80016d8:	08006f70 	.word	0x08006f70
 80016dc:	08006f84 	.word	0x08006f84
 80016e0:	2000015c 	.word	0x2000015c

080016e4 <start_stopwatch>:

void start_stopwatch() {
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
	isRunning = 1;
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <start_stopwatch+0x1c>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
    stopwatch_count = 0;
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <start_stopwatch+0x20>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000694 	.word	0x20000694
 8001704:	20000690 	.word	0x20000690

08001708 <stop_stopwatch>:

void stop_stopwatch() {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    isRunning = 0;
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <stop_stopwatch+0x14>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
    send_time_to_outputs();
 8001712:	f7ff ff69 	bl	80015e8 <send_time_to_outputs>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000694 	.word	0x20000694

08001720 <resetTimerChannels>:

void resetTimerChannels(){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	2108      	movs	r1, #8
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <resetTimerChannels+0x38>)
 800172a:	f001 f8ed 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2120      	movs	r1, #32
 8001732:	4809      	ldr	r0, [pc, #36]	@ (8001758 <resetTimerChannels+0x38>)
 8001734:	f001 f8e8 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	4807      	ldr	r0, [pc, #28]	@ (800175c <resetTimerChannels+0x3c>)
 800173e:	f001 f8e3 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001748:	4804      	ldr	r0, [pc, #16]	@ (800175c <resetTimerChannels+0x3c>)
 800174a:	f001 f8dd 	bl	8002908 <HAL_GPIO_WritePin>
	delay_ms(10);
 800174e:	200a      	movs	r0, #10
 8001750:	f7ff fc62 	bl	8001018 <delay_ms>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020000 	.word	0x40020000
 800175c:	40020400 	.word	0x40020400

08001760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001764:	f000 fd94 	bl	8002290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001768:	f000 f844 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176c:	f000 fa06 	bl	8001b7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001770:	f000 f9ac 	bl	8001acc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001774:	f000 f9d4 	bl	8001b20 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001778:	f000 f8d6 	bl	8001928 <MX_TIM2_Init>
  MX_I2C1_Init();
 800177c:	f000 f8a6 	bl	80018cc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001780:	f000 f94e 	bl	8001a20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  resetTimerChannels();		//	TIM2 Channel Reset on startup - removes unpredictable behaviour
 8001784:	f7ff ffcc 	bl	8001720 <resetTimerChannels>



  //HAL_TIM_Base_Start_IT(&htim2);  // Start the TIM2 base timer for input capture
  HAL_TIM_Base_Start_IT(&htim3);
 8001788:	4815      	ldr	r0, [pc, #84]	@ (80017e0 <main+0x80>)
 800178a:	f003 f829 	bl	80047e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	// Start TIM2 input capture for ECHO signal 1
 800178e:	2100      	movs	r1, #0
 8001790:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <main+0x84>)
 8001792:	f003 f8e5 	bl	8004960 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);	// Start TIM2 input capture for ECHO signal 2
 8001796:	2104      	movs	r1, #4
 8001798:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <main+0x84>)
 800179a:	f003 f8e1 	bl	8004960 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);	// Start TIM2 input capture for ECHO signal 3
 800179e:	2108      	movs	r1, #8
 80017a0:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <main+0x84>)
 80017a2:	f003 f8dd 	bl	8004960 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);	// Start TIM2 input capture for ECHO signal 4
 80017a6:	210c      	movs	r1, #12
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <main+0x84>)
 80017aa:	f003 f8d9 	bl	8004960 <HAL_TIM_IC_Start_IT>



  // LCD initialization
	  lcd1.hi2c = &hi2c1;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <main+0x88>)
 80017b0:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <main+0x8c>)
 80017b2:	601a      	str	r2, [r3, #0]
	  lcd1.address = 0x4E;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <main+0x88>)
 80017b6:	224e      	movs	r2, #78	@ 0x4e
 80017b8:	711a      	strb	r2, [r3, #4]
	  lcd_init(&lcd1);
 80017ba:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <main+0x88>)
 80017bc:	f7ff fbce 	bl	8000f5c <lcd_init>

  // CONTENT ON LCD
	  lcd_clear(&lcd1);
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <main+0x88>)
 80017c2:	f7ff fb95 	bl	8000ef0 <lcd_clear>
	  send_time_to_outputs();
 80017c6:	f7ff ff0f 	bl	80015e8 <send_time_to_outputs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  checkForDrone();
 80017ca:	f7ff fe07 	bl	80013dc <checkForDrone>
	  if(isRunning) send_time_to_outputs();
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <main+0x90>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f8      	beq.n	80017ca <main+0x6a>
 80017d8:	f7ff ff06 	bl	80015e8 <send_time_to_outputs>
	  checkForDrone();
 80017dc:	e7f5      	b.n	80017ca <main+0x6a>
 80017de:	bf00      	nop
 80017e0:	20000114 	.word	0x20000114
 80017e4:	200000cc 	.word	0x200000cc
 80017e8:	20000688 	.word	0x20000688
 80017ec:	20000078 	.word	0x20000078
 80017f0:	20000694 	.word	0x20000694

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b094      	sub	sp, #80	@ 0x50
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	2234      	movs	r2, #52	@ 0x34
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f004 ff0a 	bl	800661c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <SystemClock_Config+0xd0>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	4a28      	ldr	r2, [pc, #160]	@ (80018c4 <SystemClock_Config+0xd0>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	@ 0x40
 8001828:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <SystemClock_Config+0xd0>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001834:	2300      	movs	r3, #0
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <SystemClock_Config+0xd4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <SystemClock_Config+0xd4>)
 800183e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <SystemClock_Config+0xd4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001850:	2301      	movs	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001858:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185a:	2302      	movs	r3, #2
 800185c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001864:	2304      	movs	r3, #4
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001868:	23a8      	movs	r3, #168	@ 0xa8
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186c:	2302      	movs	r3, #2
 800186e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001870:	2307      	movs	r3, #7
 8001872:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001874:	2302      	movs	r3, #2
 8001876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fcc1 	bl	8004204 <HAL_RCC_OscConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001888:	f000 fa82 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188c:	230f      	movs	r3, #15
 800188e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001890:	2302      	movs	r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001898:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800189c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800189e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	2105      	movs	r1, #5
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fe36 	bl	800351c <HAL_RCC_ClockConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018b6:	f000 fa6b 	bl	8001d90 <Error_Handler>
  }
}
 80018ba:	bf00      	nop
 80018bc:	3750      	adds	r7, #80	@ 0x50
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40007000 	.word	0x40007000

080018cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_I2C1_Init+0x50>)
 80018d2:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <MX_I2C1_Init+0x54>)
 80018d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_I2C1_Init+0x50>)
 80018d8:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <MX_I2C1_Init+0x58>)
 80018da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_I2C1_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_I2C1_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_I2C1_Init+0x50>)
 80018ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018fc:	4b07      	ldr	r3, [pc, #28]	@ (800191c <MX_I2C1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_I2C1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_I2C1_Init+0x50>)
 800190a:	f001 f82f 	bl	800296c <HAL_I2C_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001914:	f000 fa3c 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000078 	.word	0x20000078
 8001920:	40005400 	.word	0x40005400
 8001924:	000186a0 	.word	0x000186a0

08001928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001944:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 8001946:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800194a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800194c:	4b33      	ldr	r3, [pc, #204]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 800194e:	2253      	movs	r2, #83	@ 0x53
 8001950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b32      	ldr	r3, [pc, #200]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001958:	4b30      	ldr	r3, [pc, #192]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 800195a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800195e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b2d      	ldr	r3, [pc, #180]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800196c:	482b      	ldr	r0, [pc, #172]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 800196e:	f002 ffa7 	bl	80048c0 <HAL_TIM_IC_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001978:	f000 fa0a 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4824      	ldr	r0, [pc, #144]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 800198c:	f003 fe5c 	bl	8005648 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001996:	f000 f9fb 	bl	8001d90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800199a:	230a      	movs	r3, #10
 800199c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800199e:	2301      	movs	r3, #1
 80019a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	481a      	ldr	r0, [pc, #104]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 80019b2:	f003 f9ed 	bl	8004d90 <HAL_TIM_IC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80019bc:	f000 f9e8 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	2204      	movs	r2, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4815      	ldr	r0, [pc, #84]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 80019c8:	f003 f9e2 	bl	8004d90 <HAL_TIM_IC_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80019d2:	f000 f9dd 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	2208      	movs	r2, #8
 80019da:	4619      	mov	r1, r3
 80019dc:	480f      	ldr	r0, [pc, #60]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 80019de:	f003 f9d7 	bl	8004d90 <HAL_TIM_IC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80019e8:	f000 f9d2 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	220c      	movs	r2, #12
 80019f0:	4619      	mov	r1, r3
 80019f2:	480a      	ldr	r0, [pc, #40]	@ (8001a1c <MX_TIM2_Init+0xf4>)
 80019f4:	f003 f9cc 	bl	8004d90 <HAL_TIM_IC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019fe:	f000 f9c7 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2101      	movs	r1, #1
 8001a06:	201c      	movs	r0, #28
 8001a08:	f000 fdb3 	bl	8002572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f000 fdcc 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200000cc 	.word	0x200000cc

08001a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a3e:	4a22      	ldr	r2, [pc, #136]	@ (8001ac8 <MX_TIM3_Init+0xa8>)
 8001a40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a44:	2253      	movs	r2, #83	@ 0x53
 8001a46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8333;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a50:	f242 028d 	movw	r2, #8333	@ 0x208d
 8001a54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a62:	4818      	ldr	r0, [pc, #96]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a64:	f002 fe6c 	bl	8004740 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a6e:	f000 f98f 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4811      	ldr	r0, [pc, #68]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a80:	f003 fa22 	bl	8004ec8 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a8a:	f000 f981 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480a      	ldr	r0, [pc, #40]	@ (8001ac4 <MX_TIM3_Init+0xa4>)
 8001a9c:	f003 fdd4 	bl	8005648 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001aa6:	f000 f973 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	201d      	movs	r0, #29
 8001ab0:	f000 fd5f 	bl	8002572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ab4:	201d      	movs	r0, #29
 8001ab6:	f000 fd78 	bl	80025aa <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM3_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000114 	.word	0x20000114
 8001ac8:	40000400 	.word	0x40000400

08001acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <MX_USART3_UART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001b04:	f003 fe30 	bl	8005768 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b0e:	f000 f93f 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000015c 	.word	0x2000015c
 8001b1c:	40004800 	.word	0x40004800

08001b20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b24:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b2e:	2206      	movs	r2, #6
 8001b30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b64:	f001 fb9f 	bl	80032a6 <HAL_PCD_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f90f 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200001a4 	.word	0x200001a4

08001b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	4b78      	ldr	r3, [pc, #480]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a77      	ldr	r2, [pc, #476]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b75      	ldr	r3, [pc, #468]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	4b71      	ldr	r3, [pc, #452]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a70      	ldr	r2, [pc, #448]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b6a      	ldr	r3, [pc, #424]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a69      	ldr	r2, [pc, #420]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b67      	ldr	r3, [pc, #412]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b63      	ldr	r3, [pc, #396]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a62      	ldr	r2, [pc, #392]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b60      	ldr	r3, [pc, #384]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b5c      	ldr	r3, [pc, #368]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b59      	ldr	r3, [pc, #356]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b55      	ldr	r3, [pc, #340]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a54      	ldr	r2, [pc, #336]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b52      	ldr	r3, [pc, #328]	@ (8001d78 <MX_GPIO_Init+0x1fc>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2140      	movs	r1, #64	@ 0x40
 8001c3e:	484f      	ldr	r0, [pc, #316]	@ (8001d7c <MX_GPIO_Init+0x200>)
 8001c40:	f000 fe62 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001c4a:	484d      	ldr	r0, [pc, #308]	@ (8001d80 <MX_GPIO_Init+0x204>)
 8001c4c:	f000 fe5c 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2142      	movs	r1, #66	@ 0x42
 8001c54:	484b      	ldr	r0, [pc, #300]	@ (8001d84 <MX_GPIO_Init+0x208>)
 8001c56:	f000 fe57 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c60:	4849      	ldr	r0, [pc, #292]	@ (8001d88 <MX_GPIO_Init+0x20c>)
 8001c62:	f000 fe51 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4848      	ldr	r0, [pc, #288]	@ (8001d8c <MX_GPIO_Init+0x210>)
 8001c6c:	f000 fe4c 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	4840      	ldr	r0, [pc, #256]	@ (8001d88 <MX_GPIO_Init+0x20c>)
 8001c88:	f000 fcaa 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c8c:	2340      	movs	r3, #64	@ 0x40
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4836      	ldr	r0, [pc, #216]	@ (8001d7c <MX_GPIO_Init+0x200>)
 8001ca4:	f000 fc9c 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ca8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	482f      	ldr	r0, [pc, #188]	@ (8001d80 <MX_GPIO_Init+0x204>)
 8001cc2:	f000 fc8d 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001cc6:	2342      	movs	r3, #66	@ 0x42
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4829      	ldr	r0, [pc, #164]	@ (8001d84 <MX_GPIO_Init+0x208>)
 8001cde:	f000 fc7f 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4823      	ldr	r0, [pc, #140]	@ (8001d84 <MX_GPIO_Init+0x208>)
 8001cf6:	f000 fc73 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	481d      	ldr	r0, [pc, #116]	@ (8001d88 <MX_GPIO_Init+0x20c>)
 8001d14:	f000 fc64 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4817      	ldr	r0, [pc, #92]	@ (8001d8c <MX_GPIO_Init+0x210>)
 8001d2e:	f000 fc57 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d32:	2320      	movs	r3, #32
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	4810      	ldr	r0, [pc, #64]	@ (8001d8c <MX_GPIO_Init+0x210>)
 8001d4a:	f000 fc49 	bl	80025e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2006      	movs	r0, #6
 8001d54:	f000 fc0d 	bl	8002572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d58:	2006      	movs	r0, #6
 8001d5a:	f000 fc26 	bl	80025aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2101      	movs	r1, #1
 8001d62:	2006      	movs	r0, #6
 8001d64:	f000 fc05 	bl	8002572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d68:	2006      	movs	r0, #6
 8001d6a:	f000 fc1e 	bl	80025aa <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	@ 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020c00 	.word	0x40020c00

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <Error_Handler+0x8>

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	4a0f      	ldr	r2, [pc, #60]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	@ 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <HAL_I2C_MspInit+0x84>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12c      	bne.n	8001e68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <HAL_I2C_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <HAL_I2C_MspInit+0x88>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_I2C_MspInit+0x88>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001e2a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e30:	2312      	movs	r3, #18
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <HAL_I2C_MspInit+0x8c>)
 8001e48:	f000 fbca 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_I2C_MspInit+0x88>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_I2C_MspInit+0x88>)
 8001e56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_I2C_MspInit+0x88>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	@ 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40005400 	.word	0x40005400
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020400 	.word	0x40020400

08001e7c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	@ 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e9c:	d152      	bne.n	8001f44 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a29      	ldr	r2, [pc, #164]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b23      	ldr	r3, [pc, #140]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a22      	ldr	r2, [pc, #136]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a1b      	ldr	r2, [pc, #108]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_TIM_IC_MspInit+0xd0>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001ef2:	2328      	movs	r3, #40	@ 0x28
 8001ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f02:	2301      	movs	r3, #1
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4810      	ldr	r0, [pc, #64]	@ (8001f50 <HAL_TIM_IC_MspInit+0xd4>)
 8001f0e:	f000 fb67 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001f12:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f24:	2301      	movs	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <HAL_TIM_IC_MspInit+0xd8>)
 8001f30:	f000 fb56 	bl	80025e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	201c      	movs	r0, #28
 8001f3a:	f000 fb1a 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f3e:	201c      	movs	r0, #28
 8001f40:	f000 fb33 	bl	80025aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f44:	bf00      	nop
 8001f46:	3728      	adds	r7, #40	@ 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020400 	.word	0x40020400

08001f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x48>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d115      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	201d      	movs	r0, #29
 8001f8c:	f000 faf1 	bl	8002572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f90:	201d      	movs	r0, #29
 8001f92:	f000 fb0a 	bl	80025aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	@ (800202c <HAL_UART_MspInit+0x84>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12c      	bne.n	8002024 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <HAL_UART_MspInit+0x88>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	4a17      	ldr	r2, [pc, #92]	@ (8002030 <HAL_UART_MspInit+0x88>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_UART_MspInit+0x88>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_UART_MspInit+0x88>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a10      	ldr	r2, [pc, #64]	@ (8002030 <HAL_UART_MspInit+0x88>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_UART_MspInit+0x88>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002014:	2307      	movs	r3, #7
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <HAL_UART_MspInit+0x8c>)
 8002020:	f000 fade 	bl	80025e0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	@ 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40004800 	.word	0x40004800
 8002030:	40023800 	.word	0x40023800
 8002034:	40020c00 	.word	0x40020c00

08002038 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0a0      	sub	sp, #128	@ 0x80
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	225c      	movs	r2, #92	@ 0x5c
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f004 fadf 	bl	800661c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002066:	d14e      	bne.n	8002106 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800206e:	2300      	movs	r3, #0
 8002070:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	4618      	mov	r0, r3
 8002078:	f001 fb6a 	bl	8003750 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8002082:	f7ff fe85 	bl	8001d90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b21      	ldr	r3, [pc, #132]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a20      	ldr	r2, [pc, #128]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|USB_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80020a2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80020a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020b4:	230a      	movs	r3, #10
 80020b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020bc:	4619      	mov	r1, r3
 80020be:	4815      	ldr	r0, [pc, #84]	@ (8002114 <HAL_PCD_MspInit+0xdc>)
 80020c0:	f000 fa8e 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ca:	2300      	movs	r3, #0
 80020cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020d6:	4619      	mov	r1, r3
 80020d8:	480e      	ldr	r0, [pc, #56]	@ (8002114 <HAL_PCD_MspInit+0xdc>)
 80020da:	f000 fa81 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 80020e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 80020e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e8:	6353      	str	r3, [r2, #52]	@ 0x34
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <HAL_PCD_MspInit+0xd8>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002106:	bf00      	nop
 8002108:	3780      	adds	r7, #128	@ 0x80
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <NMI_Handler+0x4>

08002120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <MemManage_Handler+0x4>

08002130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <BusFault_Handler+0x4>

08002138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <UsageFault_Handler+0x4>

08002140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216e:	f000 f8e1 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}

08002176 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800217a:	2001      	movs	r0, #1
 800217c:	f000 fbde 	bl	800293c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <TIM2_IRQHandler+0x10>)
 800218a:	f002 fd11 	bl	8004bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200000cc 	.word	0x200000cc

08002198 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <TIM3_IRQHandler+0x10>)
 800219e:	f002 fd07 	bl	8004bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000114 	.word	0x20000114

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f004 fa26 	bl	800662c <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20020000 	.word	0x20020000
 800220c:	00000400 	.word	0x00000400
 8002210:	200006d8 	.word	0x200006d8
 8002214:	20000828 	.word	0x20000828

08002218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002274 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002240:	f7ff ffea 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	@ (8002278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	@ (800227c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	@ (8002288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800226a:	f004 f9e5 	bl	8006638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226e:	f7ff fa77 	bl	8001760 <main>
  bx  lr    
 8002272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002280:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 8002284:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002288:	20000828 	.word	0x20000828

0800228c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC_IRQHandler>
	...

08002290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002294:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <HAL_Init+0x40>)
 800229a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800229e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <HAL_Init+0x40>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <HAL_Init+0x40>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 f94f 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 f808 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c4:	f7ff fd6a 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022dc:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_InitTick+0x54>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_InitTick+0x58>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f967 	bl	80025c6 <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00e      	b.n	8002320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d80a      	bhi.n	800231e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 f92f 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4a06      	ldr	r2, [pc, #24]	@ (8002330 <HAL_InitTick+0x5c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000000 	.word	0x20000000
 800232c:	20000008 	.word	0x20000008
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_IncTick+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x24>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_IncTick+0x24>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000008 	.word	0x20000008
 8002358:	200006dc 	.word	0x200006dc

0800235c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	200006dc 	.word	0x200006dc

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff ffee 	bl	800235c <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffde 	bl	800235c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000008 	.word	0x20000008

080023bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ee:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <__NVIC_SetPriorityGrouping+0x44>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	60d3      	str	r3, [r2, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	f003 0307 	and.w	r3, r3, #7
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4907      	ldr	r1, [pc, #28]	@ (8002458 <__NVIC_EnableIRQ+0x38>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000e100 	.word	0xe000e100

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	@ (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	@ (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	@ (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff29 	bl	80023bc <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff3e 	bl	8002404 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff8e 	bl	80024b0 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff31 	bl	8002420 <__NVIC_EnableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffa2 	bl	8002518 <SysTick_Config>
 80025d4:	4603      	mov	r3, r0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e165      	b.n	80028c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8154 	bne.w	80028c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	2b02      	cmp	r3, #2
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b03      	cmp	r3, #3
 800269e:	d017      	beq.n	80026d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80ae 	beq.w	80028c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b5d      	ldr	r3, [pc, #372]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a5c      	ldr	r2, [pc, #368]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b5a      	ldr	r3, [pc, #360]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a58      	ldr	r2, [pc, #352]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4f      	ldr	r2, [pc, #316]	@ (80028e8 <HAL_GPIO_Init+0x308>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x21a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4e      	ldr	r2, [pc, #312]	@ (80028ec <HAL_GPIO_Init+0x30c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x216>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4d      	ldr	r2, [pc, #308]	@ (80028f0 <HAL_GPIO_Init+0x310>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x212>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4c      	ldr	r2, [pc, #304]	@ (80028f4 <HAL_GPIO_Init+0x314>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x20e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4b      	ldr	r2, [pc, #300]	@ (80028f8 <HAL_GPIO_Init+0x318>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x20a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4a      	ldr	r2, [pc, #296]	@ (80028fc <HAL_GPIO_Init+0x31c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x206>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a49      	ldr	r2, [pc, #292]	@ (8002900 <HAL_GPIO_Init+0x320>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x202>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x21c>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b3a      	ldr	r3, [pc, #232]	@ (8002904 <HAL_GPIO_Init+0x324>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b2f      	ldr	r3, [pc, #188]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a26      	ldr	r2, [pc, #152]	@ (8002904 <HAL_GPIO_Init+0x324>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002892:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_GPIO_Init+0x324>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_GPIO_Init+0x324>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028bc:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_GPIO_Init+0x324>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae96 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	@ 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002952:	4a05      	ldr	r2, [pc, #20]	@ (8002968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fb8a 	bl	8001074 <HAL_GPIO_EXTI_Callback>
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e12b      	b.n	8002bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fa2a 	bl	8001dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2224      	movs	r2, #36	@ 0x24
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029d0:	f000 fe96 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80029d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4a81      	ldr	r2, [pc, #516]	@ (8002be0 <HAL_I2C_Init+0x274>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d807      	bhi.n	80029f0 <HAL_I2C_Init+0x84>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a80      	ldr	r2, [pc, #512]	@ (8002be4 <HAL_I2C_Init+0x278>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e006      	b.n	80029fe <HAL_I2C_Init+0x92>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a7d      	ldr	r2, [pc, #500]	@ (8002be8 <HAL_I2C_Init+0x27c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0e7      	b.n	8002bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a78      	ldr	r2, [pc, #480]	@ (8002bec <HAL_I2C_Init+0x280>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a6a      	ldr	r2, [pc, #424]	@ (8002be0 <HAL_I2C_Init+0x274>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d802      	bhi.n	8002a40 <HAL_I2C_Init+0xd4>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	e009      	b.n	8002a54 <HAL_I2C_Init+0xe8>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	4a69      	ldr	r2, [pc, #420]	@ (8002bf0 <HAL_I2C_Init+0x284>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	3301      	adds	r3, #1
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	495c      	ldr	r1, [pc, #368]	@ (8002be0 <HAL_I2C_Init+0x274>)
 8002a70:	428b      	cmp	r3, r1
 8002a72:	d819      	bhi.n	8002aa8 <HAL_I2C_Init+0x13c>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e59      	subs	r1, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a82:	1c59      	adds	r1, r3, #1
 8002a84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a88:	400b      	ands	r3, r1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_I2C_Init+0x138>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1e59      	subs	r1, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa2:	e051      	b.n	8002b48 <HAL_I2C_Init+0x1dc>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	e04f      	b.n	8002b48 <HAL_I2C_Init+0x1dc>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d111      	bne.n	8002ad4 <HAL_I2C_Init+0x168>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1e58      	subs	r0, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e012      	b.n	8002afa <HAL_I2C_Init+0x18e>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	0099      	lsls	r1, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Init+0x196>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e022      	b.n	8002b48 <HAL_I2C_Init+0x1dc>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10e      	bne.n	8002b28 <HAL_I2C_Init+0x1bc>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e58      	subs	r0, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	440b      	add	r3, r1
 8002b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b26:	e00f      	b.n	8002b48 <HAL_I2C_Init+0x1dc>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	0099      	lsls	r1, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	6809      	ldr	r1, [r1, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6911      	ldr	r1, [r2, #16]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	4311      	orrs	r1, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	000186a0 	.word	0x000186a0
 8002be4:	001e847f 	.word	0x001e847f
 8002be8:	003d08ff 	.word	0x003d08ff
 8002bec:	431bde83 	.word	0x431bde83
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	460b      	mov	r3, r1
 8002c02:	817b      	strh	r3, [r7, #10]
 8002c04:	4613      	mov	r3, r2
 8002c06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c08:	f7ff fba8 	bl	800235c <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	f040 80e0 	bne.w	8002ddc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2319      	movs	r3, #25
 8002c22:	2201      	movs	r2, #1
 8002c24:	4970      	ldr	r1, [pc, #448]	@ (8002de8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f964 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0d3      	b.n	8002dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_I2C_Master_Transmit+0x50>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0cc      	b.n	8002dde <HAL_I2C_Master_Transmit+0x1ea>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d007      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2221      	movs	r2, #33	@ 0x21
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2210      	movs	r2, #16
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	893a      	ldrh	r2, [r7, #8]
 8002c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a50      	ldr	r2, [pc, #320]	@ (8002dec <HAL_I2C_Master_Transmit+0x1f8>)
 8002caa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f89c 	bl	8002df0 <I2C_MasterRequestWrite>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e08d      	b.n	8002dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cd8:	e066      	b.n	8002da8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fa22 	bl	8003128 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d107      	bne.n	8002d02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06b      	b.n	8002dde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d11b      	bne.n	8002d7c <HAL_I2C_Master_Transmit+0x188>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d017      	beq.n	8002d7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	6a39      	ldr	r1, [r7, #32]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fa19 	bl	80031b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d107      	bne.n	8002da4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e01a      	b.n	8002dde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d194      	bne.n	8002cda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	00100002 	.word	0x00100002
 8002dec:	ffff0000 	.word	0xffff0000

08002df0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d006      	beq.n	8002e1a <I2C_MasterRequestWrite+0x2a>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d003      	beq.n	8002e1a <I2C_MasterRequestWrite+0x2a>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e18:	d108      	bne.n	8002e2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e00b      	b.n	8002e44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	2b12      	cmp	r3, #18
 8002e32:	d107      	bne.n	8002e44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f84f 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00d      	beq.n	8002e78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e6a:	d103      	bne.n	8002e74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e035      	b.n	8002ee4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e80:	d108      	bne.n	8002e94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e82:	897b      	ldrh	r3, [r7, #10]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e90:	611a      	str	r2, [r3, #16]
 8002e92:	e01b      	b.n	8002ecc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e94:	897b      	ldrh	r3, [r7, #10]
 8002e96:	11db      	asrs	r3, r3, #7
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0306 	and.w	r3, r3, #6
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f063 030f 	orn	r3, r3, #15
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	490e      	ldr	r1, [pc, #56]	@ (8002eec <I2C_MasterRequestWrite+0xfc>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f898 	bl	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e010      	b.n	8002ee4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4907      	ldr	r1, [pc, #28]	@ (8002ef0 <I2C_MasterRequestWrite+0x100>)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f888 	bl	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	00010008 	.word	0x00010008
 8002ef0:	00010002 	.word	0x00010002

08002ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f04:	e048      	b.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d044      	beq.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7ff fa25 	bl	800235c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d139      	bne.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10d      	bne.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	e00c      	b.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	43da      	mvns	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d116      	bne.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e023      	b.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10d      	bne.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	e00c      	b.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d093      	beq.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ff6:	e071      	b.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003006:	d123      	bne.n	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003016:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e067      	b.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d041      	beq.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7ff f980 	bl	800235c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d136      	bne.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10c      	bne.n	8003092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4013      	ands	r3, r2
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e00b      	b.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	43da      	mvns	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e021      	b.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	0c1b      	lsrs	r3, r3, #16
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10c      	bne.n	8003100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e00b      	b.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f af6d 	bne.w	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003134:	e034      	b.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f886 	bl	8003248 <I2C_IsAcknowledgeFailed>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e034      	b.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d028      	beq.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7ff f905 	bl	800235c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11d      	bne.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316e:	2b80      	cmp	r3, #128	@ 0x80
 8003170:	d016      	beq.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b80      	cmp	r3, #128	@ 0x80
 80031ac:	d1c3      	bne.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c4:	e034      	b.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f83e 	bl	8003248 <I2C_IsAcknowledgeFailed>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e034      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d028      	beq.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031de:	f7ff f8bd 	bl	800235c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11d      	bne.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d016      	beq.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e007      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d1c3      	bne.n	80031c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325e:	d11b      	bne.n	8003298 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003268:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af02      	add	r7, sp, #8
 80032ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e108      	b.n	80034ca <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe feb0 	bl	8002038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2203      	movs	r2, #3
 80032dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e6:	d102      	bne.n	80032ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 fea8 	bl	8006048 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7c1a      	ldrb	r2, [r3, #16]
 8003300:	f88d 2000 	strb.w	r2, [sp]
 8003304:	3304      	adds	r3, #4
 8003306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003308:	f002 fe3a 	bl	8005f80 <USB_CoreInit>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0d5      	b.n	80034ca <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f002 fea0 	bl	800606a <USB_SetCurrentMode>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0c6      	b.n	80034ca <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e04a      	b.n	80033d8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3315      	adds	r3, #21
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3314      	adds	r3, #20
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	b298      	uxth	r0, r3
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	332e      	adds	r3, #46	@ 0x2e
 800337e:	4602      	mov	r2, r0
 8003380:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3318      	adds	r3, #24
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	331c      	adds	r3, #28
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3320      	adds	r3, #32
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3324      	adds	r3, #36	@ 0x24
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	3301      	adds	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	791b      	ldrb	r3, [r3, #4]
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3af      	bcc.n	8003342 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e044      	b.n	8003472 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	3301      	adds	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	791b      	ldrb	r3, [r3, #4]
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	429a      	cmp	r2, r3
 800347a:	d3b5      	bcc.n	80033e8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7c1a      	ldrb	r2, [r3, #16]
 8003484:	f88d 2000 	strb.w	r2, [sp]
 8003488:	3304      	adds	r3, #4
 800348a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348c:	f002 fe3a 	bl	8006104 <USB_DevInit>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e013      	b.n	80034ca <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7b1b      	ldrb	r3, [r3, #12]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d102      	bne.n	80034be <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f80a 	bl	80034d2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 fff5 	bl	80064b2 <USB_DevDisconnect>

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003504:	f043 0303 	orr.w	r3, r3, #3
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0cc      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003530:	4b68      	ldr	r3, [pc, #416]	@ (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d90c      	bls.n	8003558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b65      	ldr	r3, [pc, #404]	@ (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0b8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a58      	ldr	r2, [pc, #352]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800357a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003588:	4b53      	ldr	r3, [pc, #332]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a52      	ldr	r2, [pc, #328]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b50      	ldr	r3, [pc, #320]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	494d      	ldr	r1, [pc, #308]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d044      	beq.n	800363c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b47      	ldr	r3, [pc, #284]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d119      	bne.n	80035fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d003      	beq.n	80035da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	4b3f      	ldr	r3, [pc, #252]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e06f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	4b3b      	ldr	r3, [pc, #236]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e067      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	4b37      	ldr	r3, [pc, #220]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4934      	ldr	r1, [pc, #208]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800360c:	f7fe fea6 	bl	800235c <HAL_GetTick>
 8003610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	e00a      	b.n	800362a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fea2 	bl	800235c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e04f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	4b2b      	ldr	r3, [pc, #172]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 020c 	and.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	429a      	cmp	r2, r3
 800363a:	d1eb      	bne.n	8003614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800363c:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d20c      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b22      	ldr	r3, [pc, #136]	@ (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e032      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4916      	ldr	r1, [pc, #88]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368e:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a2:	f000 fb7f 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	490a      	ldr	r1, [pc, #40]	@ (80036dc <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	5ccb      	ldrb	r3, [r1, r3]
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fe06 	bl	80022d4 <HAL_InitTick>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00
 80036d8:	40023800 	.word	0x40023800
 80036dc:	08006f90 	.word	0x08006f90
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a9b      	lsrs	r3, r3, #10
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	@ (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	08006fa0 	.word	0x08006fa0

08003728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800372c:	f7ff ffdc 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	0b5b      	lsrs	r3, r3, #13
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4903      	ldr	r1, [pc, #12]	@ (800374c <HAL_RCC_GetPCLK2Freq+0x24>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	08006fa0 	.word	0x08006fa0

08003750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	@ 0x30
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d010      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003788:	4b6f      	ldr	r3, [pc, #444]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800378a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800378e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	496c      	ldr	r1, [pc, #432]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80037a6:	2301      	movs	r3, #1
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80037b6:	4b64      	ldr	r3, [pc, #400]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037bc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c4:	4960      	ldr	r1, [pc, #384]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80037d4:	2301      	movs	r3, #1
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d017      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037e4:	4b58      	ldr	r3, [pc, #352]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	4955      	ldr	r1, [pc, #340]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003802:	d101      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003804:	2301      	movs	r3, #1
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003810:	2301      	movs	r3, #1
 8003812:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d017      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003820:	4b49      	ldr	r3, [pc, #292]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003826:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382e:	4946      	ldr	r1, [pc, #280]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800383e:	d101      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003840:	2301      	movs	r3, #1
 8003842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800384c:	2301      	movs	r3, #1
 800384e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 808a 	beq.w	8003972 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	4b39      	ldr	r3, [pc, #228]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	4a38      	ldr	r2, [pc, #224]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	@ 0x40
 800386e:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800387a:	4b34      	ldr	r3, [pc, #208]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a33      	ldr	r2, [pc, #204]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003884:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003886:	f7fe fd69 	bl	800235c <HAL_GetTick>
 800388a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fe fd65 	bl	800235c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e278      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80038a0:	4b2a      	ldr	r3, [pc, #168]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ac:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b4:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02f      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d028      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038da:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80038e0:	4a19      	ldr	r2, [pc, #100]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d114      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fe fd33 	bl	800235c <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe fd2f 	bl	800235c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e240      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0ee      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003924:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003928:	d114      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800392a:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800393a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800393e:	4902      	ldr	r1, [pc, #8]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]
 8003944:	e00c      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
 8003950:	42470e40 	.word	0x42470e40
 8003954:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a49      	ldr	r2, [pc, #292]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800395a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800395e:	6093      	str	r3, [r2, #8]
 8003960:	4b47      	ldr	r3, [pc, #284]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003962:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	4944      	ldr	r1, [pc, #272]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800396e:	4313      	orrs	r3, r2
 8003970:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003984:	4b3f      	ldr	r3, [pc, #252]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003986:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003994:	4b3a      	ldr	r3, [pc, #232]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a2:	4937      	ldr	r1, [pc, #220]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039b6:	4b32      	ldr	r3, [pc, #200]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039bc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c4:	492e      	ldr	r1, [pc, #184]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d011      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039d8:	4b29      	ldr	r3, [pc, #164]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039de:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e6:	4926      	ldr	r1, [pc, #152]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039f6:	d101      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80039f8:	2301      	movs	r3, #1
 80039fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003a08:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	491a      	ldr	r1, [pc, #104]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d011      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a30:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a38:	4911      	ldr	r1, [pc, #68]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d005      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a5c:	f040 80ff 	bne.w	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a66:	f7fe fc79 	bl	800235c <HAL_GetTick>
 8003a6a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a6c:	e00e      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a6e:	f7fe fc75 	bl	800235c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d907      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e188      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a80:	40023800 	.word	0x40023800
 8003a84:	424711e0 	.word	0x424711e0
 8003a88:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ea      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d028      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d124      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ac0:	4b71      	ldr	r3, [pc, #452]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac6:	0c1b      	lsrs	r3, r3, #16
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	3301      	adds	r3, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	019b      	lsls	r3, r3, #6
 8003aea:	431a      	orrs	r2, r3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	3b01      	subs	r3, #1
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	431a      	orrs	r2, r3
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	071b      	lsls	r3, r3, #28
 8003b02:	4961      	ldr	r1, [pc, #388]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d035      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b34:	d130      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b36:	4b54      	ldr	r3, [pc, #336]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b48:	4b4f      	ldr	r3, [pc, #316]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4e:	0f1b      	lsrs	r3, r3, #28
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	019b      	lsls	r3, r3, #6
 8003b60:	431a      	orrs	r2, r3
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	3b01      	subs	r3, #1
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	431a      	orrs	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	071b      	lsls	r3, r3, #28
 8003b78:	4943      	ldr	r1, [pc, #268]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b80:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b86:	f023 021f 	bic.w	r2, r3, #31
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	493d      	ldr	r1, [pc, #244]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d029      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bac:	d124      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bae:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bc0:	4b31      	ldr	r3, [pc, #196]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc6:	0f1b      	lsrs	r3, r3, #28
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	019b      	lsls	r3, r3, #6
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	3b01      	subs	r3, #1
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	431a      	orrs	r2, r3
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	061b      	lsls	r3, r3, #24
 8003bea:	431a      	orrs	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	071b      	lsls	r3, r3, #28
 8003bf0:	4925      	ldr	r1, [pc, #148]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	019b      	lsls	r3, r3, #6
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	3b01      	subs	r3, #1
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	4917      	ldr	r1, [pc, #92]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c32:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fe fb90 	bl	800235c <HAL_GetTick>
 8003c3c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c40:	f7fe fb8c 	bl	800235c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e09f      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 8095 	bne.w	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c66:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fe fb76 	bl	800235c <HAL_GetTick>
 8003c70:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c72:	e00f      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c74:	f7fe fb72 	bl	800235c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d908      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e085      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	42470068 	.word	0x42470068
 8003c90:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c94:	4b41      	ldr	r3, [pc, #260]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ca0:	d0e8      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02b      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d127      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003cca:	4b34      	ldr	r3, [pc, #208]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	019b      	lsls	r3, r3, #6
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	3b01      	subs	r3, #1
 8003cee:	041b      	lsls	r3, r3, #16
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	4928      	ldr	r1, [pc, #160]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d00:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d06:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	4922      	ldr	r1, [pc, #136]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01d      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d2e:	d118      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d30:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	0e1b      	lsrs	r3, r3, #24
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	019b      	lsls	r3, r3, #6
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	3b01      	subs	r3, #1
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	4910      	ldr	r1, [pc, #64]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d62:	4b0f      	ldr	r3, [pc, #60]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe faf8 	bl	800235c <HAL_GetTick>
 8003d6c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d70:	f7fe faf4 	bl	800235c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e007      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d8e:	d1ef      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3730      	adds	r7, #48	@ 0x30
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	42470070 	.word	0x42470070

08003da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b0ae      	sub	sp, #184	@ 0xb8
 8003daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dca:	4bcb      	ldr	r3, [pc, #812]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	f200 8206 	bhi.w	80041e4 <HAL_RCC_GetSysClockFreq+0x440>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	080041e5 	.word	0x080041e5
 8003de8:	080041e5 	.word	0x080041e5
 8003dec:	080041e5 	.word	0x080041e5
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	080041e5 	.word	0x080041e5
 8003df8:	080041e5 	.word	0x080041e5
 8003dfc:	080041e5 	.word	0x080041e5
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	080041e5 	.word	0x080041e5
 8003e08:	080041e5 	.word	0x080041e5
 8003e0c:	080041e5 	.word	0x080041e5
 8003e10:	08004015 	.word	0x08004015
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4bb9      	ldr	r3, [pc, #740]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e1a:	e1e7      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e1c:	4bb8      	ldr	r3, [pc, #736]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e22:	e1e3      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e24:	4bb4      	ldr	r3, [pc, #720]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e30:	4bb1      	ldr	r3, [pc, #708]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d071      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3c:	4bae      	ldr	r3, [pc, #696]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e48:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e74:	0150      	lsls	r0, r2, #5
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	1a51      	subs	r1, r2, r1
 8003e7e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003e80:	4629      	mov	r1, r5
 8003e82:	eb63 0301 	sbc.w	r3, r3, r1
 8003e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003e94:	4649      	mov	r1, r9
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	4641      	mov	r1, r8
 8003e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	018a      	lsls	r2, r1, #6
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	1a51      	subs	r1, r2, r1
 8003ea6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8003eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	00cb      	lsls	r3, r1, #3
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	00ca      	lsls	r2, r1, #3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	460a      	mov	r2, r1
 8003eda:	eb42 0303 	adc.w	r3, r2, r3
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eec:	4629      	mov	r1, r5
 8003eee:	024b      	lsls	r3, r1, #9
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	024a      	lsls	r2, r1, #9
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f10:	f7fc fe14 	bl	8000b3c <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f1e:	e067      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f20:	4b75      	ldr	r3, [pc, #468]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	099b      	lsrs	r3, r3, #6
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f2c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003f42:	4622      	mov	r2, r4
 8003f44:	462b      	mov	r3, r5
 8003f46:	f04f 0000 	mov.w	r0, #0
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	0159      	lsls	r1, r3, #5
 8003f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f54:	0150      	lsls	r0, r2, #5
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	1a51      	subs	r1, r2, r1
 8003f5e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f60:	4629      	mov	r1, r5
 8003f62:	eb63 0301 	sbc.w	r3, r3, r1
 8003f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003f74:	4649      	mov	r1, r9
 8003f76:	018b      	lsls	r3, r1, #6
 8003f78:	4641      	mov	r1, r8
 8003f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f7e:	4641      	mov	r1, r8
 8003f80:	018a      	lsls	r2, r1, #6
 8003f82:	4641      	mov	r1, r8
 8003f84:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f88:	4649      	mov	r1, r9
 8003f8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa2:	4692      	mov	sl, r2
 8003fa4:	469b      	mov	fp, r3
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	eb1a 0303 	adds.w	r3, sl, r3
 8003fac:	623b      	str	r3, [r7, #32]
 8003fae:	462b      	mov	r3, r5
 8003fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	028b      	lsls	r3, r1, #10
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fcc:	4621      	mov	r1, r4
 8003fce:	028a      	lsls	r2, r1, #10
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fd8:	2200      	movs	r2, #0
 8003fda:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fdc:	677a      	str	r2, [r7, #116]	@ 0x74
 8003fde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003fe2:	f7fc fdab 	bl	8000b3c <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4613      	mov	r3, r2
 8003fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ff0:	4b41      	ldr	r3, [pc, #260]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004012:	e0eb      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004014:	4b38      	ldr	r3, [pc, #224]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800401c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004020:	4b35      	ldr	r3, [pc, #212]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d06b      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402c:	4b32      	ldr	r3, [pc, #200]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	2200      	movs	r2, #0
 8004034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004036:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004038:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004040:	2300      	movs	r3, #0
 8004042:	667b      	str	r3, [r7, #100]	@ 0x64
 8004044:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004048:	4622      	mov	r2, r4
 800404a:	462b      	mov	r3, r5
 800404c:	f04f 0000 	mov.w	r0, #0
 8004050:	f04f 0100 	mov.w	r1, #0
 8004054:	0159      	lsls	r1, r3, #5
 8004056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800405a:	0150      	lsls	r0, r2, #5
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4621      	mov	r1, r4
 8004062:	1a51      	subs	r1, r2, r1
 8004064:	61b9      	str	r1, [r7, #24]
 8004066:	4629      	mov	r1, r5
 8004068:	eb63 0301 	sbc.w	r3, r3, r1
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800407a:	4659      	mov	r1, fp
 800407c:	018b      	lsls	r3, r1, #6
 800407e:	4651      	mov	r1, sl
 8004080:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004084:	4651      	mov	r1, sl
 8004086:	018a      	lsls	r2, r1, #6
 8004088:	4651      	mov	r1, sl
 800408a:	ebb2 0801 	subs.w	r8, r2, r1
 800408e:	4659      	mov	r1, fp
 8004090:	eb63 0901 	sbc.w	r9, r3, r1
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040a8:	4690      	mov	r8, r2
 80040aa:	4699      	mov	r9, r3
 80040ac:	4623      	mov	r3, r4
 80040ae:	eb18 0303 	adds.w	r3, r8, r3
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	462b      	mov	r3, r5
 80040b6:	eb49 0303 	adc.w	r3, r9, r3
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80040c8:	4629      	mov	r1, r5
 80040ca:	024b      	lsls	r3, r1, #9
 80040cc:	4621      	mov	r1, r4
 80040ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040d2:	4621      	mov	r1, r4
 80040d4:	024a      	lsls	r2, r1, #9
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040de:	2200      	movs	r2, #0
 80040e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80040e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040e8:	f7fc fd28 	bl	8000b3c <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040f6:	e065      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x420>
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x458>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	4618      	mov	r0, r3
 800410e:	4611      	mov	r1, r2
 8004110:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004114:	653b      	str	r3, [r7, #80]	@ 0x50
 8004116:	2300      	movs	r3, #0
 8004118:	657b      	str	r3, [r7, #84]	@ 0x54
 800411a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800411e:	4642      	mov	r2, r8
 8004120:	464b      	mov	r3, r9
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	0159      	lsls	r1, r3, #5
 800412c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004130:	0150      	lsls	r0, r2, #5
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4641      	mov	r1, r8
 8004138:	1a51      	subs	r1, r2, r1
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	4649      	mov	r1, r9
 800413e:	eb63 0301 	sbc.w	r3, r3, r1
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004150:	4659      	mov	r1, fp
 8004152:	018b      	lsls	r3, r1, #6
 8004154:	4651      	mov	r1, sl
 8004156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800415a:	4651      	mov	r1, sl
 800415c:	018a      	lsls	r2, r1, #6
 800415e:	4651      	mov	r1, sl
 8004160:	1a54      	subs	r4, r2, r1
 8004162:	4659      	mov	r1, fp
 8004164:	eb63 0501 	sbc.w	r5, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	00eb      	lsls	r3, r5, #3
 8004172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004176:	00e2      	lsls	r2, r4, #3
 8004178:	4614      	mov	r4, r2
 800417a:	461d      	mov	r5, r3
 800417c:	4643      	mov	r3, r8
 800417e:	18e3      	adds	r3, r4, r3
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	464b      	mov	r3, r9
 8004184:	eb45 0303 	adc.w	r3, r5, r3
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004196:	4629      	mov	r1, r5
 8004198:	028b      	lsls	r3, r1, #10
 800419a:	4621      	mov	r1, r4
 800419c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a0:	4621      	mov	r1, r4
 80041a2:	028a      	lsls	r2, r1, #10
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ac:	2200      	movs	r2, #0
 80041ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80041b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041b6:	f7fc fcc1 	bl	8000b3c <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4613      	mov	r3, r2
 80041c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041c4:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x458>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0f1b      	lsrs	r3, r3, #28
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80041d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041e2:	e003      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_RCC_GetSysClockFreq+0x45c>)
 80041e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	37b8      	adds	r7, #184	@ 0xb8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	00f42400 	.word	0x00f42400

08004204 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e28d      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8083 	beq.w	800432a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004224:	4b94      	ldr	r3, [pc, #592]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b04      	cmp	r3, #4
 800422e:	d019      	beq.n	8004264 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004230:	4b91      	ldr	r3, [pc, #580]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 030c 	and.w	r3, r3, #12
        || \
 8004238:	2b08      	cmp	r3, #8
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800423c:	4b8e      	ldr	r3, [pc, #568]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004248:	d00c      	beq.n	8004264 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424a:	4b8b      	ldr	r3, [pc, #556]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d112      	bne.n	800427c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004256:	4b88      	ldr	r3, [pc, #544]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800425e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004262:	d10b      	bne.n	800427c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	4b84      	ldr	r3, [pc, #528]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d05b      	beq.n	8004328 <HAL_RCC_OscConfig+0x124>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d157      	bne.n	8004328 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e25a      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004284:	d106      	bne.n	8004294 <HAL_RCC_OscConfig+0x90>
 8004286:	4b7c      	ldr	r3, [pc, #496]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a7b      	ldr	r2, [pc, #492]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e01d      	b.n	80042d0 <HAL_RCC_OscConfig+0xcc>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800429c:	d10c      	bne.n	80042b8 <HAL_RCC_OscConfig+0xb4>
 800429e:	4b76      	ldr	r3, [pc, #472]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a75      	ldr	r2, [pc, #468]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b73      	ldr	r3, [pc, #460]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a72      	ldr	r2, [pc, #456]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_OscConfig+0xcc>
 80042b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe f840 	bl	800235c <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e0:	f7fe f83c 	bl	800235c <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b64      	cmp	r3, #100	@ 0x64
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e21f      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4b61      	ldr	r3, [pc, #388]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0xdc>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe f82c 	bl	800235c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7fe f828 	bl	800235c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	@ 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e20b      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	4b57      	ldr	r3, [pc, #348]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x104>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d06f      	beq.n	8004416 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004336:	4b50      	ldr	r3, [pc, #320]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b00      	cmp	r3, #0
 8004340:	d017      	beq.n	8004372 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004342:	4b4d      	ldr	r3, [pc, #308]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
        || \
 800434a:	2b08      	cmp	r3, #8
 800434c:	d105      	bne.n	800435a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800434e:	4b4a      	ldr	r3, [pc, #296]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435a:	4b47      	ldr	r3, [pc, #284]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d11c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004366:	4b44      	ldr	r3, [pc, #272]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	4b41      	ldr	r3, [pc, #260]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x186>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1d3      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4937      	ldr	r1, [pc, #220]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	e03a      	b.n	8004416 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a8:	4b34      	ldr	r3, [pc, #208]	@ (800447c <HAL_RCC_OscConfig+0x278>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd ffd5 	bl	800235c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fd ffd1 	bl	800235c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e1b4      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b28      	ldr	r3, [pc, #160]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4925      	ldr	r1, [pc, #148]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b24      	ldr	r3, [pc, #144]	@ (800447c <HAL_RCC_OscConfig+0x278>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd ffb4 	bl	800235c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fd ffb0 	bl	800235c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e193      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d036      	beq.n	8004490 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <HAL_RCC_OscConfig+0x27c>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd ff94 	bl	800235c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fd ff90 	bl	800235c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e173      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800444c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x234>
 8004456:	e01b      	b.n	8004490 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004458:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <HAL_RCC_OscConfig+0x27c>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445e:	f7fd ff7d 	bl	800235c <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	e00e      	b.n	8004484 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004466:	f7fd ff79 	bl	800235c <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d907      	bls.n	8004484 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e15c      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
 8004478:	40023800 	.word	0x40023800
 800447c:	42470000 	.word	0x42470000
 8004480:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	4b8a      	ldr	r3, [pc, #552]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ea      	bne.n	8004466 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8097 	beq.w	80045cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a2:	4b83      	ldr	r3, [pc, #524]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	4b7f      	ldr	r3, [pc, #508]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	4a7e      	ldr	r2, [pc, #504]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044be:	4b7c      	ldr	r3, [pc, #496]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ca:	2301      	movs	r3, #1
 80044cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	4b79      	ldr	r3, [pc, #484]	@ (80046b4 <HAL_RCC_OscConfig+0x4b0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d118      	bne.n	800450c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044da:	4b76      	ldr	r3, [pc, #472]	@ (80046b4 <HAL_RCC_OscConfig+0x4b0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a75      	ldr	r2, [pc, #468]	@ (80046b4 <HAL_RCC_OscConfig+0x4b0>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e6:	f7fd ff39 	bl	800235c <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ee:	f7fd ff35 	bl	800235c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e118      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	4b6c      	ldr	r3, [pc, #432]	@ (80046b4 <HAL_RCC_OscConfig+0x4b0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d106      	bne.n	8004522 <HAL_RCC_OscConfig+0x31e>
 8004514:	4b66      	ldr	r3, [pc, #408]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004518:	4a65      	ldr	r2, [pc, #404]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004520:	e01c      	b.n	800455c <HAL_RCC_OscConfig+0x358>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b05      	cmp	r3, #5
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0x340>
 800452a:	4b61      	ldr	r3, [pc, #388]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	4a60      	ldr	r2, [pc, #384]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	6713      	str	r3, [r2, #112]	@ 0x70
 8004536:	4b5e      	ldr	r3, [pc, #376]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	4a5d      	ldr	r2, [pc, #372]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6713      	str	r3, [r2, #112]	@ 0x70
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0x358>
 8004544:	4b5a      	ldr	r3, [pc, #360]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004548:	4a59      	ldr	r2, [pc, #356]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004550:	4b57      	ldr	r3, [pc, #348]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004554:	4a56      	ldr	r2, [pc, #344]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d015      	beq.n	8004590 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fd fefa 	bl	800235c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fd fef6 	bl	800235c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0d7      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	4b4b      	ldr	r3, [pc, #300]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ee      	beq.n	800456c <HAL_RCC_OscConfig+0x368>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fd fee4 	bl	800235c <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fd fee0 	bl	800235c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0c1      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ae:	4b40      	ldr	r3, [pc, #256]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ee      	bne.n	8004598 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c0:	4b3b      	ldr	r3, [pc, #236]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	4a3a      	ldr	r2, [pc, #232]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80045c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80ad 	beq.w	8004730 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d6:	4b36      	ldr	r3, [pc, #216]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d060      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d145      	bne.n	8004676 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ea:	4b33      	ldr	r3, [pc, #204]	@ (80046b8 <HAL_RCC_OscConfig+0x4b4>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fd feb4 	bl	800235c <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd feb0 	bl	800235c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e093      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	4b29      	ldr	r3, [pc, #164]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	3b01      	subs	r3, #1
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	071b      	lsls	r3, r3, #28
 8004642:	491b      	ldr	r1, [pc, #108]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004648:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <HAL_RCC_OscConfig+0x4b4>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fd fe85 	bl	800235c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004656:	f7fd fe81 	bl	800235c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e064      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004668:	4b11      	ldr	r3, [pc, #68]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x452>
 8004674:	e05c      	b.n	8004730 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <HAL_RCC_OscConfig+0x4b4>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fd fe6e 	bl	800235c <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7fd fe6a 	bl	800235c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e04d      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x480>
 80046a2:	e045      	b.n	8004730 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e040      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40007000 	.word	0x40007000
 80046b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046bc:	4b1f      	ldr	r3, [pc, #124]	@ (800473c <HAL_RCC_OscConfig+0x538>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d030      	beq.n	800472c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d129      	bne.n	800472c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d122      	bne.n	800472c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d119      	bne.n	800472c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	3b01      	subs	r3, #1
 8004706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d10f      	bne.n	800472c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d107      	bne.n	800472c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004726:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800

08004740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e041      	b.n	80047d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fd fbf6 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fccc 	bl	800511c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e04e      	b.n	8004896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d022      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004822:	d01d      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1f      	ldr	r2, [pc, #124]	@ (80048a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d018      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1e      	ldr	r2, [pc, #120]	@ (80048ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1c      	ldr	r2, [pc, #112]	@ (80048b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <HAL_TIM_Base_Start_IT+0xdc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d010      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	e007      	b.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40001800 	.word	0x40001800

080048c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e041      	b.n	8004956 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fac8 	bl	8001e7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 fc0c 	bl	800511c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <HAL_TIM_IC_Start_IT+0x1e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e013      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x46>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d104      	bne.n	800498e <HAL_TIM_IC_Start_IT+0x2e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800498a:	b2db      	uxtb	r3, r3
 800498c:	e00b      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x46>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d104      	bne.n	800499e <HAL_TIM_IC_Start_IT+0x3e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800499a:	b2db      	uxtb	r3, r3
 800499c:	e003      	b.n	80049a6 <HAL_TIM_IC_Start_IT+0x46>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_IC_Start_IT+0x58>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e013      	b.n	80049e0 <HAL_TIM_IC_Start_IT+0x80>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d104      	bne.n	80049c8 <HAL_TIM_IC_Start_IT+0x68>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e00b      	b.n	80049e0 <HAL_TIM_IC_Start_IT+0x80>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d104      	bne.n	80049d8 <HAL_TIM_IC_Start_IT+0x78>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e003      	b.n	80049e0 <HAL_TIM_IC_Start_IT+0x80>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049e2:	7bbb      	ldrb	r3, [r7, #14]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d102      	bne.n	80049ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049e8:	7b7b      	ldrb	r3, [r7, #13]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d001      	beq.n	80049f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0cc      	b.n	8004b8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <HAL_TIM_IC_Start_IT+0xa2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a00:	e013      	b.n	8004a2a <HAL_TIM_IC_Start_IT+0xca>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_IC_Start_IT+0xb2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a10:	e00b      	b.n	8004a2a <HAL_TIM_IC_Start_IT+0xca>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_IC_Start_IT+0xc2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a20:	e003      	b.n	8004a2a <HAL_TIM_IC_Start_IT+0xca>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IC_Start_IT+0xda>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a38:	e013      	b.n	8004a62 <HAL_TIM_IC_Start_IT+0x102>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_IC_Start_IT+0xea>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a48:	e00b      	b.n	8004a62 <HAL_TIM_IC_Start_IT+0x102>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_IC_Start_IT+0xfa>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a58:	e003      	b.n	8004a62 <HAL_TIM_IC_Start_IT+0x102>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d841      	bhi.n	8004aec <HAL_TIM_IC_Start_IT+0x18c>
 8004a68:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <HAL_TIM_IC_Start_IT+0x110>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004aa5 	.word	0x08004aa5
 8004a74:	08004aed 	.word	0x08004aed
 8004a78:	08004aed 	.word	0x08004aed
 8004a7c:	08004aed 	.word	0x08004aed
 8004a80:	08004ab7 	.word	0x08004ab7
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004aed 	.word	0x08004aed
 8004a8c:	08004aed 	.word	0x08004aed
 8004a90:	08004ac9 	.word	0x08004ac9
 8004a94:	08004aed 	.word	0x08004aed
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004aed 	.word	0x08004aed
 8004aa0:	08004adb 	.word	0x08004adb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0202 	orr.w	r2, r2, #2
 8004ab2:	60da      	str	r2, [r3, #12]
      break;
 8004ab4:	e01d      	b.n	8004af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0204 	orr.w	r2, r2, #4
 8004ac4:	60da      	str	r2, [r3, #12]
      break;
 8004ac6:	e014      	b.n	8004af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0208 	orr.w	r2, r2, #8
 8004ad6:	60da      	str	r2, [r3, #12]
      break;
 8004ad8:	e00b      	b.n	8004af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0210 	orr.w	r2, r2, #16
 8004ae8:	60da      	str	r2, [r3, #12]
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d148      	bne.n	8004b8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2201      	movs	r2, #1
 8004afe:	6839      	ldr	r1, [r7, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fd7b 	bl	80055fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a22      	ldr	r2, [pc, #136]	@ (8004b94 <HAL_TIM_IC_Start_IT+0x234>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b18:	d01d      	beq.n	8004b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b98 <HAL_TIM_IC_Start_IT+0x238>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d018      	beq.n	8004b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1c      	ldr	r2, [pc, #112]	@ (8004b9c <HAL_TIM_IC_Start_IT+0x23c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba0 <HAL_TIM_IC_Start_IT+0x240>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ba4 <HAL_TIM_IC_Start_IT+0x244>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a18      	ldr	r2, [pc, #96]	@ (8004ba8 <HAL_TIM_IC_Start_IT+0x248>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <HAL_TIM_IC_Start_IT+0x24c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b06      	cmp	r3, #6
 8004b66:	d010      	beq.n	8004b8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b78:	e007      	b.n	8004b8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40010400 	.word	0x40010400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40001800 	.word	0x40001800

08004bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0202 	mvn.w	r2, #2
 8004be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc fa92 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa6c 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa73 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0204 	mvn.w	r2, #4
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fa6c 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fa46 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fa4d 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0208 	mvn.w	r2, #8
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2204      	movs	r2, #4
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fa46 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa20 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fa27 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0210 	mvn.w	r2, #16
 8004cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2208      	movs	r2, #8
 8004cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc fa20 	bl	8001124 <HAL_TIM_IC_CaptureCallback>
 8004ce4:	e005      	b.n	8004cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f9fa 	bl	80050e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa01 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0201 	mvn.w	r2, #1
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc f9e4 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fd0a 	bl	8005754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9d2 	bl	8005108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0220 	mvn.w	r2, #32
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fcdc 	bl	8005740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_IC_ConfigChannel+0x1e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e088      	b.n	8004ec0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004dcc:	f000 fa52 	bl	8005274 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 020c 	bic.w	r2, r2, #12
 8004dde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	619a      	str	r2, [r3, #24]
 8004df2:	e060      	b.n	8004eb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d11c      	bne.n	8004e34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004e0a:	f000 fad6 	bl	80053ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6999      	ldr	r1, [r3, #24]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	021a      	lsls	r2, r3, #8
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	619a      	str	r2, [r3, #24]
 8004e32:	e040      	b.n	8004eb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d11b      	bne.n	8004e72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004e4a:	f000 fb23 	bl	8005494 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 020c 	bic.w	r2, r2, #12
 8004e5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	61da      	str	r2, [r3, #28]
 8004e70:	e021      	b.n	8004eb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d11c      	bne.n	8004eb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004e88:	f000 fb40 	bl	800550c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69d9      	ldr	r1, [r3, #28]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
 8004eb0:	e001      	b.n	8004eb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0b4      	b.n	800504e <HAL_TIM_ConfigClockSource+0x186>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f1c:	d03e      	beq.n	8004f9c <HAL_TIM_ConfigClockSource+0xd4>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f22:	f200 8087 	bhi.w	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2a:	f000 8086 	beq.w	800503a <HAL_TIM_ConfigClockSource+0x172>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f32:	d87f      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b70      	cmp	r3, #112	@ 0x70
 8004f36:	d01a      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0xa6>
 8004f38:	2b70      	cmp	r3, #112	@ 0x70
 8004f3a:	d87b      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b60      	cmp	r3, #96	@ 0x60
 8004f3e:	d050      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x11a>
 8004f40:	2b60      	cmp	r3, #96	@ 0x60
 8004f42:	d877      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b50      	cmp	r3, #80	@ 0x50
 8004f46:	d03c      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f48:	2b50      	cmp	r3, #80	@ 0x50
 8004f4a:	d873      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b40      	cmp	r3, #64	@ 0x40
 8004f4e:	d058      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x13a>
 8004f50:	2b40      	cmp	r3, #64	@ 0x40
 8004f52:	d86f      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b30      	cmp	r3, #48	@ 0x30
 8004f56:	d064      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d86b      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d060      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d867      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d05c      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d05a      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	e062      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f7e:	f000 fb1d 	bl	80055bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	609a      	str	r2, [r3, #8]
      break;
 8004f9a:	e04f      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fac:	f000 fb06 	bl	80055bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fbe:	609a      	str	r2, [r3, #8]
      break;
 8004fc0:	e03c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 f9c4 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2150      	movs	r1, #80	@ 0x50
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fad3 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e02c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 fa20 	bl	8005434 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2160      	movs	r1, #96	@ 0x60
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fac3 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 8005000:	e01c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	461a      	mov	r2, r3
 8005010:	f000 f9a4 	bl	800535c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2140      	movs	r1, #64	@ 0x40
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fab3 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 8005020:	e00c      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f000 faaa 	bl	8005586 <TIM_ITRx_SetConfig>
      break;
 8005032:	e003      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
      break;
 8005038:	e000      	b.n	800503c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800503a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d831      	bhi.n	80050d0 <HAL_TIM_ReadCapturedValue+0x78>
 800506c:	a201      	add	r2, pc, #4	@ (adr r2, 8005074 <HAL_TIM_ReadCapturedValue+0x1c>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	080050a9 	.word	0x080050a9
 8005078:	080050d1 	.word	0x080050d1
 800507c:	080050d1 	.word	0x080050d1
 8005080:	080050d1 	.word	0x080050d1
 8005084:	080050b3 	.word	0x080050b3
 8005088:	080050d1 	.word	0x080050d1
 800508c:	080050d1 	.word	0x080050d1
 8005090:	080050d1 	.word	0x080050d1
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050d1 	.word	0x080050d1
 800509c:	080050d1 	.word	0x080050d1
 80050a0:	080050d1 	.word	0x080050d1
 80050a4:	080050c7 	.word	0x080050c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ae:	60fb      	str	r3, [r7, #12]

      break;
 80050b0:	e00f      	b.n	80050d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	60fb      	str	r3, [r7, #12]

      break;
 80050ba:	e00a      	b.n	80050d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	60fb      	str	r3, [r7, #12]

      break;
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	60fb      	str	r3, [r7, #12]

      break;
 80050ce:	e000      	b.n	80050d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80050d0:	bf00      	nop
  }

  return tmpreg;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a46      	ldr	r2, [pc, #280]	@ (8005248 <TIM_Base_SetConfig+0x12c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513a:	d00f      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a43      	ldr	r2, [pc, #268]	@ (800524c <TIM_Base_SetConfig+0x130>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00b      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a42      	ldr	r2, [pc, #264]	@ (8005250 <TIM_Base_SetConfig+0x134>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d007      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a41      	ldr	r2, [pc, #260]	@ (8005254 <TIM_Base_SetConfig+0x138>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a40      	ldr	r2, [pc, #256]	@ (8005258 <TIM_Base_SetConfig+0x13c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d108      	bne.n	800516e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a35      	ldr	r2, [pc, #212]	@ (8005248 <TIM_Base_SetConfig+0x12c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d02b      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517c:	d027      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a32      	ldr	r2, [pc, #200]	@ (800524c <TIM_Base_SetConfig+0x130>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d023      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a31      	ldr	r2, [pc, #196]	@ (8005250 <TIM_Base_SetConfig+0x134>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01f      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a30      	ldr	r2, [pc, #192]	@ (8005254 <TIM_Base_SetConfig+0x138>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01b      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2f      	ldr	r2, [pc, #188]	@ (8005258 <TIM_Base_SetConfig+0x13c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d017      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2e      	ldr	r2, [pc, #184]	@ (800525c <TIM_Base_SetConfig+0x140>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <TIM_Base_SetConfig+0x144>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00f      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005264 <TIM_Base_SetConfig+0x148>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00b      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <TIM_Base_SetConfig+0x14c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2a      	ldr	r2, [pc, #168]	@ (800526c <TIM_Base_SetConfig+0x150>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a29      	ldr	r2, [pc, #164]	@ (8005270 <TIM_Base_SetConfig+0x154>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d108      	bne.n	80051e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a10      	ldr	r2, [pc, #64]	@ (8005248 <TIM_Base_SetConfig+0x12c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a12      	ldr	r2, [pc, #72]	@ (8005258 <TIM_Base_SetConfig+0x13c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d103      	bne.n	800521c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]
  }
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40010400 	.word	0x40010400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800
 8005268:	40001800 	.word	0x40001800
 800526c:	40001c00 	.word	0x40001c00
 8005270:	40002000 	.word	0x40002000

08005274 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f023 0201 	bic.w	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a28      	ldr	r2, [pc, #160]	@ (8005340 <TIM_TI1_SetConfig+0xcc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01b      	beq.n	80052da <TIM_TI1_SetConfig+0x66>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a8:	d017      	beq.n	80052da <TIM_TI1_SetConfig+0x66>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a25      	ldr	r2, [pc, #148]	@ (8005344 <TIM_TI1_SetConfig+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <TIM_TI1_SetConfig+0x66>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4a24      	ldr	r2, [pc, #144]	@ (8005348 <TIM_TI1_SetConfig+0xd4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00f      	beq.n	80052da <TIM_TI1_SetConfig+0x66>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4a23      	ldr	r2, [pc, #140]	@ (800534c <TIM_TI1_SetConfig+0xd8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_TI1_SetConfig+0x66>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a22      	ldr	r2, [pc, #136]	@ (8005350 <TIM_TI1_SetConfig+0xdc>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_TI1_SetConfig+0x66>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4a21      	ldr	r2, [pc, #132]	@ (8005354 <TIM_TI1_SetConfig+0xe0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_TI1_SetConfig+0x66>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a20      	ldr	r2, [pc, #128]	@ (8005358 <TIM_TI1_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <TIM_TI1_SetConfig+0x6a>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <TIM_TI1_SetConfig+0x6c>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0303 	bic.w	r3, r3, #3
 80052ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e003      	b.n	80052fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	b2db      	uxtb	r3, r3
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f023 030a 	bic.w	r3, r3, #10
 8005318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f003 030a 	and.w	r3, r3, #10
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40001800 	.word	0x40001800

0800535c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f023 0201 	bic.w	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f023 030a 	bic.w	r3, r3, #10
 8005398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b087      	sub	sp, #28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0210 	bic.w	r2, r3, #16
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	031b      	lsls	r3, r3, #12
 80053fe:	b29b      	uxth	r3, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800540c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	621a      	str	r2, [r3, #32]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0210 	bic.w	r2, r3, #16
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800545e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	031b      	lsls	r3, r3, #12
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005470:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f023 0303 	bic.w	r3, r3, #3
 80054c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005538:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	031b      	lsls	r3, r3, #12
 8005550:	b29b      	uxth	r3, r3
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	031b      	lsls	r3, r3, #12
 8005564:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f043 0307 	orr.w	r3, r3, #7
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	431a      	orrs	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2201      	movs	r2, #1
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	43db      	mvns	r3, r3
 800561e:	401a      	ands	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	fa01 f303 	lsl.w	r3, r1, r3
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800565c:	2302      	movs	r3, #2
 800565e:	e05a      	b.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a21      	ldr	r2, [pc, #132]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ac:	d01d      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a17      	ldr	r2, [pc, #92]	@ (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a15      	ldr	r2, [pc, #84]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10c      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40010400 	.word	0x40010400
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e042      	b.n	8005800 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc fc0a 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	@ 0x24
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f973 	bl	8005a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b20      	cmp	r3, #32
 8005826:	d175      	bne.n	8005914 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_UART_Transmit+0x2c>
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e06e      	b.n	8005916 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2221      	movs	r2, #33	@ 0x21
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005846:	f7fc fd89 	bl	800235c <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005860:	d108      	bne.n	8005874 <HAL_UART_Transmit+0x6c>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e003      	b.n	800587c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800587c:	e02e      	b.n	80058dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2180      	movs	r1, #128	@ 0x80
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f848 	bl	800591e <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e03a      	b.n	8005916 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	3302      	adds	r3, #2
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e007      	b.n	80058ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1cb      	bne.n	800587e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2140      	movs	r1, #64	@ 0x40
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f814 	bl	800591e <UART_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e006      	b.n	8005916 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	e000      	b.n	8005916 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005914:	2302      	movs	r3, #2
  }
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b086      	sub	sp, #24
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	603b      	str	r3, [r7, #0]
 800592a:	4613      	mov	r3, r2
 800592c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592e:	e03b      	b.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d037      	beq.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005938:	f7fc fd10 	bl	800235c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	6a3a      	ldr	r2, [r7, #32]
 8005944:	429a      	cmp	r2, r3
 8005946:	d302      	bcc.n	800594e <UART_WaitOnFlagUntilTimeout+0x30>
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e03a      	b.n	80059c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d023      	beq.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b80      	cmp	r3, #128	@ 0x80
 8005964:	d020      	beq.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b40      	cmp	r3, #64	@ 0x40
 800596a:	d01d      	beq.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b08      	cmp	r3, #8
 8005978:	d116      	bne.n	80059a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f81d 	bl	80059d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2208      	movs	r2, #8
 800599a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e00f      	b.n	80059c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d0b4      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b095      	sub	sp, #84	@ 0x54
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d119      	bne.n	8005a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f023 0310 	bic.w	r3, r3, #16
 8005a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a68:	61ba      	str	r2, [r7, #24]
 8005a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6979      	ldr	r1, [r7, #20]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	613b      	str	r3, [r7, #16]
   return(result);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e5      	bne.n	8005a48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a8a:	bf00      	nop
 8005a8c:	3754      	adds	r7, #84	@ 0x54
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
	...

08005a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b0c0      	sub	sp, #256	@ 0x100
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	68d9      	ldr	r1, [r3, #12]
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	ea40 0301 	orr.w	r3, r0, r1
 8005ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005af0:	f021 010c 	bic.w	r1, r1, #12
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005afe:	430b      	orrs	r3, r1
 8005b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	6999      	ldr	r1, [r3, #24]
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	ea40 0301 	orr.w	r3, r0, r1
 8005b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b8f      	ldr	r3, [pc, #572]	@ (8005d64 <UART_SetConfig+0x2cc>)
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d005      	beq.n	8005b38 <UART_SetConfig+0xa0>
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b8d      	ldr	r3, [pc, #564]	@ (8005d68 <UART_SetConfig+0x2d0>)
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d104      	bne.n	8005b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fd fdf6 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b40:	e003      	b.n	8005b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7fd fddd 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8005b46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b54:	f040 810c 	bne.w	8005d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	1891      	adds	r1, r2, r2
 8005b70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b72:	415b      	adcs	r3, r3
 8005b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	eb12 0801 	adds.w	r8, r2, r1
 8005b80:	4629      	mov	r1, r5
 8005b82:	eb43 0901 	adc.w	r9, r3, r1
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b9a:	4690      	mov	r8, r2
 8005b9c:	4699      	mov	r9, r3
 8005b9e:	4623      	mov	r3, r4
 8005ba0:	eb18 0303 	adds.w	r3, r8, r3
 8005ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ba8:	462b      	mov	r3, r5
 8005baa:	eb49 0303 	adc.w	r3, r9, r3
 8005bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	18db      	adds	r3, r3, r3
 8005bca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bcc:	4613      	mov	r3, r2
 8005bce:	eb42 0303 	adc.w	r3, r2, r3
 8005bd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bdc:	f7fa ffae 	bl	8000b3c <__aeabi_uldivmod>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4b61      	ldr	r3, [pc, #388]	@ (8005d6c <UART_SetConfig+0x2d4>)
 8005be6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	011c      	lsls	r4, r3, #4
 8005bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c00:	4642      	mov	r2, r8
 8005c02:	464b      	mov	r3, r9
 8005c04:	1891      	adds	r1, r2, r2
 8005c06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c08:	415b      	adcs	r3, r3
 8005c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c10:	4641      	mov	r1, r8
 8005c12:	eb12 0a01 	adds.w	sl, r2, r1
 8005c16:	4649      	mov	r1, r9
 8005c18:	eb43 0b01 	adc.w	fp, r3, r1
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c30:	4692      	mov	sl, r2
 8005c32:	469b      	mov	fp, r3
 8005c34:	4643      	mov	r3, r8
 8005c36:	eb1a 0303 	adds.w	r3, sl, r3
 8005c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	eb4b 0303 	adc.w	r3, fp, r3
 8005c44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	18db      	adds	r3, r3, r3
 8005c60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c62:	4613      	mov	r3, r2
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c72:	f7fa ff63 	bl	8000b3c <__aeabi_uldivmod>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d6c <UART_SetConfig+0x2d4>)
 8005c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2264      	movs	r2, #100	@ 0x64
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	1acb      	subs	r3, r1, r3
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c92:	4b36      	ldr	r3, [pc, #216]	@ (8005d6c <UART_SetConfig+0x2d4>)
 8005c94:	fba3 2302 	umull	r2, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ca0:	441c      	add	r4, r3
 8005ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	1891      	adds	r1, r2, r2
 8005cba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cbc:	415b      	adcs	r3, r3
 8005cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	1851      	adds	r1, r2, r1
 8005cc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cca:	4649      	mov	r1, r9
 8005ccc:	414b      	adcs	r3, r1
 8005cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cdc:	4659      	mov	r1, fp
 8005cde:	00cb      	lsls	r3, r1, #3
 8005ce0:	4651      	mov	r1, sl
 8005ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ce6:	4651      	mov	r1, sl
 8005ce8:	00ca      	lsls	r2, r1, #3
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	189b      	adds	r3, r3, r2
 8005cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	eb42 0303 	adc.w	r3, r2, r3
 8005d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d18:	460b      	mov	r3, r1
 8005d1a:	18db      	adds	r3, r3, r3
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1e:	4613      	mov	r3, r2
 8005d20:	eb42 0303 	adc.w	r3, r2, r3
 8005d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d2e:	f7fa ff05 	bl	8000b3c <__aeabi_uldivmod>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <UART_SetConfig+0x2d4>)
 8005d38:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	2164      	movs	r1, #100	@ 0x64
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	3332      	adds	r3, #50	@ 0x32
 8005d4a:	4a08      	ldr	r2, [pc, #32]	@ (8005d6c <UART_SetConfig+0x2d4>)
 8005d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f003 0207 	and.w	r2, r3, #7
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4422      	add	r2, r4
 8005d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d60:	e106      	b.n	8005f70 <UART_SetConfig+0x4d8>
 8005d62:	bf00      	nop
 8005d64:	40011000 	.word	0x40011000
 8005d68:	40011400 	.word	0x40011400
 8005d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d82:	4642      	mov	r2, r8
 8005d84:	464b      	mov	r3, r9
 8005d86:	1891      	adds	r1, r2, r2
 8005d88:	6239      	str	r1, [r7, #32]
 8005d8a:	415b      	adcs	r3, r3
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d92:	4641      	mov	r1, r8
 8005d94:	1854      	adds	r4, r2, r1
 8005d96:	4649      	mov	r1, r9
 8005d98:	eb43 0501 	adc.w	r5, r3, r1
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	00eb      	lsls	r3, r5, #3
 8005da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005daa:	00e2      	lsls	r2, r4, #3
 8005dac:	4614      	mov	r4, r2
 8005dae:	461d      	mov	r5, r3
 8005db0:	4643      	mov	r3, r8
 8005db2:	18e3      	adds	r3, r4, r3
 8005db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005db8:	464b      	mov	r3, r9
 8005dba:	eb45 0303 	adc.w	r3, r5, r3
 8005dbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dde:	4629      	mov	r1, r5
 8005de0:	008b      	lsls	r3, r1, #2
 8005de2:	4621      	mov	r1, r4
 8005de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de8:	4621      	mov	r1, r4
 8005dea:	008a      	lsls	r2, r1, #2
 8005dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005df0:	f7fa fea4 	bl	8000b3c <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4b60      	ldr	r3, [pc, #384]	@ (8005f7c <UART_SetConfig+0x4e4>)
 8005dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	011c      	lsls	r4, r3, #4
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	1891      	adds	r1, r2, r2
 8005e1a:	61b9      	str	r1, [r7, #24]
 8005e1c:	415b      	adcs	r3, r3
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e24:	4641      	mov	r1, r8
 8005e26:	1851      	adds	r1, r2, r1
 8005e28:	6139      	str	r1, [r7, #16]
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	414b      	adcs	r3, r1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	00cb      	lsls	r3, r1, #3
 8005e40:	4651      	mov	r1, sl
 8005e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e46:	4651      	mov	r1, sl
 8005e48:	00ca      	lsls	r2, r1, #3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	4642      	mov	r2, r8
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e58:	464b      	mov	r3, r9
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	eb42 0303 	adc.w	r3, r2, r3
 8005e60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	008b      	lsls	r3, r1, #2
 8005e80:	4641      	mov	r1, r8
 8005e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e86:	4641      	mov	r1, r8
 8005e88:	008a      	lsls	r2, r1, #2
 8005e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e8e:	f7fa fe55 	bl	8000b3c <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	4b38      	ldr	r3, [pc, #224]	@ (8005f7c <UART_SetConfig+0x4e4>)
 8005e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2264      	movs	r2, #100	@ 0x64
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	1acb      	subs	r3, r1, r3
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	3332      	adds	r3, #50	@ 0x32
 8005eac:	4a33      	ldr	r2, [pc, #204]	@ (8005f7c <UART_SetConfig+0x4e4>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eb8:	441c      	add	r4, r3
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ec2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ec4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	1891      	adds	r1, r2, r2
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	415b      	adcs	r3, r3
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ed8:	4641      	mov	r1, r8
 8005eda:	1851      	adds	r1, r2, r1
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	4649      	mov	r1, r9
 8005ee0:	414b      	adcs	r3, r1
 8005ee2:	607b      	str	r3, [r7, #4]
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	00cb      	lsls	r3, r1, #3
 8005ef4:	4651      	mov	r1, sl
 8005ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005efa:	4651      	mov	r1, sl
 8005efc:	00ca      	lsls	r2, r1, #3
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	4642      	mov	r2, r8
 8005f06:	189b      	adds	r3, r3, r2
 8005f08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	460a      	mov	r2, r1
 8005f0e:	eb42 0303 	adc.w	r3, r2, r3
 8005f12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	008b      	lsls	r3, r1, #2
 8005f30:	4641      	mov	r1, r8
 8005f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f36:	4641      	mov	r1, r8
 8005f38:	008a      	lsls	r2, r1, #2
 8005f3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f3e:	f7fa fdfd 	bl	8000b3c <__aeabi_uldivmod>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4b0d      	ldr	r3, [pc, #52]	@ (8005f7c <UART_SetConfig+0x4e4>)
 8005f48:	fba3 1302 	umull	r1, r3, r3, r2
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	2164      	movs	r1, #100	@ 0x64
 8005f50:	fb01 f303 	mul.w	r3, r1, r3
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	3332      	adds	r3, #50	@ 0x32
 8005f5a:	4a08      	ldr	r2, [pc, #32]	@ (8005f7c <UART_SetConfig+0x4e4>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	f003 020f 	and.w	r2, r3, #15
 8005f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4422      	add	r2, r4
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f7c:	51eb851f 	.word	0x51eb851f

08005f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f80:	b084      	sub	sp, #16
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	f107 001c 	add.w	r0, r7, #28
 8005f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d123      	bne.n	8005fe2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d105      	bne.n	8005fd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa9a 	bl	8006510 <USB_CoreReset>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	e01b      	b.n	800601a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa8e 	bl	8006510 <USB_CoreReset>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ff8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	639a      	str	r2, [r3, #56]	@ 0x38
 800600c:	e005      	b.n	800601a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800601a:	7fbb      	ldrb	r3, [r7, #30]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d10b      	bne.n	8006038 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f043 0206 	orr.w	r2, r3, #6
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006044:	b004      	add	sp, #16
 8006046:	4770      	bx	lr

08006048 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f023 0201 	bic.w	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d115      	bne.n	80060b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006098:	200a      	movs	r0, #10
 800609a:	f7fc f96b 	bl	8002374 <HAL_Delay>
      ms += 10U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	330a      	adds	r3, #10
 80060a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fa25 	bl	80064f4 <USB_GetMode>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d01e      	beq.n	80060ee <USB_SetCurrentMode+0x84>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80060b4:	d9f0      	bls.n	8006098 <USB_SetCurrentMode+0x2e>
 80060b6:	e01a      	b.n	80060ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d115      	bne.n	80060ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060ca:	200a      	movs	r0, #10
 80060cc:	f7fc f952 	bl	8002374 <HAL_Delay>
      ms += 10U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	330a      	adds	r3, #10
 80060d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa0c 	bl	80064f4 <USB_GetMode>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <USB_SetCurrentMode+0x84>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80060e6:	d9f0      	bls.n	80060ca <USB_SetCurrentMode+0x60>
 80060e8:	e001      	b.n	80060ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e005      	b.n	80060fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80060f2:	d101      	bne.n	80060f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006104:	b084      	sub	sp, #16
 8006106:	b580      	push	{r7, lr}
 8006108:	b086      	sub	sp, #24
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800611e:	2300      	movs	r3, #0
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e009      	b.n	8006138 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	3340      	adds	r3, #64	@ 0x40
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	2200      	movs	r2, #0
 8006130:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	3301      	adds	r3, #1
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b0e      	cmp	r3, #14
 800613c:	d9f2      	bls.n	8006124 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800613e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11c      	bne.n	8006180 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006154:	f043 0302 	orr.w	r3, r3, #2
 8006158:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	e005      	b.n	800618c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006192:	461a      	mov	r2, r3
 8006194:	2300      	movs	r3, #0
 8006196:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006198:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10d      	bne.n	80061bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061a8:	2100      	movs	r1, #0
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f968 	bl	8006480 <USB_SetDevSpeed>
 80061b0:	e008      	b.n	80061c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061b2:	2101      	movs	r1, #1
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f963 	bl	8006480 <USB_SetDevSpeed>
 80061ba:	e003      	b.n	80061c4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061bc:	2103      	movs	r1, #3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f95e 	bl	8006480 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061c4:	2110      	movs	r1, #16
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8fa 	bl	80063c0 <USB_FlushTxFifo>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f924 	bl	8006424 <USB_FlushRxFifo>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ec:	461a      	mov	r2, r3
 80061ee:	2300      	movs	r3, #0
 80061f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f8:	461a      	mov	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006204:	461a      	mov	r2, r3
 8006206:	2300      	movs	r3, #0
 8006208:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	e043      	b.n	8006298 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006226:	d118      	bne.n	800625a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623a:	461a      	mov	r2, r3
 800623c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e013      	b.n	800626c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006250:	461a      	mov	r2, r3
 8006252:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	e008      	b.n	800626c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006266:	461a      	mov	r2, r3
 8006268:	2300      	movs	r3, #0
 800626a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628a:	461a      	mov	r2, r3
 800628c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006290:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3301      	adds	r3, #1
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800629c:	461a      	mov	r2, r3
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d3b5      	bcc.n	8006210 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	e043      	b.n	8006332 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c0:	d118      	bne.n	80062f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e013      	b.n	8006306 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	461a      	mov	r2, r3
 80062ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e008      	b.n	8006306 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006312:	461a      	mov	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006324:	461a      	mov	r2, r3
 8006326:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800632a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	3301      	adds	r3, #1
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006336:	461a      	mov	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4293      	cmp	r3, r2
 800633c:	d3b5      	bcc.n	80062aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800634c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006350:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800635e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f043 0210 	orr.w	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699a      	ldr	r2, [r3, #24]
 8006378:	4b10      	ldr	r3, [pc, #64]	@ (80063bc <USB_DevInit+0x2b8>)
 800637a:	4313      	orrs	r3, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006380:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f043 0208 	orr.w	r2, r3, #8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006394:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006398:	2b01      	cmp	r3, #1
 800639a:	d107      	bne.n	80063ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063a4:	f043 0304 	orr.w	r3, r3, #4
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063b8:	b004      	add	sp, #16
 80063ba:	4770      	bx	lr
 80063bc:	803c3800 	.word	0x803c3800

080063c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3301      	adds	r3, #1
 80063d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063da:	d901      	bls.n	80063e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e01b      	b.n	8006418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	daf2      	bge.n	80063ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	019b      	lsls	r3, r3, #6
 80063f0:	f043 0220 	orr.w	r2, r3, #32
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006404:	d901      	bls.n	800640a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e006      	b.n	8006418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b20      	cmp	r3, #32
 8006414:	d0f0      	beq.n	80063f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800643c:	d901      	bls.n	8006442 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e018      	b.n	8006474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	daf2      	bge.n	8006430 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2210      	movs	r2, #16
 8006452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006460:	d901      	bls.n	8006466 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e006      	b.n	8006474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b10      	cmp	r3, #16
 8006470:	d0f0      	beq.n	8006454 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064cc:	f023 0303 	bic.w	r3, r3, #3
 80064d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064e0:	f043 0302 	orr.w	r3, r3, #2
 80064e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0301 	and.w	r3, r3, #1
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006528:	d901      	bls.n	800652e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e01b      	b.n	8006566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	daf2      	bge.n	800651c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f043 0201 	orr.w	r2, r3, #1
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3301      	adds	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006552:	d901      	bls.n	8006558 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e006      	b.n	8006566 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	d0f0      	beq.n	8006546 <USB_CoreReset+0x36>

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <sniprintf>:
 8006574:	b40c      	push	{r2, r3}
 8006576:	b530      	push	{r4, r5, lr}
 8006578:	4b17      	ldr	r3, [pc, #92]	@ (80065d8 <sniprintf+0x64>)
 800657a:	1e0c      	subs	r4, r1, #0
 800657c:	681d      	ldr	r5, [r3, #0]
 800657e:	b09d      	sub	sp, #116	@ 0x74
 8006580:	da08      	bge.n	8006594 <sniprintf+0x20>
 8006582:	238b      	movs	r3, #139	@ 0x8b
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	b01d      	add	sp, #116	@ 0x74
 800658c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006590:	b002      	add	sp, #8
 8006592:	4770      	bx	lr
 8006594:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800659c:	bf14      	ite	ne
 800659e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065a2:	4623      	moveq	r3, r4
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	9307      	str	r3, [sp, #28]
 80065a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065ac:	9002      	str	r0, [sp, #8]
 80065ae:	9006      	str	r0, [sp, #24]
 80065b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065b6:	ab21      	add	r3, sp, #132	@ 0x84
 80065b8:	a902      	add	r1, sp, #8
 80065ba:	4628      	mov	r0, r5
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	f000 f9b5 	bl	800692c <_svfiprintf_r>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	bfbc      	itt	lt
 80065c6:	238b      	movlt	r3, #139	@ 0x8b
 80065c8:	602b      	strlt	r3, [r5, #0]
 80065ca:	2c00      	cmp	r4, #0
 80065cc:	d0dd      	beq.n	800658a <sniprintf+0x16>
 80065ce:	9b02      	ldr	r3, [sp, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	e7d9      	b.n	800658a <sniprintf+0x16>
 80065d6:	bf00      	nop
 80065d8:	2000000c 	.word	0x2000000c

080065dc <siprintf>:
 80065dc:	b40e      	push	{r1, r2, r3}
 80065de:	b500      	push	{lr}
 80065e0:	b09c      	sub	sp, #112	@ 0x70
 80065e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80065e4:	9002      	str	r0, [sp, #8]
 80065e6:	9006      	str	r0, [sp, #24]
 80065e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065ec:	4809      	ldr	r0, [pc, #36]	@ (8006614 <siprintf+0x38>)
 80065ee:	9107      	str	r1, [sp, #28]
 80065f0:	9104      	str	r1, [sp, #16]
 80065f2:	4909      	ldr	r1, [pc, #36]	@ (8006618 <siprintf+0x3c>)
 80065f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f8:	9105      	str	r1, [sp, #20]
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	a902      	add	r1, sp, #8
 8006600:	f000 f994 	bl	800692c <_svfiprintf_r>
 8006604:	9b02      	ldr	r3, [sp, #8]
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	b01c      	add	sp, #112	@ 0x70
 800660c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006610:	b003      	add	sp, #12
 8006612:	4770      	bx	lr
 8006614:	2000000c 	.word	0x2000000c
 8006618:	ffff0208 	.word	0xffff0208

0800661c <memset>:
 800661c:	4402      	add	r2, r0
 800661e:	4603      	mov	r3, r0
 8006620:	4293      	cmp	r3, r2
 8006622:	d100      	bne.n	8006626 <memset+0xa>
 8006624:	4770      	bx	lr
 8006626:	f803 1b01 	strb.w	r1, [r3], #1
 800662a:	e7f9      	b.n	8006620 <memset+0x4>

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	@ (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c

08006638 <__libc_init_array>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4d0d      	ldr	r5, [pc, #52]	@ (8006670 <__libc_init_array+0x38>)
 800663c:	4c0d      	ldr	r4, [pc, #52]	@ (8006674 <__libc_init_array+0x3c>)
 800663e:	1b64      	subs	r4, r4, r5
 8006640:	10a4      	asrs	r4, r4, #2
 8006642:	2600      	movs	r6, #0
 8006644:	42a6      	cmp	r6, r4
 8006646:	d109      	bne.n	800665c <__libc_init_array+0x24>
 8006648:	4d0b      	ldr	r5, [pc, #44]	@ (8006678 <__libc_init_array+0x40>)
 800664a:	4c0c      	ldr	r4, [pc, #48]	@ (800667c <__libc_init_array+0x44>)
 800664c:	f000 fc66 	bl	8006f1c <_init>
 8006650:	1b64      	subs	r4, r4, r5
 8006652:	10a4      	asrs	r4, r4, #2
 8006654:	2600      	movs	r6, #0
 8006656:	42a6      	cmp	r6, r4
 8006658:	d105      	bne.n	8006666 <__libc_init_array+0x2e>
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006660:	4798      	blx	r3
 8006662:	3601      	adds	r6, #1
 8006664:	e7ee      	b.n	8006644 <__libc_init_array+0xc>
 8006666:	f855 3b04 	ldr.w	r3, [r5], #4
 800666a:	4798      	blx	r3
 800666c:	3601      	adds	r6, #1
 800666e:	e7f2      	b.n	8006656 <__libc_init_array+0x1e>
 8006670:	08006fe4 	.word	0x08006fe4
 8006674:	08006fe4 	.word	0x08006fe4
 8006678:	08006fe4 	.word	0x08006fe4
 800667c:	08006fe8 	.word	0x08006fe8

08006680 <__retarget_lock_acquire_recursive>:
 8006680:	4770      	bx	lr

08006682 <__retarget_lock_release_recursive>:
 8006682:	4770      	bx	lr

08006684 <_free_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4605      	mov	r5, r0
 8006688:	2900      	cmp	r1, #0
 800668a:	d041      	beq.n	8006710 <_free_r+0x8c>
 800668c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006690:	1f0c      	subs	r4, r1, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfb8      	it	lt
 8006696:	18e4      	addlt	r4, r4, r3
 8006698:	f000 f8e0 	bl	800685c <__malloc_lock>
 800669c:	4a1d      	ldr	r2, [pc, #116]	@ (8006714 <_free_r+0x90>)
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	b933      	cbnz	r3, 80066b0 <_free_r+0x2c>
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	6014      	str	r4, [r2, #0]
 80066a6:	4628      	mov	r0, r5
 80066a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ac:	f000 b8dc 	b.w	8006868 <__malloc_unlock>
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	d908      	bls.n	80066c6 <_free_r+0x42>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	1821      	adds	r1, r4, r0
 80066b8:	428b      	cmp	r3, r1
 80066ba:	bf01      	itttt	eq
 80066bc:	6819      	ldreq	r1, [r3, #0]
 80066be:	685b      	ldreq	r3, [r3, #4]
 80066c0:	1809      	addeq	r1, r1, r0
 80066c2:	6021      	streq	r1, [r4, #0]
 80066c4:	e7ed      	b.n	80066a2 <_free_r+0x1e>
 80066c6:	461a      	mov	r2, r3
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	b10b      	cbz	r3, 80066d0 <_free_r+0x4c>
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	d9fa      	bls.n	80066c6 <_free_r+0x42>
 80066d0:	6811      	ldr	r1, [r2, #0]
 80066d2:	1850      	adds	r0, r2, r1
 80066d4:	42a0      	cmp	r0, r4
 80066d6:	d10b      	bne.n	80066f0 <_free_r+0x6c>
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	4401      	add	r1, r0
 80066dc:	1850      	adds	r0, r2, r1
 80066de:	4283      	cmp	r3, r0
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	d1e0      	bne.n	80066a6 <_free_r+0x22>
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	6053      	str	r3, [r2, #4]
 80066ea:	4408      	add	r0, r1
 80066ec:	6010      	str	r0, [r2, #0]
 80066ee:	e7da      	b.n	80066a6 <_free_r+0x22>
 80066f0:	d902      	bls.n	80066f8 <_free_r+0x74>
 80066f2:	230c      	movs	r3, #12
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	e7d6      	b.n	80066a6 <_free_r+0x22>
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	1821      	adds	r1, r4, r0
 80066fc:	428b      	cmp	r3, r1
 80066fe:	bf04      	itt	eq
 8006700:	6819      	ldreq	r1, [r3, #0]
 8006702:	685b      	ldreq	r3, [r3, #4]
 8006704:	6063      	str	r3, [r4, #4]
 8006706:	bf04      	itt	eq
 8006708:	1809      	addeq	r1, r1, r0
 800670a:	6021      	streq	r1, [r4, #0]
 800670c:	6054      	str	r4, [r2, #4]
 800670e:	e7ca      	b.n	80066a6 <_free_r+0x22>
 8006710:	bd38      	pop	{r3, r4, r5, pc}
 8006712:	bf00      	nop
 8006714:	20000824 	.word	0x20000824

08006718 <sbrk_aligned>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4e0f      	ldr	r6, [pc, #60]	@ (8006758 <sbrk_aligned+0x40>)
 800671c:	460c      	mov	r4, r1
 800671e:	6831      	ldr	r1, [r6, #0]
 8006720:	4605      	mov	r5, r0
 8006722:	b911      	cbnz	r1, 800672a <sbrk_aligned+0x12>
 8006724:	f000 fba6 	bl	8006e74 <_sbrk_r>
 8006728:	6030      	str	r0, [r6, #0]
 800672a:	4621      	mov	r1, r4
 800672c:	4628      	mov	r0, r5
 800672e:	f000 fba1 	bl	8006e74 <_sbrk_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d103      	bne.n	800673e <sbrk_aligned+0x26>
 8006736:	f04f 34ff 	mov.w	r4, #4294967295
 800673a:	4620      	mov	r0, r4
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	1cc4      	adds	r4, r0, #3
 8006740:	f024 0403 	bic.w	r4, r4, #3
 8006744:	42a0      	cmp	r0, r4
 8006746:	d0f8      	beq.n	800673a <sbrk_aligned+0x22>
 8006748:	1a21      	subs	r1, r4, r0
 800674a:	4628      	mov	r0, r5
 800674c:	f000 fb92 	bl	8006e74 <_sbrk_r>
 8006750:	3001      	adds	r0, #1
 8006752:	d1f2      	bne.n	800673a <sbrk_aligned+0x22>
 8006754:	e7ef      	b.n	8006736 <sbrk_aligned+0x1e>
 8006756:	bf00      	nop
 8006758:	20000820 	.word	0x20000820

0800675c <_malloc_r>:
 800675c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006760:	1ccd      	adds	r5, r1, #3
 8006762:	f025 0503 	bic.w	r5, r5, #3
 8006766:	3508      	adds	r5, #8
 8006768:	2d0c      	cmp	r5, #12
 800676a:	bf38      	it	cc
 800676c:	250c      	movcc	r5, #12
 800676e:	2d00      	cmp	r5, #0
 8006770:	4606      	mov	r6, r0
 8006772:	db01      	blt.n	8006778 <_malloc_r+0x1c>
 8006774:	42a9      	cmp	r1, r5
 8006776:	d904      	bls.n	8006782 <_malloc_r+0x26>
 8006778:	230c      	movs	r3, #12
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	2000      	movs	r0, #0
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006782:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006858 <_malloc_r+0xfc>
 8006786:	f000 f869 	bl	800685c <__malloc_lock>
 800678a:	f8d8 3000 	ldr.w	r3, [r8]
 800678e:	461c      	mov	r4, r3
 8006790:	bb44      	cbnz	r4, 80067e4 <_malloc_r+0x88>
 8006792:	4629      	mov	r1, r5
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ffbf 	bl	8006718 <sbrk_aligned>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	4604      	mov	r4, r0
 800679e:	d158      	bne.n	8006852 <_malloc_r+0xf6>
 80067a0:	f8d8 4000 	ldr.w	r4, [r8]
 80067a4:	4627      	mov	r7, r4
 80067a6:	2f00      	cmp	r7, #0
 80067a8:	d143      	bne.n	8006832 <_malloc_r+0xd6>
 80067aa:	2c00      	cmp	r4, #0
 80067ac:	d04b      	beq.n	8006846 <_malloc_r+0xea>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	4639      	mov	r1, r7
 80067b2:	4630      	mov	r0, r6
 80067b4:	eb04 0903 	add.w	r9, r4, r3
 80067b8:	f000 fb5c 	bl	8006e74 <_sbrk_r>
 80067bc:	4581      	cmp	r9, r0
 80067be:	d142      	bne.n	8006846 <_malloc_r+0xea>
 80067c0:	6821      	ldr	r1, [r4, #0]
 80067c2:	1a6d      	subs	r5, r5, r1
 80067c4:	4629      	mov	r1, r5
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff ffa6 	bl	8006718 <sbrk_aligned>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d03a      	beq.n	8006846 <_malloc_r+0xea>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	442b      	add	r3, r5
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	f8d8 3000 	ldr.w	r3, [r8]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	bb62      	cbnz	r2, 8006838 <_malloc_r+0xdc>
 80067de:	f8c8 7000 	str.w	r7, [r8]
 80067e2:	e00f      	b.n	8006804 <_malloc_r+0xa8>
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	1b52      	subs	r2, r2, r5
 80067e8:	d420      	bmi.n	800682c <_malloc_r+0xd0>
 80067ea:	2a0b      	cmp	r2, #11
 80067ec:	d917      	bls.n	800681e <_malloc_r+0xc2>
 80067ee:	1961      	adds	r1, r4, r5
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	6025      	str	r5, [r4, #0]
 80067f4:	bf18      	it	ne
 80067f6:	6059      	strne	r1, [r3, #4]
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	bf08      	it	eq
 80067fc:	f8c8 1000 	streq.w	r1, [r8]
 8006800:	5162      	str	r2, [r4, r5]
 8006802:	604b      	str	r3, [r1, #4]
 8006804:	4630      	mov	r0, r6
 8006806:	f000 f82f 	bl	8006868 <__malloc_unlock>
 800680a:	f104 000b 	add.w	r0, r4, #11
 800680e:	1d23      	adds	r3, r4, #4
 8006810:	f020 0007 	bic.w	r0, r0, #7
 8006814:	1ac2      	subs	r2, r0, r3
 8006816:	bf1c      	itt	ne
 8006818:	1a1b      	subne	r3, r3, r0
 800681a:	50a3      	strne	r3, [r4, r2]
 800681c:	e7af      	b.n	800677e <_malloc_r+0x22>
 800681e:	6862      	ldr	r2, [r4, #4]
 8006820:	42a3      	cmp	r3, r4
 8006822:	bf0c      	ite	eq
 8006824:	f8c8 2000 	streq.w	r2, [r8]
 8006828:	605a      	strne	r2, [r3, #4]
 800682a:	e7eb      	b.n	8006804 <_malloc_r+0xa8>
 800682c:	4623      	mov	r3, r4
 800682e:	6864      	ldr	r4, [r4, #4]
 8006830:	e7ae      	b.n	8006790 <_malloc_r+0x34>
 8006832:	463c      	mov	r4, r7
 8006834:	687f      	ldr	r7, [r7, #4]
 8006836:	e7b6      	b.n	80067a6 <_malloc_r+0x4a>
 8006838:	461a      	mov	r2, r3
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	42a3      	cmp	r3, r4
 800683e:	d1fb      	bne.n	8006838 <_malloc_r+0xdc>
 8006840:	2300      	movs	r3, #0
 8006842:	6053      	str	r3, [r2, #4]
 8006844:	e7de      	b.n	8006804 <_malloc_r+0xa8>
 8006846:	230c      	movs	r3, #12
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	4630      	mov	r0, r6
 800684c:	f000 f80c 	bl	8006868 <__malloc_unlock>
 8006850:	e794      	b.n	800677c <_malloc_r+0x20>
 8006852:	6005      	str	r5, [r0, #0]
 8006854:	e7d6      	b.n	8006804 <_malloc_r+0xa8>
 8006856:	bf00      	nop
 8006858:	20000824 	.word	0x20000824

0800685c <__malloc_lock>:
 800685c:	4801      	ldr	r0, [pc, #4]	@ (8006864 <__malloc_lock+0x8>)
 800685e:	f7ff bf0f 	b.w	8006680 <__retarget_lock_acquire_recursive>
 8006862:	bf00      	nop
 8006864:	2000081c 	.word	0x2000081c

08006868 <__malloc_unlock>:
 8006868:	4801      	ldr	r0, [pc, #4]	@ (8006870 <__malloc_unlock+0x8>)
 800686a:	f7ff bf0a 	b.w	8006682 <__retarget_lock_release_recursive>
 800686e:	bf00      	nop
 8006870:	2000081c 	.word	0x2000081c

08006874 <__ssputs_r>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	688e      	ldr	r6, [r1, #8]
 800687a:	461f      	mov	r7, r3
 800687c:	42be      	cmp	r6, r7
 800687e:	680b      	ldr	r3, [r1, #0]
 8006880:	4682      	mov	sl, r0
 8006882:	460c      	mov	r4, r1
 8006884:	4690      	mov	r8, r2
 8006886:	d82d      	bhi.n	80068e4 <__ssputs_r+0x70>
 8006888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800688c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006890:	d026      	beq.n	80068e0 <__ssputs_r+0x6c>
 8006892:	6965      	ldr	r5, [r4, #20]
 8006894:	6909      	ldr	r1, [r1, #16]
 8006896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800689a:	eba3 0901 	sub.w	r9, r3, r1
 800689e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068a2:	1c7b      	adds	r3, r7, #1
 80068a4:	444b      	add	r3, r9
 80068a6:	106d      	asrs	r5, r5, #1
 80068a8:	429d      	cmp	r5, r3
 80068aa:	bf38      	it	cc
 80068ac:	461d      	movcc	r5, r3
 80068ae:	0553      	lsls	r3, r2, #21
 80068b0:	d527      	bpl.n	8006902 <__ssputs_r+0x8e>
 80068b2:	4629      	mov	r1, r5
 80068b4:	f7ff ff52 	bl	800675c <_malloc_r>
 80068b8:	4606      	mov	r6, r0
 80068ba:	b360      	cbz	r0, 8006916 <__ssputs_r+0xa2>
 80068bc:	6921      	ldr	r1, [r4, #16]
 80068be:	464a      	mov	r2, r9
 80068c0:	f000 fae8 	bl	8006e94 <memcpy>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	6126      	str	r6, [r4, #16]
 80068d2:	6165      	str	r5, [r4, #20]
 80068d4:	444e      	add	r6, r9
 80068d6:	eba5 0509 	sub.w	r5, r5, r9
 80068da:	6026      	str	r6, [r4, #0]
 80068dc:	60a5      	str	r5, [r4, #8]
 80068de:	463e      	mov	r6, r7
 80068e0:	42be      	cmp	r6, r7
 80068e2:	d900      	bls.n	80068e6 <__ssputs_r+0x72>
 80068e4:	463e      	mov	r6, r7
 80068e6:	6820      	ldr	r0, [r4, #0]
 80068e8:	4632      	mov	r2, r6
 80068ea:	4641      	mov	r1, r8
 80068ec:	f000 faa8 	bl	8006e40 <memmove>
 80068f0:	68a3      	ldr	r3, [r4, #8]
 80068f2:	1b9b      	subs	r3, r3, r6
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	4433      	add	r3, r6
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	2000      	movs	r0, #0
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	462a      	mov	r2, r5
 8006904:	f000 fad4 	bl	8006eb0 <_realloc_r>
 8006908:	4606      	mov	r6, r0
 800690a:	2800      	cmp	r0, #0
 800690c:	d1e0      	bne.n	80068d0 <__ssputs_r+0x5c>
 800690e:	6921      	ldr	r1, [r4, #16]
 8006910:	4650      	mov	r0, sl
 8006912:	f7ff feb7 	bl	8006684 <_free_r>
 8006916:	230c      	movs	r3, #12
 8006918:	f8ca 3000 	str.w	r3, [sl]
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006922:	81a3      	strh	r3, [r4, #12]
 8006924:	f04f 30ff 	mov.w	r0, #4294967295
 8006928:	e7e9      	b.n	80068fe <__ssputs_r+0x8a>
	...

0800692c <_svfiprintf_r>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	4698      	mov	r8, r3
 8006932:	898b      	ldrh	r3, [r1, #12]
 8006934:	061b      	lsls	r3, r3, #24
 8006936:	b09d      	sub	sp, #116	@ 0x74
 8006938:	4607      	mov	r7, r0
 800693a:	460d      	mov	r5, r1
 800693c:	4614      	mov	r4, r2
 800693e:	d510      	bpl.n	8006962 <_svfiprintf_r+0x36>
 8006940:	690b      	ldr	r3, [r1, #16]
 8006942:	b973      	cbnz	r3, 8006962 <_svfiprintf_r+0x36>
 8006944:	2140      	movs	r1, #64	@ 0x40
 8006946:	f7ff ff09 	bl	800675c <_malloc_r>
 800694a:	6028      	str	r0, [r5, #0]
 800694c:	6128      	str	r0, [r5, #16]
 800694e:	b930      	cbnz	r0, 800695e <_svfiprintf_r+0x32>
 8006950:	230c      	movs	r3, #12
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b01d      	add	sp, #116	@ 0x74
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	2340      	movs	r3, #64	@ 0x40
 8006960:	616b      	str	r3, [r5, #20]
 8006962:	2300      	movs	r3, #0
 8006964:	9309      	str	r3, [sp, #36]	@ 0x24
 8006966:	2320      	movs	r3, #32
 8006968:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800696c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006970:	2330      	movs	r3, #48	@ 0x30
 8006972:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b10 <_svfiprintf_r+0x1e4>
 8006976:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800697a:	f04f 0901 	mov.w	r9, #1
 800697e:	4623      	mov	r3, r4
 8006980:	469a      	mov	sl, r3
 8006982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006986:	b10a      	cbz	r2, 800698c <_svfiprintf_r+0x60>
 8006988:	2a25      	cmp	r2, #37	@ 0x25
 800698a:	d1f9      	bne.n	8006980 <_svfiprintf_r+0x54>
 800698c:	ebba 0b04 	subs.w	fp, sl, r4
 8006990:	d00b      	beq.n	80069aa <_svfiprintf_r+0x7e>
 8006992:	465b      	mov	r3, fp
 8006994:	4622      	mov	r2, r4
 8006996:	4629      	mov	r1, r5
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ff6b 	bl	8006874 <__ssputs_r>
 800699e:	3001      	adds	r0, #1
 80069a0:	f000 80a7 	beq.w	8006af2 <_svfiprintf_r+0x1c6>
 80069a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069a6:	445a      	add	r2, fp
 80069a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80069aa:	f89a 3000 	ldrb.w	r3, [sl]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 809f 	beq.w	8006af2 <_svfiprintf_r+0x1c6>
 80069b4:	2300      	movs	r3, #0
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069be:	f10a 0a01 	add.w	sl, sl, #1
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	9307      	str	r3, [sp, #28]
 80069c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80069cc:	4654      	mov	r4, sl
 80069ce:	2205      	movs	r2, #5
 80069d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d4:	484e      	ldr	r0, [pc, #312]	@ (8006b10 <_svfiprintf_r+0x1e4>)
 80069d6:	f7f9 fc23 	bl	8000220 <memchr>
 80069da:	9a04      	ldr	r2, [sp, #16]
 80069dc:	b9d8      	cbnz	r0, 8006a16 <_svfiprintf_r+0xea>
 80069de:	06d0      	lsls	r0, r2, #27
 80069e0:	bf44      	itt	mi
 80069e2:	2320      	movmi	r3, #32
 80069e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069e8:	0711      	lsls	r1, r2, #28
 80069ea:	bf44      	itt	mi
 80069ec:	232b      	movmi	r3, #43	@ 0x2b
 80069ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069f2:	f89a 3000 	ldrb.w	r3, [sl]
 80069f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80069f8:	d015      	beq.n	8006a26 <_svfiprintf_r+0xfa>
 80069fa:	9a07      	ldr	r2, [sp, #28]
 80069fc:	4654      	mov	r4, sl
 80069fe:	2000      	movs	r0, #0
 8006a00:	f04f 0c0a 	mov.w	ip, #10
 8006a04:	4621      	mov	r1, r4
 8006a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a0a:	3b30      	subs	r3, #48	@ 0x30
 8006a0c:	2b09      	cmp	r3, #9
 8006a0e:	d94b      	bls.n	8006aa8 <_svfiprintf_r+0x17c>
 8006a10:	b1b0      	cbz	r0, 8006a40 <_svfiprintf_r+0x114>
 8006a12:	9207      	str	r2, [sp, #28]
 8006a14:	e014      	b.n	8006a40 <_svfiprintf_r+0x114>
 8006a16:	eba0 0308 	sub.w	r3, r0, r8
 8006a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	46a2      	mov	sl, r4
 8006a24:	e7d2      	b.n	80069cc <_svfiprintf_r+0xa0>
 8006a26:	9b03      	ldr	r3, [sp, #12]
 8006a28:	1d19      	adds	r1, r3, #4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	9103      	str	r1, [sp, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfbb      	ittet	lt
 8006a32:	425b      	neglt	r3, r3
 8006a34:	f042 0202 	orrlt.w	r2, r2, #2
 8006a38:	9307      	strge	r3, [sp, #28]
 8006a3a:	9307      	strlt	r3, [sp, #28]
 8006a3c:	bfb8      	it	lt
 8006a3e:	9204      	strlt	r2, [sp, #16]
 8006a40:	7823      	ldrb	r3, [r4, #0]
 8006a42:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a44:	d10a      	bne.n	8006a5c <_svfiprintf_r+0x130>
 8006a46:	7863      	ldrb	r3, [r4, #1]
 8006a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a4a:	d132      	bne.n	8006ab2 <_svfiprintf_r+0x186>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	1d1a      	adds	r2, r3, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	9203      	str	r2, [sp, #12]
 8006a54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a58:	3402      	adds	r4, #2
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b20 <_svfiprintf_r+0x1f4>
 8006a60:	7821      	ldrb	r1, [r4, #0]
 8006a62:	2203      	movs	r2, #3
 8006a64:	4650      	mov	r0, sl
 8006a66:	f7f9 fbdb 	bl	8000220 <memchr>
 8006a6a:	b138      	cbz	r0, 8006a7c <_svfiprintf_r+0x150>
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	eba0 000a 	sub.w	r0, r0, sl
 8006a72:	2240      	movs	r2, #64	@ 0x40
 8006a74:	4082      	lsls	r2, r0
 8006a76:	4313      	orrs	r3, r2
 8006a78:	3401      	adds	r4, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a80:	4824      	ldr	r0, [pc, #144]	@ (8006b14 <_svfiprintf_r+0x1e8>)
 8006a82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a86:	2206      	movs	r2, #6
 8006a88:	f7f9 fbca 	bl	8000220 <memchr>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d036      	beq.n	8006afe <_svfiprintf_r+0x1d2>
 8006a90:	4b21      	ldr	r3, [pc, #132]	@ (8006b18 <_svfiprintf_r+0x1ec>)
 8006a92:	bb1b      	cbnz	r3, 8006adc <_svfiprintf_r+0x1b0>
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	3307      	adds	r3, #7
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa2:	4433      	add	r3, r6
 8006aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aa6:	e76a      	b.n	800697e <_svfiprintf_r+0x52>
 8006aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aac:	460c      	mov	r4, r1
 8006aae:	2001      	movs	r0, #1
 8006ab0:	e7a8      	b.n	8006a04 <_svfiprintf_r+0xd8>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	3401      	adds	r4, #1
 8006ab6:	9305      	str	r3, [sp, #20]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f04f 0c0a 	mov.w	ip, #10
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ac4:	3a30      	subs	r2, #48	@ 0x30
 8006ac6:	2a09      	cmp	r2, #9
 8006ac8:	d903      	bls.n	8006ad2 <_svfiprintf_r+0x1a6>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0c6      	beq.n	8006a5c <_svfiprintf_r+0x130>
 8006ace:	9105      	str	r1, [sp, #20]
 8006ad0:	e7c4      	b.n	8006a5c <_svfiprintf_r+0x130>
 8006ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e7f0      	b.n	8006abe <_svfiprintf_r+0x192>
 8006adc:	ab03      	add	r3, sp, #12
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b1c <_svfiprintf_r+0x1f0>)
 8006ae4:	a904      	add	r1, sp, #16
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f3af 8000 	nop.w
 8006aec:	1c42      	adds	r2, r0, #1
 8006aee:	4606      	mov	r6, r0
 8006af0:	d1d6      	bne.n	8006aa0 <_svfiprintf_r+0x174>
 8006af2:	89ab      	ldrh	r3, [r5, #12]
 8006af4:	065b      	lsls	r3, r3, #25
 8006af6:	f53f af2d 	bmi.w	8006954 <_svfiprintf_r+0x28>
 8006afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006afc:	e72c      	b.n	8006958 <_svfiprintf_r+0x2c>
 8006afe:	ab03      	add	r3, sp, #12
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	462a      	mov	r2, r5
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <_svfiprintf_r+0x1f0>)
 8006b06:	a904      	add	r1, sp, #16
 8006b08:	4638      	mov	r0, r7
 8006b0a:	f000 f879 	bl	8006c00 <_printf_i>
 8006b0e:	e7ed      	b.n	8006aec <_svfiprintf_r+0x1c0>
 8006b10:	08006fa8 	.word	0x08006fa8
 8006b14:	08006fb2 	.word	0x08006fb2
 8006b18:	00000000 	.word	0x00000000
 8006b1c:	08006875 	.word	0x08006875
 8006b20:	08006fae 	.word	0x08006fae

08006b24 <_printf_common>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	4616      	mov	r6, r2
 8006b2a:	4698      	mov	r8, r3
 8006b2c:	688a      	ldr	r2, [r1, #8]
 8006b2e:	690b      	ldr	r3, [r1, #16]
 8006b30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	bfb8      	it	lt
 8006b38:	4613      	movlt	r3, r2
 8006b3a:	6033      	str	r3, [r6, #0]
 8006b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b40:	4607      	mov	r7, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	b10a      	cbz	r2, 8006b4a <_printf_common+0x26>
 8006b46:	3301      	adds	r3, #1
 8006b48:	6033      	str	r3, [r6, #0]
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	0699      	lsls	r1, r3, #26
 8006b4e:	bf42      	ittt	mi
 8006b50:	6833      	ldrmi	r3, [r6, #0]
 8006b52:	3302      	addmi	r3, #2
 8006b54:	6033      	strmi	r3, [r6, #0]
 8006b56:	6825      	ldr	r5, [r4, #0]
 8006b58:	f015 0506 	ands.w	r5, r5, #6
 8006b5c:	d106      	bne.n	8006b6c <_printf_common+0x48>
 8006b5e:	f104 0a19 	add.w	sl, r4, #25
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	6832      	ldr	r2, [r6, #0]
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dc26      	bgt.n	8006bba <_printf_common+0x96>
 8006b6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	3b00      	subs	r3, #0
 8006b74:	bf18      	it	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	0692      	lsls	r2, r2, #26
 8006b7a:	d42b      	bmi.n	8006bd4 <_printf_common+0xb0>
 8006b7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b80:	4641      	mov	r1, r8
 8006b82:	4638      	mov	r0, r7
 8006b84:	47c8      	blx	r9
 8006b86:	3001      	adds	r0, #1
 8006b88:	d01e      	beq.n	8006bc8 <_printf_common+0xa4>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	6922      	ldr	r2, [r4, #16]
 8006b8e:	f003 0306 	and.w	r3, r3, #6
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	bf02      	ittt	eq
 8006b96:	68e5      	ldreq	r5, [r4, #12]
 8006b98:	6833      	ldreq	r3, [r6, #0]
 8006b9a:	1aed      	subeq	r5, r5, r3
 8006b9c:	68a3      	ldr	r3, [r4, #8]
 8006b9e:	bf0c      	ite	eq
 8006ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba4:	2500      	movne	r5, #0
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	bfc4      	itt	gt
 8006baa:	1a9b      	subgt	r3, r3, r2
 8006bac:	18ed      	addgt	r5, r5, r3
 8006bae:	2600      	movs	r6, #0
 8006bb0:	341a      	adds	r4, #26
 8006bb2:	42b5      	cmp	r5, r6
 8006bb4:	d11a      	bne.n	8006bec <_printf_common+0xc8>
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	e008      	b.n	8006bcc <_printf_common+0xa8>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	47c8      	blx	r9
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d103      	bne.n	8006bd0 <_printf_common+0xac>
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	e7c6      	b.n	8006b62 <_printf_common+0x3e>
 8006bd4:	18e1      	adds	r1, r4, r3
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	2030      	movs	r0, #48	@ 0x30
 8006bda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bde:	4422      	add	r2, r4
 8006be0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006be4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006be8:	3302      	adds	r3, #2
 8006bea:	e7c7      	b.n	8006b7c <_printf_common+0x58>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4622      	mov	r2, r4
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	47c8      	blx	r9
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d0e6      	beq.n	8006bc8 <_printf_common+0xa4>
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7d9      	b.n	8006bb2 <_printf_common+0x8e>
	...

08006c00 <_printf_i>:
 8006c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	7e0f      	ldrb	r7, [r1, #24]
 8006c06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c08:	2f78      	cmp	r7, #120	@ 0x78
 8006c0a:	4691      	mov	r9, r2
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	469a      	mov	sl, r3
 8006c12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c16:	d807      	bhi.n	8006c28 <_printf_i+0x28>
 8006c18:	2f62      	cmp	r7, #98	@ 0x62
 8006c1a:	d80a      	bhi.n	8006c32 <_printf_i+0x32>
 8006c1c:	2f00      	cmp	r7, #0
 8006c1e:	f000 80d2 	beq.w	8006dc6 <_printf_i+0x1c6>
 8006c22:	2f58      	cmp	r7, #88	@ 0x58
 8006c24:	f000 80b9 	beq.w	8006d9a <_printf_i+0x19a>
 8006c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c30:	e03a      	b.n	8006ca8 <_printf_i+0xa8>
 8006c32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c36:	2b15      	cmp	r3, #21
 8006c38:	d8f6      	bhi.n	8006c28 <_printf_i+0x28>
 8006c3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c40 <_printf_i+0x40>)
 8006c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006cad 	.word	0x08006cad
 8006c48:	08006c29 	.word	0x08006c29
 8006c4c:	08006c29 	.word	0x08006c29
 8006c50:	08006c29 	.word	0x08006c29
 8006c54:	08006c29 	.word	0x08006c29
 8006c58:	08006cad 	.word	0x08006cad
 8006c5c:	08006c29 	.word	0x08006c29
 8006c60:	08006c29 	.word	0x08006c29
 8006c64:	08006c29 	.word	0x08006c29
 8006c68:	08006c29 	.word	0x08006c29
 8006c6c:	08006dad 	.word	0x08006dad
 8006c70:	08006cd7 	.word	0x08006cd7
 8006c74:	08006d67 	.word	0x08006d67
 8006c78:	08006c29 	.word	0x08006c29
 8006c7c:	08006c29 	.word	0x08006c29
 8006c80:	08006dcf 	.word	0x08006dcf
 8006c84:	08006c29 	.word	0x08006c29
 8006c88:	08006cd7 	.word	0x08006cd7
 8006c8c:	08006c29 	.word	0x08006c29
 8006c90:	08006c29 	.word	0x08006c29
 8006c94:	08006d6f 	.word	0x08006d6f
 8006c98:	6833      	ldr	r3, [r6, #0]
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6032      	str	r2, [r6, #0]
 8006ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e09d      	b.n	8006de8 <_printf_i+0x1e8>
 8006cac:	6833      	ldr	r3, [r6, #0]
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	1d19      	adds	r1, r3, #4
 8006cb2:	6031      	str	r1, [r6, #0]
 8006cb4:	0606      	lsls	r6, r0, #24
 8006cb6:	d501      	bpl.n	8006cbc <_printf_i+0xbc>
 8006cb8:	681d      	ldr	r5, [r3, #0]
 8006cba:	e003      	b.n	8006cc4 <_printf_i+0xc4>
 8006cbc:	0645      	lsls	r5, r0, #25
 8006cbe:	d5fb      	bpl.n	8006cb8 <_printf_i+0xb8>
 8006cc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	da03      	bge.n	8006cd0 <_printf_i+0xd0>
 8006cc8:	232d      	movs	r3, #45	@ 0x2d
 8006cca:	426d      	negs	r5, r5
 8006ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd0:	4859      	ldr	r0, [pc, #356]	@ (8006e38 <_printf_i+0x238>)
 8006cd2:	230a      	movs	r3, #10
 8006cd4:	e011      	b.n	8006cfa <_printf_i+0xfa>
 8006cd6:	6821      	ldr	r1, [r4, #0]
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	0608      	lsls	r0, r1, #24
 8006cdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ce0:	d402      	bmi.n	8006ce8 <_printf_i+0xe8>
 8006ce2:	0649      	lsls	r1, r1, #25
 8006ce4:	bf48      	it	mi
 8006ce6:	b2ad      	uxthmi	r5, r5
 8006ce8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cea:	4853      	ldr	r0, [pc, #332]	@ (8006e38 <_printf_i+0x238>)
 8006cec:	6033      	str	r3, [r6, #0]
 8006cee:	bf14      	ite	ne
 8006cf0:	230a      	movne	r3, #10
 8006cf2:	2308      	moveq	r3, #8
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cfa:	6866      	ldr	r6, [r4, #4]
 8006cfc:	60a6      	str	r6, [r4, #8]
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	bfa2      	ittt	ge
 8006d02:	6821      	ldrge	r1, [r4, #0]
 8006d04:	f021 0104 	bicge.w	r1, r1, #4
 8006d08:	6021      	strge	r1, [r4, #0]
 8006d0a:	b90d      	cbnz	r5, 8006d10 <_printf_i+0x110>
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	d04b      	beq.n	8006da8 <_printf_i+0x1a8>
 8006d10:	4616      	mov	r6, r2
 8006d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d16:	fb03 5711 	mls	r7, r3, r1, r5
 8006d1a:	5dc7      	ldrb	r7, [r0, r7]
 8006d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d20:	462f      	mov	r7, r5
 8006d22:	42bb      	cmp	r3, r7
 8006d24:	460d      	mov	r5, r1
 8006d26:	d9f4      	bls.n	8006d12 <_printf_i+0x112>
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d10b      	bne.n	8006d44 <_printf_i+0x144>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07df      	lsls	r7, r3, #31
 8006d30:	d508      	bpl.n	8006d44 <_printf_i+0x144>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	6861      	ldr	r1, [r4, #4]
 8006d36:	4299      	cmp	r1, r3
 8006d38:	bfde      	ittt	le
 8006d3a:	2330      	movle	r3, #48	@ 0x30
 8006d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d44:	1b92      	subs	r2, r2, r6
 8006d46:	6122      	str	r2, [r4, #16]
 8006d48:	f8cd a000 	str.w	sl, [sp]
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	aa03      	add	r2, sp, #12
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fee6 	bl	8006b24 <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d14a      	bne.n	8006df2 <_printf_i+0x1f2>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b004      	add	sp, #16
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f043 0320 	orr.w	r3, r3, #32
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	4833      	ldr	r0, [pc, #204]	@ (8006e3c <_printf_i+0x23c>)
 8006d70:	2778      	movs	r7, #120	@ 0x78
 8006d72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	6831      	ldr	r1, [r6, #0]
 8006d7a:	061f      	lsls	r7, r3, #24
 8006d7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d80:	d402      	bmi.n	8006d88 <_printf_i+0x188>
 8006d82:	065f      	lsls	r7, r3, #25
 8006d84:	bf48      	it	mi
 8006d86:	b2ad      	uxthmi	r5, r5
 8006d88:	6031      	str	r1, [r6, #0]
 8006d8a:	07d9      	lsls	r1, r3, #31
 8006d8c:	bf44      	itt	mi
 8006d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d92:	6023      	strmi	r3, [r4, #0]
 8006d94:	b11d      	cbz	r5, 8006d9e <_printf_i+0x19e>
 8006d96:	2310      	movs	r3, #16
 8006d98:	e7ac      	b.n	8006cf4 <_printf_i+0xf4>
 8006d9a:	4827      	ldr	r0, [pc, #156]	@ (8006e38 <_printf_i+0x238>)
 8006d9c:	e7e9      	b.n	8006d72 <_printf_i+0x172>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f023 0320 	bic.w	r3, r3, #32
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	e7f6      	b.n	8006d96 <_printf_i+0x196>
 8006da8:	4616      	mov	r6, r2
 8006daa:	e7bd      	b.n	8006d28 <_printf_i+0x128>
 8006dac:	6833      	ldr	r3, [r6, #0]
 8006dae:	6825      	ldr	r5, [r4, #0]
 8006db0:	6961      	ldr	r1, [r4, #20]
 8006db2:	1d18      	adds	r0, r3, #4
 8006db4:	6030      	str	r0, [r6, #0]
 8006db6:	062e      	lsls	r6, r5, #24
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	d501      	bpl.n	8006dc0 <_printf_i+0x1c0>
 8006dbc:	6019      	str	r1, [r3, #0]
 8006dbe:	e002      	b.n	8006dc6 <_printf_i+0x1c6>
 8006dc0:	0668      	lsls	r0, r5, #25
 8006dc2:	d5fb      	bpl.n	8006dbc <_printf_i+0x1bc>
 8006dc4:	8019      	strh	r1, [r3, #0]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	4616      	mov	r6, r2
 8006dcc:	e7bc      	b.n	8006d48 <_printf_i+0x148>
 8006dce:	6833      	ldr	r3, [r6, #0]
 8006dd0:	1d1a      	adds	r2, r3, #4
 8006dd2:	6032      	str	r2, [r6, #0]
 8006dd4:	681e      	ldr	r6, [r3, #0]
 8006dd6:	6862      	ldr	r2, [r4, #4]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7f9 fa20 	bl	8000220 <memchr>
 8006de0:	b108      	cbz	r0, 8006de6 <_printf_i+0x1e6>
 8006de2:	1b80      	subs	r0, r0, r6
 8006de4:	6060      	str	r0, [r4, #4]
 8006de6:	6863      	ldr	r3, [r4, #4]
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	2300      	movs	r3, #0
 8006dec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006df0:	e7aa      	b.n	8006d48 <_printf_i+0x148>
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	4632      	mov	r2, r6
 8006df6:	4649      	mov	r1, r9
 8006df8:	4640      	mov	r0, r8
 8006dfa:	47d0      	blx	sl
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d0ad      	beq.n	8006d5c <_printf_i+0x15c>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	079b      	lsls	r3, r3, #30
 8006e04:	d413      	bmi.n	8006e2e <_printf_i+0x22e>
 8006e06:	68e0      	ldr	r0, [r4, #12]
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	4298      	cmp	r0, r3
 8006e0c:	bfb8      	it	lt
 8006e0e:	4618      	movlt	r0, r3
 8006e10:	e7a6      	b.n	8006d60 <_printf_i+0x160>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4632      	mov	r2, r6
 8006e16:	4649      	mov	r1, r9
 8006e18:	4640      	mov	r0, r8
 8006e1a:	47d0      	blx	sl
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d09d      	beq.n	8006d5c <_printf_i+0x15c>
 8006e20:	3501      	adds	r5, #1
 8006e22:	68e3      	ldr	r3, [r4, #12]
 8006e24:	9903      	ldr	r1, [sp, #12]
 8006e26:	1a5b      	subs	r3, r3, r1
 8006e28:	42ab      	cmp	r3, r5
 8006e2a:	dcf2      	bgt.n	8006e12 <_printf_i+0x212>
 8006e2c:	e7eb      	b.n	8006e06 <_printf_i+0x206>
 8006e2e:	2500      	movs	r5, #0
 8006e30:	f104 0619 	add.w	r6, r4, #25
 8006e34:	e7f5      	b.n	8006e22 <_printf_i+0x222>
 8006e36:	bf00      	nop
 8006e38:	08006fb9 	.word	0x08006fb9
 8006e3c:	08006fca 	.word	0x08006fca

08006e40 <memmove>:
 8006e40:	4288      	cmp	r0, r1
 8006e42:	b510      	push	{r4, lr}
 8006e44:	eb01 0402 	add.w	r4, r1, r2
 8006e48:	d902      	bls.n	8006e50 <memmove+0x10>
 8006e4a:	4284      	cmp	r4, r0
 8006e4c:	4623      	mov	r3, r4
 8006e4e:	d807      	bhi.n	8006e60 <memmove+0x20>
 8006e50:	1e43      	subs	r3, r0, #1
 8006e52:	42a1      	cmp	r1, r4
 8006e54:	d008      	beq.n	8006e68 <memmove+0x28>
 8006e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e5e:	e7f8      	b.n	8006e52 <memmove+0x12>
 8006e60:	4402      	add	r2, r0
 8006e62:	4601      	mov	r1, r0
 8006e64:	428a      	cmp	r2, r1
 8006e66:	d100      	bne.n	8006e6a <memmove+0x2a>
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e72:	e7f7      	b.n	8006e64 <memmove+0x24>

08006e74 <_sbrk_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d06      	ldr	r5, [pc, #24]	@ (8006e90 <_sbrk_r+0x1c>)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	602b      	str	r3, [r5, #0]
 8006e80:	f7fb f994 	bl	80021ac <_sbrk>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_sbrk_r+0x1a>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_sbrk_r+0x1a>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	20000818 	.word	0x20000818

08006e94 <memcpy>:
 8006e94:	440a      	add	r2, r1
 8006e96:	4291      	cmp	r1, r2
 8006e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e9c:	d100      	bne.n	8006ea0 <memcpy+0xc>
 8006e9e:	4770      	bx	lr
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	d1f9      	bne.n	8006ea2 <memcpy+0xe>
 8006eae:	bd10      	pop	{r4, pc}

08006eb0 <_realloc_r>:
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4615      	mov	r5, r2
 8006eb8:	460c      	mov	r4, r1
 8006eba:	b921      	cbnz	r1, 8006ec6 <_realloc_r+0x16>
 8006ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	f7ff bc4b 	b.w	800675c <_malloc_r>
 8006ec6:	b92a      	cbnz	r2, 8006ed4 <_realloc_r+0x24>
 8006ec8:	f7ff fbdc 	bl	8006684 <_free_r>
 8006ecc:	2400      	movs	r4, #0
 8006ece:	4620      	mov	r0, r4
 8006ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed4:	f000 f81a 	bl	8006f0c <_malloc_usable_size_r>
 8006ed8:	4285      	cmp	r5, r0
 8006eda:	4606      	mov	r6, r0
 8006edc:	d802      	bhi.n	8006ee4 <_realloc_r+0x34>
 8006ede:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ee2:	d8f4      	bhi.n	8006ece <_realloc_r+0x1e>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	f7ff fc38 	bl	800675c <_malloc_r>
 8006eec:	4607      	mov	r7, r0
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0ec      	beq.n	8006ecc <_realloc_r+0x1c>
 8006ef2:	42b5      	cmp	r5, r6
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	bf28      	it	cs
 8006efa:	4632      	movcs	r2, r6
 8006efc:	f7ff ffca 	bl	8006e94 <memcpy>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7ff fbbe 	bl	8006684 <_free_r>
 8006f08:	463c      	mov	r4, r7
 8006f0a:	e7e0      	b.n	8006ece <_realloc_r+0x1e>

08006f0c <_malloc_usable_size_r>:
 8006f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f10:	1f18      	subs	r0, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfbc      	itt	lt
 8006f16:	580b      	ldrlt	r3, [r1, r0]
 8006f18:	18c0      	addlt	r0, r0, r3
 8006f1a:	4770      	bx	lr

08006f1c <_init>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr

08006f28 <_fini>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr
