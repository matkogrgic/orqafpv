
DroneStopwatch-copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000717c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800734c  0800734c  0000834c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d8  080073d8  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080073d8  080073d8  000083d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e0  080073e0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e0  080073e0  000083e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080073e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  20000060  08007448  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  08007448  00009800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ba9  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002966  00000000  00000000  0001dc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000205a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  00021878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023122  00000000  00000000  00022754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173f5  00000000  00000000  00045876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5d64  00000000  00000000  0005cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001329cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  00132a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00138258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007334 	.word	0x08007334

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007334 	.word	0x08007334

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	f023 030f 	bic.w	r3, r3, #15
 8000dfe:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f043 030c 	orr.w	r3, r3, #12
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	f043 030c 	orr.w	r3, r3, #12
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	791b      	ldrb	r3, [r3, #4]
 8000e36:	4619      	mov	r1, r3
 8000e38:	f107 0208 	add.w	r2, r7, #8
 8000e3c:	2364      	movs	r3, #100	@ 0x64
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2304      	movs	r3, #4
 8000e42:	f001 fcd5 	bl	80027f0 <HAL_I2C_Master_Transmit>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af02      	add	r7, sp, #8
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	460b      	mov	r3, r1
 8000e58:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f023 030f 	bic.w	r3, r3, #15
 8000e60:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	f043 030d 	orr.w	r3, r3, #13
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f043 0309 	orr.w	r3, r3, #9
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	f043 030d 	orr.w	r3, r3, #13
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	f043 0309 	orr.w	r3, r3, #9
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f107 0208 	add.w	r2, r7, #8
 8000e9e:	2364      	movs	r3, #100	@ 0x64
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	f001 fca4 	bl	80027f0 <HAL_I2C_Master_Transmit>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff96 	bl	8000dec <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e006      	b.n	8000ed4 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffc0 	bl	8000e4e <lcd_send_data>
    for (int i = 0; i < 70; i++)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b45      	cmp	r3, #69	@ 0x45
 8000ed8:	ddf5      	ble.n	8000ec6 <lcd_clear+0x16>
    }
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int row, int col)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
    if (row == 0)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e003      	b.n	8000f08 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f06:	607b      	str	r3, [r7, #4]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff ff6c 	bl	8000dec <lcd_send_cmd>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000f24:	2032      	movs	r0, #50	@ 0x32
 8000f26:	f001 f823 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f2a:	2130      	movs	r1, #48	@ 0x30
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff5d 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(5);
 8000f32:	2005      	movs	r0, #5
 8000f34:	f001 f81c 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f38:	2130      	movs	r1, #48	@ 0x30
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff56 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f001 f815 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f46:	2130      	movs	r1, #48	@ 0x30
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff4f 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(10);
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f001 f80e 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000f54:	2120      	movs	r1, #32
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff48 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 f807 	bl	8001f70 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8000f62:	2128      	movs	r1, #40	@ 0x28
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff41 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f001 f800 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000f70:	2108      	movs	r1, #8
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff3a 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fff9 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000f7e:	2101      	movs	r1, #1
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff33 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(2);
 8000f86:	2002      	movs	r0, #2
 8000f88:	f000 fff2 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000f8c:	2106      	movs	r1, #6
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff2c 	bl	8000dec <lcd_send_cmd>
    HAL_Delay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 ffeb 	bl	8001f70 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000f9a:	210c      	movs	r1, #12
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff25 	bl	8000dec <lcd_send_cmd>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8000fb4:	e007      	b.n	8000fc6 <lcd_puts+0x1c>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	603a      	str	r2, [r7, #0]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff44 	bl	8000e4e <lcd_send_data>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f3      	bne.n	8000fb6 <lcd_puts+0xc>
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_GPIO_EXTI_Callback>:
void start_stopwatch();
void stop_stopwatch();
void send_time_to_outputs();


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	currentMillis = HAL_GetTick();
 8000fe2:	f000 ffb9 	bl	8001f58 <HAL_GetTick>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a11      	ldr	r2, [pc, #68]	@ (8001030 <HAL_GPIO_EXTI_Callback+0x58>)
 8000fea:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == GPIO_PIN_0 && (currentMillis - previousMillis > 200)) {
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d11a      	bne.n	8001028 <HAL_GPIO_EXTI_Callback+0x50>
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ffe:	d913      	bls.n	8001028 <HAL_GPIO_EXTI_Callback+0x50>

        if(isRunning){	stop_stopwatch();  start_stop_stay = 3; }
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_GPIO_EXTI_Callback+0x60>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_EXTI_Callback+0x3e>
 800100a:	f000 f9d9 	bl	80013c0 <stop_stopwatch>
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <HAL_GPIO_EXTI_Callback+0x64>)
 8001010:	2203      	movs	r2, #3
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e004      	b.n	8001020 <HAL_GPIO_EXTI_Callback+0x48>
        else		 {	start_stopwatch(); start_stop_stay = 1; }
 8001016:	f000 f9c1 	bl	800139c <start_stopwatch>
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_GPIO_EXTI_Callback+0x64>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]

        previousMillis = currentMillis;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <HAL_GPIO_EXTI_Callback+0x58>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a03      	ldr	r2, [pc, #12]	@ (8001034 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001026:	6013      	str	r3, [r2, #0]
    }
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200006ac 	.word	0x200006ac
 8001034:	200006a8 	.word	0x200006a8
 8001038:	20000698 	.word	0x20000698
 800103c:	200006a6 	.word	0x200006a6

08001040 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && isRunning) { // Check if interrupt is from TIM2
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001050:	d109      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x26>
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x26>

            stopwatch_count++;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001064:	6013      	str	r3, [r2, #0]
        }


}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000698 	.word	0x20000698
 8001078:	20000694 	.word	0x20000694

0800107c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108c:	d11e      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0x50>
        // Capture the start of the pulse
        if (echo_captured == 0) {
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10a      	bne.n	80010ae <HAL_TIM_IC_CaptureCallback+0x32>
            echo_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001098:	2100      	movs	r1, #0
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f004 f838 	bl	8005110 <HAL_TIM_ReadCapturedValue>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80010a4:	6013      	str	r3, [r2, #0]
            echo_captured = 1;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x58>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
        else if (echo_captured == 1) {
            echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
            echo_captured = 2;  // Capture complete
        }
    }
}
 80010ac:	e00e      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0x50>
        else if (echo_captured == 1) {
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x58>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d109      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0x50>
            echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010b8:	2100      	movs	r1, #0
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f004 f828 	bl	8005110 <HAL_TIM_ReadCapturedValue>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <HAL_TIM_IC_CaptureCallback+0x60>)
 80010c4:	6013      	str	r3, [r2, #0]
            echo_captured = 2;  // Capture complete
 80010c6:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x58>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200006a4 	.word	0x200006a4
 80010d8:	2000069c 	.word	0x2000069c
 80010dc:	200006a0 	.word	0x200006a0

080010e0 <readSensor>:

void readSensor() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start the PWM (TRIG pulse)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4809      	ldr	r0, [pc, #36]	@ (800110c <readSensor+0x2c>)
 80010e8:	f003 fa42 	bl	8004570 <HAL_TIM_PWM_Start>
	    HAL_Delay(1);  							   // Pulse duration: 10us (10ms MATKO)
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 ff3f 	bl	8001f70 <HAL_Delay>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);   // Stop the PWM
 80010f2:	2100      	movs	r1, #0
 80010f4:	4805      	ldr	r0, [pc, #20]	@ (800110c <readSensor+0x2c>)
 80010f6:	f003 fb03 	bl	8004700 <HAL_TIM_PWM_Stop>
	    __HAL_TIM_SET_COUNTER(&htim2, 0);          // Reset counter for TIM2
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <readSensor+0x30>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
	    echo_captured = 0;                         // Reset capture state
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <readSensor+0x34>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000118 	.word	0x20000118
 8001110:	200000d0 	.word	0x200000d0
 8001114:	200006a4 	.word	0x200006a4

08001118 <getDistanceInCm>:

float getDistanceInCm() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
    if (echo_captured == 2) {
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <getDistanceInCm+0x4c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d115      	bne.n	8001154 <getDistanceInCm+0x3c>
        uint32_t pulse_width = echo_end - echo_start;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <getDistanceInCm+0x50>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <getDistanceInCm+0x54>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	607b      	str	r3, [r7, #4]
        return (pulse_width / 58.0); // Convert to cm
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fa05 	bl	8000544 <__aeabi_ui2d>
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <getDistanceInCm+0x58>)
 8001140:	f7ff fba4 	bl	800088c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fc86 	bl	8000a5c <__aeabi_d2f>
 8001150:	4603      	mov	r3, r0
 8001152:	e000      	b.n	8001156 <getDistanceInCm+0x3e>
    }
    return -1;
 8001154:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <getDistanceInCm+0x5c>)
}
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200006a4 	.word	0x200006a4
 8001168:	200006a0 	.word	0x200006a0
 800116c:	2000069c 	.word	0x2000069c
 8001170:	404d0000 	.word	0x404d0000
 8001174:	bf800000 	.word	0xbf800000

08001178 <checkForDrone>:

void checkForDrone() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
    readSensor();
 800117e:	f7ff ffaf 	bl	80010e0 <readSensor>
    HAL_Delay(checkDelay);
 8001182:	4b51      	ldr	r3, [pc, #324]	@ (80012c8 <checkForDrone+0x150>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fef1 	bl	8001f70 <HAL_Delay>
    float distance = getDistanceInCm();
 800118e:	f7ff ffc3 	bl	8001118 <getDistanceInCm>
 8001192:	ed87 0a01 	vstr	s0, [r7, #4]
    checkDelay = 10;
 8001196:	4b4c      	ldr	r3, [pc, #304]	@ (80012c8 <checkForDrone+0x150>)
 8001198:	220a      	movs	r2, #10
 800119a:	701a      	strb	r2, [r3, #0]
    uint8_t currentState = (distance > 0 && distance < 30) ? 1 : 0;
 800119c:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	dd0a      	ble.n	80011c0 <checkForDrone+0x48>
 80011aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ae:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d501      	bpl.n	80011c0 <checkForDrone+0x48>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <checkForDrone+0x4a>
 80011c0:	2300      	movs	r3, #0
 80011c2:	70fb      	strb	r3, [r7, #3]


    if(currentState != previousState){
 80011c4:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <checkForDrone+0x154>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d073      	beq.n	80012b8 <checkForDrone+0x140>
    checkDelay = 200;
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <checkForDrone+0x150>)
 80011d2:	22c8      	movs	r2, #200	@ 0xc8
 80011d4:	701a      	strb	r2, [r3, #0]
    if (previousState == 1 && currentState == 0 && start_stop_stay % 4 == 0) {
 80011d6:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <checkForDrone+0x154>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d119      	bne.n	8001214 <checkForDrone+0x9c>
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d116      	bne.n	8001214 <checkForDrone+0x9c>
 80011e6:	4b3a      	ldr	r3, [pc, #232]	@ (80012d0 <checkForDrone+0x158>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10e      	bne.n	8001214 <checkForDrone+0x9c>
        if (!isRunning ) {
 80011f6:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <checkForDrone+0x15c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d15b      	bne.n	80012b8 <checkForDrone+0x140>
            start_stopwatch();
 8001200:	f000 f8cc 	bl	800139c <start_stopwatch>
            start_stop_stay++;;
 8001204:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <checkForDrone+0x158>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3301      	adds	r3, #1
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <checkForDrone+0x158>)
 8001210:	701a      	strb	r2, [r3, #0]
        if (!isRunning ) {
 8001212:	e051      	b.n	80012b8 <checkForDrone+0x140>
        }
    }

    else if (previousState == 0 && currentState == 1 && start_stop_stay % 4 == 1) {
 8001214:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <checkForDrone+0x154>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d119      	bne.n	8001252 <checkForDrone+0xda>
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d116      	bne.n	8001252 <checkForDrone+0xda>
 8001224:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <checkForDrone+0x158>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10e      	bne.n	8001252 <checkForDrone+0xda>
        if (isRunning ) {
 8001234:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <checkForDrone+0x15c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d03c      	beq.n	80012b8 <checkForDrone+0x140>
            stop_stopwatch();
 800123e:	f000 f8bf 	bl	80013c0 <stop_stopwatch>
            start_stop_stay++;
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <checkForDrone+0x158>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <checkForDrone+0x158>)
 800124e:	701a      	strb	r2, [r3, #0]
        if (isRunning ) {
 8001250:	e032      	b.n	80012b8 <checkForDrone+0x140>
        }
    }

    else if(previousState == 1 && currentState == 0 && start_stop_stay % 4 == 2){
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <checkForDrone+0x154>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d114      	bne.n	8001286 <checkForDrone+0x10e>
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d111      	bne.n	8001286 <checkForDrone+0x10e>
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <checkForDrone+0x158>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d109      	bne.n	8001286 <checkForDrone+0x10e>
        send_time_to_outputs();
 8001272:	f000 f831 	bl	80012d8 <send_time_to_outputs>
        start_stop_stay++;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <checkForDrone+0x158>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <checkForDrone+0x158>)
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e018      	b.n	80012b8 <checkForDrone+0x140>
        }

    else if(previousState == 0 && currentState == 1 && start_stop_stay % 4 == 3){
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <checkForDrone+0x154>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d113      	bne.n	80012b8 <checkForDrone+0x140>
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d110      	bne.n	80012b8 <checkForDrone+0x140>
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <checkForDrone+0x158>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d108      	bne.n	80012b8 <checkForDrone+0x140>
            send_time_to_outputs();
 80012a6:	f000 f817 	bl	80012d8 <send_time_to_outputs>
            start_stop_stay++;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <checkForDrone+0x158>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <checkForDrone+0x158>)
 80012b6:	701a      	strb	r2, [r3, #0]
            }
    }


    previousState = currentState;
 80012b8:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <checkForDrone+0x154>)
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	7013      	strb	r3, [r2, #0]

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000
 80012cc:	200006a5 	.word	0x200006a5
 80012d0:	200006a6 	.word	0x200006a6
 80012d4:	20000698 	.word	0x20000698

080012d8 <send_time_to_outputs>:


void send_time_to_outputs() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
	HAL_Delay(10);
 80012de:	200a      	movs	r0, #10
 80012e0:	f000 fe46 	bl	8001f70 <HAL_Delay>
    char buffer[20]="";
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
    sprintf(buffer, "\rTime: %lu.%02lus", stopwatch_count / 100, stopwatch_count % 100);
 80012f6:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <send_time_to_outputs+0xac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <send_time_to_outputs+0xb0>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0959      	lsrs	r1, r3, #5
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <send_time_to_outputs+0xac>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <send_time_to_outputs+0xb0>)
 8001308:	fba3 0302 	umull	r0, r3, r3, r2
 800130c:	095b      	lsrs	r3, r3, #5
 800130e:	2064      	movs	r0, #100	@ 0x64
 8001310:	fb00 f303 	mul.w	r3, r0, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	1d38      	adds	r0, r7, #4
 8001318:	460a      	mov	r2, r1
 800131a:	491c      	ldr	r1, [pc, #112]	@ (800138c <send_time_to_outputs+0xb4>)
 800131c:	f005 fb6a 	bl	80069f4 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	1d39      	adds	r1, r7, #4
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	4817      	ldr	r0, [pc, #92]	@ (8001390 <send_time_to_outputs+0xb8>)
 8001334:	f004 fc74 	bl	8005c20 <HAL_UART_Transmit>


    // snprintf - ensures that the buffer is not overrun and always null-terminated (no random letters from previous itteration
    snprintf(buffer, sizeof(buffer), "Time: %lu.%02lus     ", stopwatch_count / 100, stopwatch_count % 100);
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <send_time_to_outputs+0xac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <send_time_to_outputs+0xb0>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0959      	lsrs	r1, r3, #5
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <send_time_to_outputs+0xac>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <send_time_to_outputs+0xb0>)
 800134a:	fba3 0302 	umull	r0, r3, r3, r2
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2064      	movs	r0, #100	@ 0x64
 8001352:	fb00 f303 	mul.w	r3, r0, r3
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	1d38      	adds	r0, r7, #4
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	460b      	mov	r3, r1
 800135e:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <send_time_to_outputs+0xbc>)
 8001360:	2114      	movs	r1, #20
 8001362:	f005 fb13 	bl	800698c <sniprintf>
    lcd_gotoxy(&lcd1, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <send_time_to_outputs+0xc0>)
 800136c:	f7ff fdba 	bl	8000ee4 <lcd_gotoxy>
    lcd_puts(&lcd1, buffer);
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4808      	ldr	r0, [pc, #32]	@ (8001398 <send_time_to_outputs+0xc0>)
 8001376:	f7ff fe18 	bl	8000faa <lcd_puts>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000694 	.word	0x20000694
 8001388:	51eb851f 	.word	0x51eb851f
 800138c:	0800734c 	.word	0x0800734c
 8001390:	20000160 	.word	0x20000160
 8001394:	08007360 	.word	0x08007360
 8001398:	2000068c 	.word	0x2000068c

0800139c <start_stopwatch>:

void start_stopwatch() {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
    stopwatch_count = 0;
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <start_stopwatch+0x1c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    isRunning = 1;
 80013a6:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <start_stopwatch+0x20>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000694 	.word	0x20000694
 80013bc:	20000698 	.word	0x20000698

080013c0 <stop_stopwatch>:

void stop_stopwatch() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    isRunning = 0;
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <stop_stopwatch+0x14>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
    send_time_to_outputs();
 80013ca:	f7ff ff85 	bl	80012d8 <send_time_to_outputs>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000698 	.word	0x20000698

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fd56 	bl	8001e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f83a 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f000 fa10 	bl	8001808 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80013e8:	f000 f9b6 	bl	8001758 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013ec:	f000 f9de 	bl	80017ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80013f0:	f000 f8cc 	bl	800158c <MX_TIM2_Init>
  MX_TIM3_Init();
 80013f4:	f000 f93a 	bl	800166c <MX_TIM3_Init>
  MX_I2C1_Init();
 80013f8:	f000 f89a 	bl	8001530 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Start the TIM2 base timer for input capture
 80013fc:	4811      	ldr	r0, [pc, #68]	@ (8001444 <main+0x6c>)
 80013fe:	f002 ffed 	bl	80043dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);  // Start TIM2 input capture for ECHO signal
 8001402:	2100      	movs	r1, #0
 8001404:	480f      	ldr	r0, [pc, #60]	@ (8001444 <main+0x6c>)
 8001406:	f003 fa45 	bl	8004894 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Start PWM for TRIG pin
 800140a:	2100      	movs	r1, #0
 800140c:	480e      	ldr	r0, [pc, #56]	@ (8001448 <main+0x70>)
 800140e:	f003 f8af 	bl	8004570 <HAL_TIM_PWM_Start>

  // LCD initialization
	  lcd1.hi2c = &hi2c1;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <main+0x74>)
 8001414:	4a0e      	ldr	r2, [pc, #56]	@ (8001450 <main+0x78>)
 8001416:	601a      	str	r2, [r3, #0]
	  lcd1.address = 0x4E;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <main+0x74>)
 800141a:	224e      	movs	r2, #78	@ 0x4e
 800141c:	711a      	strb	r2, [r3, #4]
	  lcd_init(&lcd1);
 800141e:	480b      	ldr	r0, [pc, #44]	@ (800144c <main+0x74>)
 8001420:	f7ff fd7c 	bl	8000f1c <lcd_init>

  // CONTENT ON LCD
	  lcd_clear(&lcd1);
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <main+0x74>)
 8001426:	f7ff fd43 	bl	8000eb0 <lcd_clear>
	  send_time_to_outputs();
 800142a:	f7ff ff55 	bl	80012d8 <send_time_to_outputs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  checkForDrone();
 800142e:	f7ff fea3 	bl	8001178 <checkForDrone>
	  if(isRunning) send_time_to_outputs();
 8001432:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <main+0x7c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f8      	beq.n	800142e <main+0x56>
 800143c:	f7ff ff4c 	bl	80012d8 <send_time_to_outputs>
	  checkForDrone();
 8001440:	e7f5      	b.n	800142e <main+0x56>
 8001442:	bf00      	nop
 8001444:	200000d0 	.word	0x200000d0
 8001448:	20000118 	.word	0x20000118
 800144c:	2000068c 	.word	0x2000068c
 8001450:	2000007c 	.word	0x2000007c
 8001454:	20000698 	.word	0x20000698

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2234      	movs	r2, #52	@ 0x34
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f005 fae4 	bl	8006a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	4a28      	ldr	r2, [pc, #160]	@ (8001528 <SystemClock_Config+0xd0>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	@ 0x40
 800148c:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <SystemClock_Config+0xd0>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a22      	ldr	r2, [pc, #136]	@ (800152c <SystemClock_Config+0xd4>)
 80014a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <SystemClock_Config+0xd4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014be:	2302      	movs	r3, #2
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014c8:	2304      	movs	r3, #4
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014cc:	23a8      	movs	r3, #168	@ 0xa8
 80014ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014d4:	2307      	movs	r3, #7
 80014d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d8:	2302      	movs	r3, #2
 80014da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fc8d 	bl	8003e00 <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014ec:	f000 fa50 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f4:	2302      	movs	r3, #2
 80014f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001500:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001506:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2105      	movs	r1, #5
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe02 	bl	8003118 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800151a:	f000 fa39 	bl	8001990 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	@ 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	@ (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f000 fffb 	bl	8002568 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 fa0a 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000007c 	.word	0x2000007c
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015c0:	2253      	movs	r2, #83	@ 0x53
 80015c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80015ca:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015de:	4822      	ldr	r0, [pc, #136]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015e0:	f002 feac 	bl	800433c <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80015ea:	f000 f9d1 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	4619      	mov	r1, r3
 80015fa:	481b      	ldr	r0, [pc, #108]	@ (8001668 <MX_TIM2_Init+0xdc>)
 80015fc:	f003 fcc0 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001606:	f000 f9c3 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800160a:	4817      	ldr	r0, [pc, #92]	@ (8001668 <MX_TIM2_Init+0xdc>)
 800160c:	f003 f8e8 	bl	80047e0 <HAL_TIM_IC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001616:	f000 f9bb 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	480f      	ldr	r0, [pc, #60]	@ (8001668 <MX_TIM2_Init+0xdc>)
 800162a:	f004 fa19 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001634:	f000 f9ac 	bl	8001990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001638:	230a      	movs	r3, #10
 800163a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800163c:	2301      	movs	r3, #1
 800163e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <MX_TIM2_Init+0xdc>)
 8001650:	f003 fb38 	bl	8004cc4 <HAL_TIM_IC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800165a:	f000 f999 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000d0 	.word	0x200000d0

0800166c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	@ 0x38
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169c:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <MX_TIM3_Init+0xe4>)
 800169e:	4a2d      	ldr	r2, [pc, #180]	@ (8001754 <MX_TIM3_Init+0xe8>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016a4:	2253      	movs	r2, #83	@ 0x53
 80016a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80016b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c2:	4823      	ldr	r0, [pc, #140]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016c4:	f002 fe3a 	bl	800433c <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016ce:	f000 f95f 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016dc:	4619      	mov	r1, r3
 80016de:	481c      	ldr	r0, [pc, #112]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016e0:	f003 fc4e 	bl	8004f80 <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016ea:	f000 f951 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ee:	4818      	ldr	r0, [pc, #96]	@ (8001750 <MX_TIM3_Init+0xe4>)
 80016f0:	f002 fee4 	bl	80044bc <HAL_TIM_PWM_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016fa:	f000 f949 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	4619      	mov	r1, r3
 800170c:	4810      	ldr	r0, [pc, #64]	@ (8001750 <MX_TIM3_Init+0xe4>)
 800170e:	f004 f9a7 	bl	8005a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001718:	f000 f93a 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171c:	2360      	movs	r3, #96	@ 0x60
 800171e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 9;
 8001720:	2309      	movs	r3, #9
 8001722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	@ (8001750 <MX_TIM3_Init+0xe4>)
 8001734:	f003 fb62 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800173e:	f000 f927 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001742:	4803      	ldr	r0, [pc, #12]	@ (8001750 <MX_TIM3_Init+0xe4>)
 8001744:	f000 f9fe 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 8001748:	bf00      	nop
 800174a:	3738      	adds	r7, #56	@ 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000118 	.word	0x20000118
 8001754:	40000400 	.word	0x40000400

08001758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <MX_USART3_UART_Init+0x50>)
 8001760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_USART3_UART_Init+0x4c>)
 8001790:	f004 f9f6 	bl	8005b80 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800179a:	f000 f8f9 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000160 	.word	0x20000160
 80017a8:	40004800 	.word	0x40004800

080017ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ba:	2206      	movs	r2, #6
 80017bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c0:	2202      	movs	r2, #2
 80017c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017cc:	2202      	movs	r2, #2
 80017ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017dc:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f0:	f001 fb57 	bl	8002ea2 <HAL_PCD_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017fa:	f000 f8c9 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200001a8 	.word	0x200001a8

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	4b56      	ldr	r3, [pc, #344]	@ (800197c <MX_GPIO_Init+0x174>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a55      	ldr	r2, [pc, #340]	@ (800197c <MX_GPIO_Init+0x174>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b53      	ldr	r3, [pc, #332]	@ (800197c <MX_GPIO_Init+0x174>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	4b4f      	ldr	r3, [pc, #316]	@ (800197c <MX_GPIO_Init+0x174>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a4e      	ldr	r2, [pc, #312]	@ (800197c <MX_GPIO_Init+0x174>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b4c      	ldr	r3, [pc, #304]	@ (800197c <MX_GPIO_Init+0x174>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b48      	ldr	r3, [pc, #288]	@ (800197c <MX_GPIO_Init+0x174>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a47      	ldr	r2, [pc, #284]	@ (800197c <MX_GPIO_Init+0x174>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b45      	ldr	r3, [pc, #276]	@ (800197c <MX_GPIO_Init+0x174>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b41      	ldr	r3, [pc, #260]	@ (800197c <MX_GPIO_Init+0x174>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a40      	ldr	r2, [pc, #256]	@ (800197c <MX_GPIO_Init+0x174>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b3e      	ldr	r3, [pc, #248]	@ (800197c <MX_GPIO_Init+0x174>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b3a      	ldr	r3, [pc, #232]	@ (800197c <MX_GPIO_Init+0x174>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a39      	ldr	r2, [pc, #228]	@ (800197c <MX_GPIO_Init+0x174>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b37      	ldr	r3, [pc, #220]	@ (800197c <MX_GPIO_Init+0x174>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b33      	ldr	r3, [pc, #204]	@ (800197c <MX_GPIO_Init+0x174>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a32      	ldr	r2, [pc, #200]	@ (800197c <MX_GPIO_Init+0x174>)
 80018b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b30      	ldr	r3, [pc, #192]	@ (800197c <MX_GPIO_Init+0x174>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80018cc:	482c      	ldr	r0, [pc, #176]	@ (8001980 <MX_GPIO_Init+0x178>)
 80018ce:	f000 fe19 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2140      	movs	r1, #64	@ 0x40
 80018d6:	482b      	ldr	r0, [pc, #172]	@ (8001984 <MX_GPIO_Init+0x17c>)
 80018d8:	f000 fe14 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4825      	ldr	r0, [pc, #148]	@ (8001988 <MX_GPIO_Init+0x180>)
 80018f4:	f000 fc72 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018f8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	481b      	ldr	r0, [pc, #108]	@ (8001980 <MX_GPIO_Init+0x178>)
 8001912:	f000 fc63 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001916:	2340      	movs	r3, #64	@ 0x40
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4815      	ldr	r0, [pc, #84]	@ (8001984 <MX_GPIO_Init+0x17c>)
 800192e:	f000 fc55 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	480f      	ldr	r0, [pc, #60]	@ (8001984 <MX_GPIO_Init+0x17c>)
 8001946:	f000 fc49 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800194a:	2301      	movs	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800194e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	480b      	ldr	r0, [pc, #44]	@ (800198c <MX_GPIO_Init+0x184>)
 8001960:	f000 fc3c 	bl	80021dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2102      	movs	r1, #2
 8001968:	2006      	movs	r0, #6
 800196a:	f000 fc00 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800196e:	2006      	movs	r0, #6
 8001970:	f000 fc19 	bl	80021a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001974:	bf00      	nop
 8001976:	3730      	adds	r7, #48	@ 0x30
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	40020400 	.word	0x40020400
 8001984:	40021800 	.word	0x40021800
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <Error_Handler+0x8>

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_I2C_MspInit+0x84>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12c      	bne.n	8001a68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a2a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a30:	2312      	movs	r3, #18
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <HAL_I2C_MspInit+0x8c>)
 8001a48:	f000 fbc8 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	@ 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020400 	.word	0x40020400

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a9c:	d134      	bne.n	8001b08 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4812      	ldr	r0, [pc, #72]	@ (8001b3c <HAL_TIM_Base_MspInit+0xc0>)
 8001af2:	f000 fb73 	bl	80021dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	201c      	movs	r0, #28
 8001afc:	f000 fb37 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b00:	201c      	movs	r0, #28
 8001b02:	f000 fb50 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b06:	e012      	b.n	8001b2e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <HAL_TIM_Base_MspInit+0xc4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10d      	bne.n	8001b2e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_TIM_Base_MspInit+0xbc>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	@ 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40000400 	.word	0x40000400

08001b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <HAL_TIM_MspPostInit+0x68>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d11d      	bne.n	8001ba2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_TIM_MspPostInit+0x6c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b82:	2340      	movs	r3, #64	@ 0x40
 8001b84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <HAL_TIM_MspPostInit+0x70>)
 8001b9e:	f000 fb1d 	bl	80021dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <HAL_UART_MspInit+0x84>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_UART_MspInit+0x88>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <HAL_UART_MspInit+0x88>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_UART_MspInit+0x88>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_UART_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <HAL_UART_MspInit+0x88>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_UART_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c24:	2307      	movs	r3, #7
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <HAL_UART_MspInit+0x8c>)
 8001c30:	f000 fad4 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	@ 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40004800 	.word	0x40004800
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020c00 	.word	0x40020c00

08001c48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0a0      	sub	sp, #128	@ 0x80
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	225c      	movs	r2, #92	@ 0x5c
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 fee3 	bl	8006a34 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c76:	d14e      	bne.n	8001d16 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fb60 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001c92:	f7ff fe7d 	bl	8001990 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a20      	ldr	r2, [pc, #128]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cb2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cc4:	230a      	movs	r3, #10
 8001cc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4815      	ldr	r0, [pc, #84]	@ (8001d24 <HAL_PCD_MspInit+0xdc>)
 8001cd0:	f000 fa84 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <HAL_PCD_MspInit+0xdc>)
 8001cea:	f000 fa77 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a07      	ldr	r2, [pc, #28]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_PCD_MspInit+0xd8>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001d16:	bf00      	nop
 8001d18:	3780      	adds	r7, #128	@ 0x80
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <NMI_Handler+0x4>

08001d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <MemManage_Handler+0x4>

08001d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7e:	f000 f8d7 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f000 fbd4 	bl	8002538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <TIM2_IRQHandler+0x10>)
 8001d9a:	f002 fea3 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200000d0 	.word	0x200000d0

08001da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <_sbrk+0x5c>)
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <_sbrk+0x60>)
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <_sbrk+0x64>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <_sbrk+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd8:	f004 fe34 	bl	8006a44 <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	220c      	movs	r2, #12
 8001de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e009      	b.n	8001dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <_sbrk+0x64>)
 8001df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20020000 	.word	0x20020000
 8001e08:	00000400 	.word	0x00000400
 8001e0c:	200006b0 	.word	0x200006b0
 8001e10:	20000800 	.word	0x20000800

08001e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e3c:	f7ff ffea 	bl	8001e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	@ (8001e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	@ (8001e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f004 fdf3 	bl	8006a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7ff fab5 	bl	80013d8 <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001e7c:	080073e8 	.word	0x080073e8
  ldr r2, =_sbss
 8001e80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e84:	20000800 	.word	0x20000800

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <HAL_Init+0x40>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_Init+0x40>)
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <HAL_Init+0x40>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f94f 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fd6c 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f967 	bl	80021c2 <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 f92f 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000004 	.word	0x20000004
 8001f28:	2000000c 	.word	0x2000000c
 8001f2c:	20000008 	.word	0x20000008

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	200006b4 	.word	0x200006b4

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200006b4 	.word	0x200006b4

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	@ (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e165      	b.n	80024c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8154 	bne.w	80024be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80ae 	beq.w	80024be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b5d      	ldr	r3, [pc, #372]	@ (80024dc <HAL_GPIO_Init+0x300>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	4a5c      	ldr	r2, [pc, #368]	@ (80024dc <HAL_GPIO_Init+0x300>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002370:	6453      	str	r3, [r2, #68]	@ 0x44
 8002372:	4b5a      	ldr	r3, [pc, #360]	@ (80024dc <HAL_GPIO_Init+0x300>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <HAL_GPIO_Init+0x304>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	@ (80024e4 <HAL_GPIO_Init+0x308>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d025      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4e      	ldr	r2, [pc, #312]	@ (80024e8 <HAL_GPIO_Init+0x30c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <HAL_GPIO_Init+0x216>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4d      	ldr	r2, [pc, #308]	@ (80024ec <HAL_GPIO_Init+0x310>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_GPIO_Init+0x212>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	@ (80024f0 <HAL_GPIO_Init+0x314>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0x20e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4b      	ldr	r2, [pc, #300]	@ (80024f4 <HAL_GPIO_Init+0x318>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00d      	beq.n	80023e6 <HAL_GPIO_Init+0x20a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4a      	ldr	r2, [pc, #296]	@ (80024f8 <HAL_GPIO_Init+0x31c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x206>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a49      	ldr	r2, [pc, #292]	@ (80024fc <HAL_GPIO_Init+0x320>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_GPIO_Init+0x202>
 80023da:	2306      	movs	r3, #6
 80023dc:	e00c      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023de:	2307      	movs	r3, #7
 80023e0:	e00a      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x21c>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	@ (80024e0 <HAL_GPIO_Init+0x304>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a31      	ldr	r2, [pc, #196]	@ (8002500 <HAL_GPIO_Init+0x324>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a26      	ldr	r2, [pc, #152]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_GPIO_Init+0x324>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <HAL_GPIO_Init+0x324>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_GPIO_Init+0x324>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f ae96 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40013c00 	.word	0x40013c00

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002542:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fd3e 	bl	8000fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40013c00 	.word	0x40013c00

08002568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e12b      	b.n	80027d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fa2c 	bl	80019ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	@ 0x24
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025cc:	f000 fe96 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80025d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a81      	ldr	r2, [pc, #516]	@ (80027dc <HAL_I2C_Init+0x274>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d807      	bhi.n	80025ec <HAL_I2C_Init+0x84>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a80      	ldr	r2, [pc, #512]	@ (80027e0 <HAL_I2C_Init+0x278>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	bf94      	ite	ls
 80025e4:	2301      	movls	r3, #1
 80025e6:	2300      	movhi	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e006      	b.n	80025fa <HAL_I2C_Init+0x92>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a7d      	ldr	r2, [pc, #500]	@ (80027e4 <HAL_I2C_Init+0x27c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf94      	ite	ls
 80025f4:	2301      	movls	r3, #1
 80025f6:	2300      	movhi	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0e7      	b.n	80027d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a78      	ldr	r2, [pc, #480]	@ (80027e8 <HAL_I2C_Init+0x280>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0c9b      	lsrs	r3, r3, #18
 800260c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a6a      	ldr	r2, [pc, #424]	@ (80027dc <HAL_I2C_Init+0x274>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d802      	bhi.n	800263c <HAL_I2C_Init+0xd4>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3301      	adds	r3, #1
 800263a:	e009      	b.n	8002650 <HAL_I2C_Init+0xe8>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	4a69      	ldr	r2, [pc, #420]	@ (80027ec <HAL_I2C_Init+0x284>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	3301      	adds	r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	430b      	orrs	r3, r1
 8002656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002662:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	495c      	ldr	r1, [pc, #368]	@ (80027dc <HAL_I2C_Init+0x274>)
 800266c:	428b      	cmp	r3, r1
 800266e:	d819      	bhi.n	80026a4 <HAL_I2C_Init+0x13c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e59      	subs	r1, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fbb1 f3f3 	udiv	r3, r1, r3
 800267e:	1c59      	adds	r1, r3, #1
 8002680:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002684:	400b      	ands	r3, r1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_I2C_Init+0x138>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e59      	subs	r1, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fbb1 f3f3 	udiv	r3, r1, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	e051      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026a0:	2304      	movs	r3, #4
 80026a2:	e04f      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d111      	bne.n	80026d0 <HAL_I2C_Init+0x168>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	440b      	add	r3, r1
 80026ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e012      	b.n	80026f6 <HAL_I2C_Init+0x18e>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Init+0x196>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e022      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10e      	bne.n	8002724 <HAL_I2C_Init+0x1bc>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1e58      	subs	r0, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	440b      	add	r3, r1
 8002714:	fbb0 f3f3 	udiv	r3, r0, r3
 8002718:	3301      	adds	r3, #1
 800271a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	0099      	lsls	r1, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	fbb0 f3f3 	udiv	r3, r0, r3
 800273a:	3301      	adds	r3, #1
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	6809      	ldr	r1, [r1, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002772:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6911      	ldr	r1, [r2, #16]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	4311      	orrs	r1, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	430b      	orrs	r3, r1
 8002786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	000186a0 	.word	0x000186a0
 80027e0:	001e847f 	.word	0x001e847f
 80027e4:	003d08ff 	.word	0x003d08ff
 80027e8:	431bde83 	.word	0x431bde83
 80027ec:	10624dd3 	.word	0x10624dd3

080027f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	460b      	mov	r3, r1
 80027fe:	817b      	strh	r3, [r7, #10]
 8002800:	4613      	mov	r3, r2
 8002802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff fba8 	bl	8001f58 <HAL_GetTick>
 8002808:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	f040 80e0 	bne.w	80029d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2319      	movs	r3, #25
 800281e:	2201      	movs	r2, #1
 8002820:	4970      	ldr	r1, [pc, #448]	@ (80029e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f964 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
 8002830:	e0d3      	b.n	80029da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_I2C_Master_Transmit+0x50>
 800283c:	2302      	movs	r3, #2
 800283e:	e0cc      	b.n	80029da <HAL_I2C_Master_Transmit+0x1ea>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d007      	beq.n	8002866 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2221      	movs	r2, #33	@ 0x21
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2210      	movs	r2, #16
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	893a      	ldrh	r2, [r7, #8]
 8002896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a50      	ldr	r2, [pc, #320]	@ (80029e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80028a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028a8:	8979      	ldrh	r1, [r7, #10]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	6a3a      	ldr	r2, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f89c 	bl	80029ec <I2C_MasterRequestWrite>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e08d      	b.n	80029da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028d4:	e066      	b.n	80029a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fa22 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d107      	bne.n	80028fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e06b      	b.n	80029da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b04      	cmp	r3, #4
 800293e:	d11b      	bne.n	8002978 <HAL_I2C_Master_Transmit+0x188>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d017      	beq.n	8002978 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	6a39      	ldr	r1, [r7, #32]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fa19 	bl	8002db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	2b04      	cmp	r3, #4
 800298e:	d107      	bne.n	80029a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e01a      	b.n	80029da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d194      	bne.n	80028d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e000      	b.n	80029da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
  }
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	00100002 	.word	0x00100002
 80029e8:	ffff0000 	.word	0xffff0000

080029ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	460b      	mov	r3, r1
 80029fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d006      	beq.n	8002a16 <I2C_MasterRequestWrite+0x2a>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d003      	beq.n	8002a16 <I2C_MasterRequestWrite+0x2a>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a14:	d108      	bne.n	8002a28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e00b      	b.n	8002a40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	2b12      	cmp	r3, #18
 8002a2e:	d107      	bne.n	8002a40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f84f 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a66:	d103      	bne.n	8002a70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e035      	b.n	8002ae0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a7c:	d108      	bne.n	8002a90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a8c:	611a      	str	r2, [r3, #16]
 8002a8e:	e01b      	b.n	8002ac8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a90:	897b      	ldrh	r3, [r7, #10]
 8002a92:	11db      	asrs	r3, r3, #7
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 0306 	and.w	r3, r3, #6
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f063 030f 	orn	r3, r3, #15
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	490e      	ldr	r1, [pc, #56]	@ (8002ae8 <I2C_MasterRequestWrite+0xfc>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f898 	bl	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e010      	b.n	8002ae0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4907      	ldr	r1, [pc, #28]	@ (8002aec <I2C_MasterRequestWrite+0x100>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f888 	bl	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	00010008 	.word	0x00010008
 8002aec:	00010002 	.word	0x00010002

08002af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b00:	e048      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d044      	beq.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7ff fa25 	bl	8001f58 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d139      	bne.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d10d      	bne.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	43da      	mvns	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	e00c      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d116      	bne.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e023      	b.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0c1b      	lsrs	r3, r3, #16
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10d      	bne.n	8002bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	e00c      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d093      	beq.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf2:	e071      	b.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c02:	d123      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f043 0204 	orr.w	r2, r3, #4
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e067      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d041      	beq.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7ff f980 	bl	8001f58 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d136      	bne.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10c      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	e00b      	b.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e021      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10c      	bne.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e00b      	b.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af6d 	bne.w	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d30:	e034      	b.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f886 	bl	8002e44 <I2C_IsAcknowledgeFailed>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d028      	beq.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7ff f905 	bl	8001f58 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d11d      	bne.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6a:	2b80      	cmp	r3, #128	@ 0x80
 8002d6c:	d016      	beq.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e007      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d1c3      	bne.n	8002d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc0:	e034      	b.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f83e 	bl	8002e44 <I2C_IsAcknowledgeFailed>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d028      	beq.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7ff f8bd 	bl	8001f58 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11d      	bne.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d016      	beq.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e007      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d1c3      	bne.n	8002dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5a:	d11b      	bne.n	8002e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	f043 0204 	orr.w	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af02      	add	r7, sp, #8
 8002ea8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e108      	b.n	80030c6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe feba 	bl	8001c48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ee2:	d102      	bne.n	8002eea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 fab6 	bl	8006460 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7c1a      	ldrb	r2, [r3, #16]
 8002efc:	f88d 2000 	strb.w	r2, [sp]
 8002f00:	3304      	adds	r3, #4
 8002f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f04:	f003 fa48 	bl	8006398 <USB_CoreInit>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0d5      	b.n	80030c6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 faae 	bl	8006482 <USB_SetCurrentMode>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0c6      	b.n	80030c6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	e04a      	b.n	8002fd4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3315      	adds	r3, #21
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3314      	adds	r3, #20
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	b298      	uxth	r0, r3
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	332e      	adds	r3, #46	@ 0x2e
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	331c      	adds	r3, #28
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3320      	adds	r3, #32
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3324      	adds	r3, #36	@ 0x24
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d3af      	bcc.n	8002f3e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e044      	b.n	800306e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	3301      	adds	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	791b      	ldrb	r3, [r3, #4]
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	429a      	cmp	r2, r3
 8003076:	d3b5      	bcc.n	8002fe4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7c1a      	ldrb	r2, [r3, #16]
 8003080:	f88d 2000 	strb.w	r2, [sp]
 8003084:	3304      	adds	r3, #4
 8003086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003088:	f003 fa48 	bl	800651c <USB_DevInit>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e013      	b.n	80030c6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7b1b      	ldrb	r3, [r3, #12]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f80a 	bl	80030ce <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fc03 	bl	80068ca <USB_DevDisconnect>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	f043 0303 	orr.w	r3, r3, #3
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cc      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b68      	ldr	r3, [pc, #416]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d90c      	bls.n	8003154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b65      	ldr	r3, [pc, #404]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a58      	ldr	r2, [pc, #352]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a52      	ldr	r2, [pc, #328]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800318e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b3f      	ldr	r3, [pc, #252]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e067      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b37      	ldr	r3, [pc, #220]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4934      	ldr	r1, [pc, #208]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fe fea6 	bl	8001f58 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe fea2 	bl	8001f58 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2b      	ldr	r3, [pc, #172]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d20c      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b12      	ldr	r3, [pc, #72]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329e:	f000 fb7f 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490a      	ldr	r1, [pc, #40]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	@ (80032dc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fe06 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	0800738c 	.word	0x0800738c
 80032dc:	20000004 	.word	0x20000004
 80032e0:	20000008 	.word	0x20000008

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003300:	f7ff fff0 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0a9b      	lsrs	r3, r3, #10
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	0800739c 	.word	0x0800739c

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003328:	f7ff ffdc 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0b5b      	lsrs	r3, r3, #13
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	@ (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	0800739c 	.word	0x0800739c

0800334c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	@ 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003384:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800338a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003392:	496c      	ldr	r1, [pc, #432]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80033a2:	2301      	movs	r3, #1
 80033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d010      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80033b2:	4b64      	ldr	r3, [pc, #400]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033b8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	4960      	ldr	r1, [pc, #384]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80033d0:	2301      	movs	r3, #1
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d017      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e0:	4b58      	ldr	r3, [pc, #352]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	4955      	ldr	r1, [pc, #340]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fe:	d101      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003400:	2301      	movs	r3, #1
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800340c:	2301      	movs	r3, #1
 800340e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800341c:	4b49      	ldr	r3, [pc, #292]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800341e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003422:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342a:	4946      	ldr	r1, [pc, #280]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343a:	d101      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800343c:	2301      	movs	r3, #1
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003448:	2301      	movs	r3, #1
 800344a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808a 	beq.w	800356e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	4a38      	ldr	r2, [pc, #224]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	@ 0x40
 800346a:	4b36      	ldr	r3, [pc, #216]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003476:	4b34      	ldr	r3, [pc, #208]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a33      	ldr	r2, [pc, #204]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003482:	f7fe fd69 	bl	8001f58 <HAL_GetTick>
 8003486:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fe fd65 	bl	8001f58 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e278      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800349c:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a8:	4b26      	ldr	r3, [pc, #152]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02f      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d028      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034d0:	4b1e      	ldr	r3, [pc, #120]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d6:	4b1d      	ldr	r3, [pc, #116]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034e2:	4b18      	ldr	r3, [pc, #96]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d114      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe fd33 	bl	8001f58 <HAL_GetTick>
 80034f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe fd2f 	bl	8001f58 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e240      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003524:	d114      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003526:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353a:	4902      	ldr	r1, [pc, #8]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]
 8003540:	e00c      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	40007000 	.word	0x40007000
 800354c:	42470e40 	.word	0x42470e40
 8003550:	4b4a      	ldr	r3, [pc, #296]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a49      	ldr	r2, [pc, #292]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003556:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	4b47      	ldr	r3, [pc, #284]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800355e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	4944      	ldr	r1, [pc, #272]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800356a:	4313      	orrs	r3, r2
 800356c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003580:	4b3f      	ldr	r3, [pc, #252]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003582:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003590:	4b3a      	ldr	r3, [pc, #232]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003596:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	4937      	ldr	r1, [pc, #220]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035b2:	4b32      	ldr	r3, [pc, #200]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035b8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c0:	492e      	ldr	r1, [pc, #184]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035d4:	4b29      	ldr	r3, [pc, #164]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035da:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	4926      	ldr	r1, [pc, #152]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f2:	d101      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80035f4:	2301      	movs	r3, #1
 80035f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003604:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	491a      	ldr	r1, [pc, #104]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	2b00      	cmp	r3, #0
 8003624:	d011      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800362c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003634:	4911      	ldr	r1, [pc, #68]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003646:	2301      	movs	r3, #1
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d005      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003658:	f040 80ff 	bne.w	800385a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800365c:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003662:	f7fe fc79 	bl	8001f58 <HAL_GetTick>
 8003666:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003668:	e00e      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800366a:	f7fe fc75 	bl	8001f58 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d907      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e188      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800367c:	40023800 	.word	0x40023800
 8003680:	424711e0 	.word	0x424711e0
 8003684:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003688:	4b7e      	ldr	r3, [pc, #504]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ea      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d028      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d124      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036bc:	4b71      	ldr	r3, [pc, #452]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c2:	0c1b      	lsrs	r3, r3, #16
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	3301      	adds	r3, #1
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d4:	0e1b      	lsrs	r3, r3, #24
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	431a      	orrs	r2, r3
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	3b01      	subs	r3, #1
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	431a      	orrs	r2, r3
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	4961      	ldr	r1, [pc, #388]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003724:	2b00      	cmp	r3, #0
 8003726:	d035      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003730:	d130      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003732:	4b54      	ldr	r3, [pc, #336]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003744:	4b4f      	ldr	r3, [pc, #316]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800374a:	0f1b      	lsrs	r3, r3, #28
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	019b      	lsls	r3, r3, #6
 800375c:	431a      	orrs	r2, r3
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	071b      	lsls	r3, r3, #28
 8003774:	4943      	ldr	r1, [pc, #268]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800377c:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800377e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003782:	f023 021f 	bic.w	r2, r3, #31
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	493d      	ldr	r1, [pc, #244]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d029      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037a8:	d124      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80037aa:	4b36      	ldr	r3, [pc, #216]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	3301      	adds	r3, #1
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037bc:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c2:	0f1b      	lsrs	r3, r3, #28
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	019b      	lsls	r3, r3, #6
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	431a      	orrs	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	071b      	lsls	r3, r3, #28
 80037ec:	4925      	ldr	r1, [pc, #148]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d016      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	3b01      	subs	r3, #1
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	071b      	lsls	r3, r3, #28
 8003826:	4917      	ldr	r1, [pc, #92]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800382e:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003830:	2201      	movs	r2, #1
 8003832:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003834:	f7fe fb90 	bl	8001f58 <HAL_GetTick>
 8003838:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800383c:	f7fe fb8c 	bl	8001f58 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e09f      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 8095 	bne.w	800398c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003862:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003868:	f7fe fb76 	bl	8001f58 <HAL_GetTick>
 800386c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800386e:	e00f      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003870:	f7fe fb72 	bl	8001f58 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d908      	bls.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e085      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	42470068 	.word	0x42470068
 800388c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003890:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800389c:	d0e8      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02b      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d127      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80038c6:	4b34      	ldr	r3, [pc, #208]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	3301      	adds	r3, #1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	431a      	orrs	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	4928      	ldr	r1, [pc, #160]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038fc:	4b26      	ldr	r3, [pc, #152]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003902:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	3b01      	subs	r3, #1
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	4922      	ldr	r1, [pc, #136]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01d      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800392a:	d118      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800392c:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003932:	0e1b      	lsrs	r3, r3, #24
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	019b      	lsls	r3, r3, #6
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	4910      	ldr	r1, [pc, #64]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800395e:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003964:	f7fe faf8 	bl	8001f58 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800396c:	f7fe faf4 	bl	8001f58 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e007      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800398a:	d1ef      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3730      	adds	r7, #48	@ 0x30
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	42470070 	.word	0x42470070

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b0ae      	sub	sp, #184	@ 0xb8
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c6:	4bcb      	ldr	r3, [pc, #812]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	f200 8206 	bhi.w	8003de0 <HAL_RCC_GetSysClockFreq+0x440>
 80039d4:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003de1 	.word	0x08003de1
 80039e4:	08003de1 	.word	0x08003de1
 80039e8:	08003de1 	.word	0x08003de1
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003de1 	.word	0x08003de1
 80039f4:	08003de1 	.word	0x08003de1
 80039f8:	08003de1 	.word	0x08003de1
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003de1 	.word	0x08003de1
 8003a04:	08003de1 	.word	0x08003de1
 8003a08:	08003de1 	.word	0x08003de1
 8003a0c:	08003c11 	.word	0x08003c11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4bb9      	ldr	r3, [pc, #740]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a16:	e1e7      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a18:	4bb8      	ldr	r3, [pc, #736]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a1e:	e1e3      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4bb4      	ldr	r3, [pc, #720]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2c:	4bb1      	ldr	r3, [pc, #708]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d071      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a38:	4bae      	ldr	r3, [pc, #696]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a5e:	4622      	mov	r2, r4
 8003a60:	462b      	mov	r3, r5
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a70:	0150      	lsls	r0, r2, #5
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4621      	mov	r1, r4
 8003a78:	1a51      	subs	r1, r2, r1
 8003a7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003a90:	4649      	mov	r1, r9
 8003a92:	018b      	lsls	r3, r1, #6
 8003a94:	4641      	mov	r1, r8
 8003a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	018a      	lsls	r2, r1, #6
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ab8:	4649      	mov	r1, r9
 8003aba:	00cb      	lsls	r3, r1, #3
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	00ca      	lsls	r2, r1, #3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	4622      	mov	r2, r4
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	eb42 0303 	adc.w	r3, r2, r3
 8003ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ae8:	4629      	mov	r1, r5
 8003aea:	024b      	lsls	r3, r1, #9
 8003aec:	4621      	mov	r1, r4
 8003aee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003af2:	4621      	mov	r1, r4
 8003af4:	024a      	lsls	r2, r1, #9
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b0c:	f7fc fff6 	bl	8000afc <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b1a:	e067      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1c:	4b75      	ldr	r3, [pc, #468]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b36:	2300      	movs	r3, #0
 8003b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4621      	mov	r1, r4
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b70:	4649      	mov	r1, r9
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	018a      	lsls	r2, r1, #6
 8003b7e:	4641      	mov	r1, r8
 8003b80:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b84:	4649      	mov	r1, r9
 8003b86:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b9e:	4692      	mov	sl, r2
 8003ba0:	469b      	mov	fp, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	462b      	mov	r3, r5
 8003bac:	eb4b 0303 	adc.w	r3, fp, r3
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	028b      	lsls	r3, r1, #10
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc8:	4621      	mov	r1, r4
 8003bca:	028a      	lsls	r2, r1, #10
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bd8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bde:	f7fc ff8d 	bl	8000afc <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4613      	mov	r3, r2
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bec:	4b41      	ldr	r3, [pc, #260]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c0e:	e0eb      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c10:	4b38      	ldr	r3, [pc, #224]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1c:	4b35      	ldr	r3, [pc, #212]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d06b      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c28:	4b32      	ldr	r3, [pc, #200]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	099b      	lsrs	r3, r3, #6
 8003c2e:	2200      	movs	r2, #0
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c44:	4622      	mov	r2, r4
 8003c46:	462b      	mov	r3, r5
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	0159      	lsls	r1, r3, #5
 8003c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c56:	0150      	lsls	r0, r2, #5
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	1a51      	subs	r1, r2, r1
 8003c60:	61b9      	str	r1, [r7, #24]
 8003c62:	4629      	mov	r1, r5
 8003c64:	eb63 0301 	sbc.w	r3, r3, r1
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c76:	4659      	mov	r1, fp
 8003c78:	018b      	lsls	r3, r1, #6
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c80:	4651      	mov	r1, sl
 8003c82:	018a      	lsls	r2, r1, #6
 8003c84:	4651      	mov	r1, sl
 8003c86:	ebb2 0801 	subs.w	r8, r2, r1
 8003c8a:	4659      	mov	r1, fp
 8003c8c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca4:	4690      	mov	r8, r2
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	4623      	mov	r3, r4
 8003caa:	eb18 0303 	adds.w	r3, r8, r3
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	eb49 0303 	adc.w	r3, r9, r3
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	024b      	lsls	r3, r1, #9
 8003cc8:	4621      	mov	r1, r4
 8003cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cce:	4621      	mov	r1, r4
 8003cd0:	024a      	lsls	r2, r1, #9
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cda:	2200      	movs	r2, #0
 8003cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cde:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ce4:	f7fc ff0a 	bl	8000afc <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4613      	mov	r3, r2
 8003cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cf2:	e065      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x420>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d00:	4b3d      	ldr	r3, [pc, #244]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	2200      	movs	r2, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d12:	2300      	movs	r3, #0
 8003d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d1a:	4642      	mov	r2, r8
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	0159      	lsls	r1, r3, #5
 8003d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2c:	0150      	lsls	r0, r2, #5
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4641      	mov	r1, r8
 8003d34:	1a51      	subs	r1, r2, r1
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	4649      	mov	r1, r9
 8003d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	018b      	lsls	r3, r1, #6
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d56:	4651      	mov	r1, sl
 8003d58:	018a      	lsls	r2, r1, #6
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	1a54      	subs	r4, r2, r1
 8003d5e:	4659      	mov	r1, fp
 8003d60:	eb63 0501 	sbc.w	r5, r3, r1
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	00eb      	lsls	r3, r5, #3
 8003d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d72:	00e2      	lsls	r2, r4, #3
 8003d74:	4614      	mov	r4, r2
 8003d76:	461d      	mov	r5, r3
 8003d78:	4643      	mov	r3, r8
 8003d7a:	18e3      	adds	r3, r4, r3
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	464b      	mov	r3, r9
 8003d80:	eb45 0303 	adc.w	r3, r5, r3
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d92:	4629      	mov	r1, r5
 8003d94:	028b      	lsls	r3, r1, #10
 8003d96:	4621      	mov	r1, r4
 8003d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	028a      	lsls	r2, r1, #10
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003da8:	2200      	movs	r2, #0
 8003daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003db2:	f7fc fea3 	bl	8000afc <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4613      	mov	r3, r2
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	0f1b      	lsrs	r3, r3, #28
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dde:	e003      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	37b8      	adds	r7, #184	@ 0xb8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	00f42400 	.word	0x00f42400

08003e00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e28d      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8083 	beq.w	8003f26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e20:	4b94      	ldr	r3, [pc, #592]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d019      	beq.n	8003e60 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e2c:	4b91      	ldr	r3, [pc, #580]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e38:	4b8e      	ldr	r3, [pc, #568]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e44:	d00c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e46:	4b8b      	ldr	r3, [pc, #556]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e4e:	2b0c      	cmp	r3, #12
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4b88      	ldr	r3, [pc, #544]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	4b84      	ldr	r3, [pc, #528]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05b      	beq.n	8003f24 <HAL_RCC_OscConfig+0x124>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d157      	bne.n	8003f24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e25a      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x90>
 8003e82:	4b7c      	ldr	r3, [pc, #496]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7b      	ldr	r2, [pc, #492]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e01d      	b.n	8003ecc <HAL_RCC_OscConfig+0xcc>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0xb4>
 8003e9a:	4b76      	ldr	r3, [pc, #472]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a75      	ldr	r2, [pc, #468]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b73      	ldr	r3, [pc, #460]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a72      	ldr	r2, [pc, #456]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCC_OscConfig+0xcc>
 8003eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f840 	bl	8001f58 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fe f83c 	bl	8001f58 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e21f      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b61      	ldr	r3, [pc, #388]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0xdc>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f82c 	bl	8001f58 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f828 	bl	8001f58 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	@ 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e20b      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	4b57      	ldr	r3, [pc, #348]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x104>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d06f      	beq.n	8004012 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f32:	4b50      	ldr	r3, [pc, #320]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d017      	beq.n	8003f6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d105      	bne.n	8003f56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f56:	4b47      	ldr	r3, [pc, #284]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d11c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f62:	4b44      	ldr	r3, [pc, #272]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d116      	bne.n	8003f9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6e:	4b41      	ldr	r3, [pc, #260]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_RCC_OscConfig+0x186>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d001      	beq.n	8003f86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e1d3      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f86:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4937      	ldr	r1, [pc, #220]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9a:	e03a      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa4:	4b34      	ldr	r3, [pc, #208]	@ (8004078 <HAL_RCC_OscConfig+0x278>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd ffd5 	bl	8001f58 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fd ffd1 	bl	8001f58 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1b4      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd0:	4b28      	ldr	r3, [pc, #160]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4925      	ldr	r1, [pc, #148]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]
 8003fe4:	e015      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe6:	4b24      	ldr	r3, [pc, #144]	@ (8004078 <HAL_RCC_OscConfig+0x278>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd ffb4 	bl	8001f58 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff4:	f7fd ffb0 	bl	8001f58 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e193      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004006:	4b1b      	ldr	r3, [pc, #108]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d036      	beq.n	800408c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004026:	4b15      	ldr	r3, [pc, #84]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd ff94 	bl	8001f58 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004034:	f7fd ff90 	bl	8001f58 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e173      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004046:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8004048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x234>
 8004052:	e01b      	b.n	800408c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004054:	4b09      	ldr	r3, [pc, #36]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fd ff7d 	bl	8001f58 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004060:	e00e      	b.n	8004080 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004062:	f7fd ff79 	bl	8001f58 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d907      	bls.n	8004080 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e15c      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
 8004074:	40023800 	.word	0x40023800
 8004078:	42470000 	.word	0x42470000
 800407c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	4b8a      	ldr	r3, [pc, #552]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ea      	bne.n	8004062 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8097 	beq.w	80041c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409e:	4b83      	ldr	r3, [pc, #524]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10f      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	4b7f      	ldr	r3, [pc, #508]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	4a7e      	ldr	r2, [pc, #504]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ba:	4b7c      	ldr	r3, [pc, #496]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	4b79      	ldr	r3, [pc, #484]	@ (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d118      	bne.n	8004108 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d6:	4b76      	ldr	r3, [pc, #472]	@ (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a75      	ldr	r2, [pc, #468]	@ (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e2:	f7fd ff39 	bl	8001f58 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ea:	f7fd ff35 	bl	8001f58 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e118      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fc:	4b6c      	ldr	r3, [pc, #432]	@ (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d106      	bne.n	800411e <HAL_RCC_OscConfig+0x31e>
 8004110:	4b66      	ldr	r3, [pc, #408]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004114:	4a65      	ldr	r2, [pc, #404]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	6713      	str	r3, [r2, #112]	@ 0x70
 800411c:	e01c      	b.n	8004158 <HAL_RCC_OscConfig+0x358>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x340>
 8004126:	4b61      	ldr	r3, [pc, #388]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412a:	4a60      	ldr	r2, [pc, #384]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	6713      	str	r3, [r2, #112]	@ 0x70
 8004132:	4b5e      	ldr	r3, [pc, #376]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	4a5d      	ldr	r2, [pc, #372]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6713      	str	r3, [r2, #112]	@ 0x70
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0x358>
 8004140:	4b5a      	ldr	r3, [pc, #360]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004144:	4a59      	ldr	r2, [pc, #356]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	6713      	str	r3, [r2, #112]	@ 0x70
 800414c:	4b57      	ldr	r3, [pc, #348]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	4a56      	ldr	r2, [pc, #344]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004152:	f023 0304 	bic.w	r3, r3, #4
 8004156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d015      	beq.n	800418c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd fefa 	bl	8001f58 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004166:	e00a      	b.n	800417e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fd fef6 	bl	8001f58 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0d7      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417e:	4b4b      	ldr	r3, [pc, #300]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0ee      	beq.n	8004168 <HAL_RCC_OscConfig+0x368>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fee4 	bl	8001f58 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd fee0 	bl	8001f58 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0c1      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041aa:	4b40      	ldr	r3, [pc, #256]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ee      	bne.n	8004194 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041bc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	4a3a      	ldr	r2, [pc, #232]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80ad 	beq.w	800432c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041d2:	4b36      	ldr	r3, [pc, #216]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d060      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d145      	bne.n	8004272 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e6:	4b33      	ldr	r3, [pc, #204]	@ (80042b4 <HAL_RCC_OscConfig+0x4b4>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fd feb4 	bl	8001f58 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fd feb0 	bl	8001f58 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e093      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	4b29      	ldr	r3, [pc, #164]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	019b      	lsls	r3, r3, #6
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	3b01      	subs	r3, #1
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	061b      	lsls	r3, r3, #24
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	071b      	lsls	r3, r3, #28
 800423e:	491b      	ldr	r1, [pc, #108]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004244:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <HAL_RCC_OscConfig+0x4b4>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fd fe85 	bl	8001f58 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004252:	f7fd fe81 	bl	8001f58 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e064      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x452>
 8004270:	e05c      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004272:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <HAL_RCC_OscConfig+0x4b4>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd fe6e 	bl	8001f58 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004280:	f7fd fe6a 	bl	8001f58 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e04d      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x480>
 800429e:	e045      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e040      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40007000 	.word	0x40007000
 80042b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004338 <HAL_RCC_OscConfig+0x538>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d030      	beq.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d129      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d122      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d119      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	3b01      	subs	r3, #1
 8004302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d10f      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd fb8a 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 ff2a 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04e      	b.n	8004492 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a23      	ldr	r2, [pc, #140]	@ (80044a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d01d      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	@ (80044a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1e      	ldr	r2, [pc, #120]	@ (80044a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1c      	ldr	r2, [pc, #112]	@ (80044ac <HAL_TIM_Base_Start_IT+0xd0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1b      	ldr	r2, [pc, #108]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a19      	ldr	r2, [pc, #100]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d111      	bne.n	8004480 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b06      	cmp	r3, #6
 800446c:	d010      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	e007      	b.n	8004490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40001800 	.word	0x40001800

080044bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e041      	b.n	8004552 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f839 	bl	800455a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 fe6a 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_TIM_PWM_Start+0x24>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e022      	b.n	80045da <HAL_TIM_PWM_Start+0x6a>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d109      	bne.n	80045ae <HAL_TIM_PWM_Start+0x3e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e015      	b.n	80045da <HAL_TIM_PWM_Start+0x6a>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d109      	bne.n	80045c8 <HAL_TIM_PWM_Start+0x58>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e008      	b.n	80045da <HAL_TIM_PWM_Start+0x6a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07c      	b.n	80046dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0x82>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f0:	e013      	b.n	800461a <HAL_TIM_PWM_Start+0xaa>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start+0x92>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004600:	e00b      	b.n	800461a <HAL_TIM_PWM_Start+0xaa>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start+0xa2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004610:	e003      	b.n	800461a <HAL_TIM_PWM_Start+0xaa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f001 f9f6 	bl	8005a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <HAL_TIM_PWM_Start+0x174>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_TIM_PWM_Start+0xcc>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2c      	ldr	r2, [pc, #176]	@ (80046e8 <HAL_TIM_PWM_Start+0x178>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d101      	bne.n	8004640 <HAL_TIM_PWM_Start+0xd0>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_TIM_PWM_Start+0xd2>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a22      	ldr	r2, [pc, #136]	@ (80046e4 <HAL_TIM_PWM_Start+0x174>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d022      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x136>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004668:	d01d      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x136>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ec <HAL_TIM_PWM_Start+0x17c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d018      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x136>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <HAL_TIM_PWM_Start+0x180>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x136>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1c      	ldr	r2, [pc, #112]	@ (80046f4 <HAL_TIM_PWM_Start+0x184>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x136>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a16      	ldr	r2, [pc, #88]	@ (80046e8 <HAL_TIM_PWM_Start+0x178>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x136>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a18      	ldr	r2, [pc, #96]	@ (80046f8 <HAL_TIM_PWM_Start+0x188>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x136>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a16      	ldr	r2, [pc, #88]	@ (80046fc <HAL_TIM_PWM_Start+0x18c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d111      	bne.n	80046ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d010      	beq.n	80046da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	e007      	b.n	80046da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40001800 	.word	0x40001800

08004700 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f001 f97e 	bl	8005a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2e      	ldr	r2, [pc, #184]	@ (80047d8 <HAL_TIM_PWM_Stop+0xd8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIM_PWM_Stop+0x2c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2d      	ldr	r2, [pc, #180]	@ (80047dc <HAL_TIM_PWM_Stop+0xdc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <HAL_TIM_PWM_Stop+0x30>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_TIM_PWM_Stop+0x32>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10f      	bne.n	8004766 <HAL_TIM_PWM_Stop+0x66>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_TIM_PWM_Stop+0x66>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <HAL_TIM_PWM_Stop+0x96>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <HAL_TIM_PWM_Stop+0x96>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Stop+0xa6>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047a4:	e013      	b.n	80047ce <HAL_TIM_PWM_Stop+0xce>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Stop+0xb6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b4:	e00b      	b.n	80047ce <HAL_TIM_PWM_Stop+0xce>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_PWM_Stop+0xc6>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c4:	e003      	b.n	80047ce <HAL_TIM_PWM_Stop+0xce>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40010400 	.word	0x40010400

080047e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e041      	b.n	8004876 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f839 	bl	800487e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 fcd8 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_IC_Start_IT+0x1e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e013      	b.n	80048da <HAL_TIM_IC_Start_IT+0x46>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_IC_Start_IT+0x2e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e00b      	b.n	80048da <HAL_TIM_IC_Start_IT+0x46>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_IC_Start_IT+0x3e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e003      	b.n	80048da <HAL_TIM_IC_Start_IT+0x46>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <HAL_TIM_IC_Start_IT+0x58>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e013      	b.n	8004914 <HAL_TIM_IC_Start_IT+0x80>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d104      	bne.n	80048fc <HAL_TIM_IC_Start_IT+0x68>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e00b      	b.n	8004914 <HAL_TIM_IC_Start_IT+0x80>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d104      	bne.n	800490c <HAL_TIM_IC_Start_IT+0x78>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e003      	b.n	8004914 <HAL_TIM_IC_Start_IT+0x80>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004912:	b2db      	uxtb	r3, r3
 8004914:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004916:	7bbb      	ldrb	r3, [r7, #14]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800491c:	7b7b      	ldrb	r3, [r7, #13]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0cc      	b.n	8004ac0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_TIM_IC_Start_IT+0xa2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004934:	e013      	b.n	800495e <HAL_TIM_IC_Start_IT+0xca>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d104      	bne.n	8004946 <HAL_TIM_IC_Start_IT+0xb2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	e00b      	b.n	800495e <HAL_TIM_IC_Start_IT+0xca>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d104      	bne.n	8004956 <HAL_TIM_IC_Start_IT+0xc2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004954:	e003      	b.n	800495e <HAL_TIM_IC_Start_IT+0xca>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <HAL_TIM_IC_Start_IT+0xda>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800496c:	e013      	b.n	8004996 <HAL_TIM_IC_Start_IT+0x102>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d104      	bne.n	800497e <HAL_TIM_IC_Start_IT+0xea>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800497c:	e00b      	b.n	8004996 <HAL_TIM_IC_Start_IT+0x102>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d104      	bne.n	800498e <HAL_TIM_IC_Start_IT+0xfa>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800498c:	e003      	b.n	8004996 <HAL_TIM_IC_Start_IT+0x102>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d841      	bhi.n	8004a20 <HAL_TIM_IC_Start_IT+0x18c>
 800499c:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <HAL_TIM_IC_Start_IT+0x110>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	08004a21 	.word	0x08004a21
 80049ac:	08004a21 	.word	0x08004a21
 80049b0:	08004a21 	.word	0x08004a21
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	08004a21 	.word	0x08004a21
 80049c4:	080049fd 	.word	0x080049fd
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a0f 	.word	0x08004a0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0202 	orr.w	r2, r2, #2
 80049e6:	60da      	str	r2, [r3, #12]
      break;
 80049e8:	e01d      	b.n	8004a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0204 	orr.w	r2, r2, #4
 80049f8:	60da      	str	r2, [r3, #12]
      break;
 80049fa:	e014      	b.n	8004a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	60da      	str	r2, [r3, #12]
      break;
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0210 	orr.w	r2, r2, #16
 8004a1c:	60da      	str	r2, [r3, #12]
      break;
 8004a1e:	e002      	b.n	8004a26 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d148      	bne.n	8004abe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 ffed 	bl	8005a14 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a22      	ldr	r2, [pc, #136]	@ (8004ac8 <HAL_TIM_IC_Start_IT+0x234>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0x1f6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4c:	d01d      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0x1f6>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1e      	ldr	r2, [pc, #120]	@ (8004acc <HAL_TIM_IC_Start_IT+0x238>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0x1f6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad0 <HAL_TIM_IC_Start_IT+0x23c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0x1f6>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad4 <HAL_TIM_IC_Start_IT+0x240>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0x1f6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a19      	ldr	r2, [pc, #100]	@ (8004ad8 <HAL_TIM_IC_Start_IT+0x244>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0x1f6>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	@ (8004adc <HAL_TIM_IC_Start_IT+0x248>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIM_IC_Start_IT+0x1f6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <HAL_TIM_IC_Start_IT+0x24c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d111      	bne.n	8004aae <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d010      	beq.n	8004abe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	e007      	b.n	8004abe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0201 	orr.w	r2, r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40010400 	.word	0x40010400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40001800 	.word	0x40001800

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc faa4 	bl	800107c <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fb2e 	bl	8005198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fb35 	bl	80051ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fa7e 	bl	800107c <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fb08 	bl	8005198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fb0f 	bl	80051ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0208 	mvn.w	r2, #8
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc fa58 	bl	800107c <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fae2 	bl	8005198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fae9 	bl	80051ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0210 	mvn.w	r2, #16
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2208      	movs	r2, #8
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fa32 	bl	800107c <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fabc 	bl	8005198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fac3 	bl	80051ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0201 	mvn.w	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc f9f8 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 ff7c 	bl	8005b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa94 	bl	80051c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0220 	mvn.w	r2, #32
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 ff4e 	bl	8005b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e088      	b.n	8004df4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004d00:	f000 fcc4 	bl	800568c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 020c 	bic.w	r2, r2, #12
 8004d12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	619a      	str	r2, [r3, #24]
 8004d26:	e060      	b.n	8004dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d11c      	bne.n	8004d68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004d3e:	f000 fd48 	bl	80057d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004d50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6999      	ldr	r1, [r3, #24]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	619a      	str	r2, [r3, #24]
 8004d66:	e040      	b.n	8004dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d11b      	bne.n	8004da6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004d7e:	f000 fd95 	bl	80058ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 020c 	bic.w	r2, r2, #12
 8004d90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69d9      	ldr	r1, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	61da      	str	r2, [r3, #28]
 8004da4:	e021      	b.n	8004dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d11c      	bne.n	8004de6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004dbc:	f000 fdb2 	bl	8005924 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004dce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69d9      	ldr	r1, [r3, #28]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	61da      	str	r2, [r3, #28]
 8004de4:	e001      	b.n	8004dea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e0ae      	b.n	8004f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b0c      	cmp	r3, #12
 8004e26:	f200 809f 	bhi.w	8004f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e65 	.word	0x08004e65
 8004e34:	08004f69 	.word	0x08004f69
 8004e38:	08004f69 	.word	0x08004f69
 8004e3c:	08004f69 	.word	0x08004f69
 8004e40:	08004ea5 	.word	0x08004ea5
 8004e44:	08004f69 	.word	0x08004f69
 8004e48:	08004f69 	.word	0x08004f69
 8004e4c:	08004f69 	.word	0x08004f69
 8004e50:	08004ee7 	.word	0x08004ee7
 8004e54:	08004f69 	.word	0x08004f69
 8004e58:	08004f69 	.word	0x08004f69
 8004e5c:	08004f69 	.word	0x08004f69
 8004e60:	08004f27 	.word	0x08004f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fa5e 	bl	800532c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0208 	orr.w	r2, r2, #8
 8004e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0204 	bic.w	r2, r2, #4
 8004e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6999      	ldr	r1, [r3, #24]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	619a      	str	r2, [r3, #24]
      break;
 8004ea2:	e064      	b.n	8004f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 faae 	bl	800540c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	021a      	lsls	r2, r3, #8
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	619a      	str	r2, [r3, #24]
      break;
 8004ee4:	e043      	b.n	8004f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fb03 	bl	80054f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0208 	orr.w	r2, r2, #8
 8004f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0204 	bic.w	r2, r2, #4
 8004f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69d9      	ldr	r1, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	61da      	str	r2, [r3, #28]
      break;
 8004f24:	e023      	b.n	8004f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fb57 	bl	80055e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	021a      	lsls	r2, r3, #8
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	61da      	str	r2, [r3, #28]
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_ConfigClockSource+0x1c>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e0b4      	b.n	8005106 <HAL_TIM_ConfigClockSource+0x186>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd4:	d03e      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0xd4>
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fda:	f200 8087 	bhi.w	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe2:	f000 8086 	beq.w	80050f2 <HAL_TIM_ConfigClockSource+0x172>
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fea:	d87f      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	2b70      	cmp	r3, #112	@ 0x70
 8004fee:	d01a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xa6>
 8004ff0:	2b70      	cmp	r3, #112	@ 0x70
 8004ff2:	d87b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004ff4:	2b60      	cmp	r3, #96	@ 0x60
 8004ff6:	d050      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x11a>
 8004ff8:	2b60      	cmp	r3, #96	@ 0x60
 8004ffa:	d877      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8004ffc:	2b50      	cmp	r3, #80	@ 0x50
 8004ffe:	d03c      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xfa>
 8005000:	2b50      	cmp	r3, #80	@ 0x50
 8005002:	d873      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d058      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x13a>
 8005008:	2b40      	cmp	r3, #64	@ 0x40
 800500a:	d86f      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 800500c:	2b30      	cmp	r3, #48	@ 0x30
 800500e:	d064      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	2b30      	cmp	r3, #48	@ 0x30
 8005012:	d86b      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d060      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d867      	bhi.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05c      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005020:	2b10      	cmp	r3, #16
 8005022:	d05a      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	e062      	b.n	80050ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005036:	f000 fccd 	bl	80059d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	609a      	str	r2, [r3, #8]
      break;
 8005052:	e04f      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005064:	f000 fcb6 	bl	80059d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005076:	609a      	str	r2, [r3, #8]
      break;
 8005078:	e03c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	461a      	mov	r2, r3
 8005088:	f000 fb74 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2150      	movs	r1, #80	@ 0x50
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fc83 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005098:	e02c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 fbd0 	bl	800584c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2160      	movs	r1, #96	@ 0x60
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fc73 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 80050b8:	e01c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 fb54 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2140      	movs	r1, #64	@ 0x40
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fc63 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 80050d8:	e00c      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 fc5a 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 80050ea:	e003      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	e000      	b.n	80050f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b0c      	cmp	r3, #12
 8005122:	d831      	bhi.n	8005188 <HAL_TIM_ReadCapturedValue+0x78>
 8005124:	a201      	add	r2, pc, #4	@ (adr r2, 800512c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	08005161 	.word	0x08005161
 8005130:	08005189 	.word	0x08005189
 8005134:	08005189 	.word	0x08005189
 8005138:	08005189 	.word	0x08005189
 800513c:	0800516b 	.word	0x0800516b
 8005140:	08005189 	.word	0x08005189
 8005144:	08005189 	.word	0x08005189
 8005148:	08005189 	.word	0x08005189
 800514c:	08005175 	.word	0x08005175
 8005150:	08005189 	.word	0x08005189
 8005154:	08005189 	.word	0x08005189
 8005158:	08005189 	.word	0x08005189
 800515c:	0800517f 	.word	0x0800517f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005166:	60fb      	str	r3, [r7, #12]

      break;
 8005168:	e00f      	b.n	800518a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	60fb      	str	r3, [r7, #12]

      break;
 8005172:	e00a      	b.n	800518a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	60fb      	str	r3, [r7, #12]

      break;
 800517c:	e005      	b.n	800518a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	60fb      	str	r3, [r7, #12]

      break;
 8005186:	e000      	b.n	800518a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005188:	bf00      	nop
  }

  return tmpreg;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a46      	ldr	r2, [pc, #280]	@ (8005300 <TIM_Base_SetConfig+0x12c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f2:	d00f      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a43      	ldr	r2, [pc, #268]	@ (8005304 <TIM_Base_SetConfig+0x130>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a42      	ldr	r2, [pc, #264]	@ (8005308 <TIM_Base_SetConfig+0x134>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a41      	ldr	r2, [pc, #260]	@ (800530c <TIM_Base_SetConfig+0x138>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a40      	ldr	r2, [pc, #256]	@ (8005310 <TIM_Base_SetConfig+0x13c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d108      	bne.n	8005226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a35      	ldr	r2, [pc, #212]	@ (8005300 <TIM_Base_SetConfig+0x12c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d02b      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005234:	d027      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a32      	ldr	r2, [pc, #200]	@ (8005304 <TIM_Base_SetConfig+0x130>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d023      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a31      	ldr	r2, [pc, #196]	@ (8005308 <TIM_Base_SetConfig+0x134>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01f      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a30      	ldr	r2, [pc, #192]	@ (800530c <TIM_Base_SetConfig+0x138>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01b      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2f      	ldr	r2, [pc, #188]	@ (8005310 <TIM_Base_SetConfig+0x13c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d017      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2e      	ldr	r2, [pc, #184]	@ (8005314 <TIM_Base_SetConfig+0x140>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2d      	ldr	r2, [pc, #180]	@ (8005318 <TIM_Base_SetConfig+0x144>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00f      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2c      	ldr	r2, [pc, #176]	@ (800531c <TIM_Base_SetConfig+0x148>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00b      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2b      	ldr	r2, [pc, #172]	@ (8005320 <TIM_Base_SetConfig+0x14c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2a      	ldr	r2, [pc, #168]	@ (8005324 <TIM_Base_SetConfig+0x150>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a29      	ldr	r2, [pc, #164]	@ (8005328 <TIM_Base_SetConfig+0x154>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d108      	bne.n	8005298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a10      	ldr	r2, [pc, #64]	@ (8005300 <TIM_Base_SetConfig+0x12c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a12      	ldr	r2, [pc, #72]	@ (8005310 <TIM_Base_SetConfig+0x13c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d105      	bne.n	80052f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]
  }
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40010400 	.word	0x40010400
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800
 8005320:	40001800 	.word	0x40001800
 8005324:	40001c00 	.word	0x40001c00
 8005328:	40002000 	.word	0x40002000

0800532c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0201 	bic.w	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0302 	bic.w	r3, r3, #2
 8005374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a20      	ldr	r2, [pc, #128]	@ (8005404 <TIM_OC1_SetConfig+0xd8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_OC1_SetConfig+0x64>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1f      	ldr	r2, [pc, #124]	@ (8005408 <TIM_OC1_SetConfig+0xdc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10c      	bne.n	80053aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0308 	bic.w	r3, r3, #8
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a15      	ldr	r2, [pc, #84]	@ (8005404 <TIM_OC1_SetConfig+0xd8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC1_SetConfig+0x8e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a14      	ldr	r2, [pc, #80]	@ (8005408 <TIM_OC1_SetConfig+0xdc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d111      	bne.n	80053de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400

0800540c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 0210 	bic.w	r2, r3, #16
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0320 	bic.w	r3, r3, #32
 8005456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a22      	ldr	r2, [pc, #136]	@ (80054f0 <TIM_OC2_SetConfig+0xe4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_OC2_SetConfig+0x68>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a21      	ldr	r2, [pc, #132]	@ (80054f4 <TIM_OC2_SetConfig+0xe8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10d      	bne.n	8005490 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800548e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a17      	ldr	r2, [pc, #92]	@ (80054f0 <TIM_OC2_SetConfig+0xe4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_OC2_SetConfig+0x94>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <TIM_OC2_SetConfig+0xe8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d113      	bne.n	80054c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400

080054f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a21      	ldr	r2, [pc, #132]	@ (80055d8 <TIM_OC3_SetConfig+0xe0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_OC3_SetConfig+0x66>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a20      	ldr	r2, [pc, #128]	@ (80055dc <TIM_OC3_SetConfig+0xe4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10d      	bne.n	800557a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a16      	ldr	r2, [pc, #88]	@ (80055d8 <TIM_OC3_SetConfig+0xe0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_OC3_SetConfig+0x92>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a15      	ldr	r2, [pc, #84]	@ (80055dc <TIM_OC3_SetConfig+0xe4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d113      	bne.n	80055b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	621a      	str	r2, [r3, #32]
}
 80055cc:	bf00      	nop
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400

080055e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800562a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	031b      	lsls	r3, r3, #12
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a12      	ldr	r2, [pc, #72]	@ (8005684 <TIM_OC4_SetConfig+0xa4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_OC4_SetConfig+0x68>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a11      	ldr	r2, [pc, #68]	@ (8005688 <TIM_OC4_SetConfig+0xa8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d109      	bne.n	800565c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800564e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	019b      	lsls	r3, r3, #6
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40010400 	.word	0x40010400

0800568c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f023 0201 	bic.w	r2, r3, #1
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a28      	ldr	r2, [pc, #160]	@ (8005758 <TIM_TI1_SetConfig+0xcc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01b      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c0:	d017      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a25      	ldr	r2, [pc, #148]	@ (800575c <TIM_TI1_SetConfig+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a24      	ldr	r2, [pc, #144]	@ (8005760 <TIM_TI1_SetConfig+0xd4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a23      	ldr	r2, [pc, #140]	@ (8005764 <TIM_TI1_SetConfig+0xd8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <TIM_TI1_SetConfig+0xdc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a21      	ldr	r2, [pc, #132]	@ (800576c <TIM_TI1_SetConfig+0xe0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_TI1_SetConfig+0x66>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a20      	ldr	r2, [pc, #128]	@ (8005770 <TIM_TI1_SetConfig+0xe4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <TIM_TI1_SetConfig+0x6a>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <TIM_TI1_SetConfig+0x6c>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e003      	b.n	8005716 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800571c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	b2db      	uxtb	r3, r3
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f023 030a 	bic.w	r3, r3, #10
 8005730:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f003 030a 	and.w	r3, r3, #10
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40001800 	.word	0x40001800

08005774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0210 	bic.w	r2, r3, #16
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	031b      	lsls	r3, r3, #12
 8005816:	b29b      	uxth	r3, r3
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	621a      	str	r2, [r3, #32]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0210 	bic.w	r2, r3, #16
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	031b      	lsls	r3, r3, #12
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005888:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	621a      	str	r2, [r3, #32]
}
 80058a0:	bf00      	nop
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80058fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005950:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005962:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	031b      	lsls	r3, r3, #12
 8005968:	b29b      	uxth	r3, r3
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005976:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	031b      	lsls	r3, r3, #12
 800597c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 0307 	orr.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	2201      	movs	r2, #1
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1a      	ldr	r2, [r3, #32]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	401a      	ands	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1a      	ldr	r2, [r3, #32]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e05a      	b.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d022      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac4:	d01d      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1a      	ldr	r2, [pc, #104]	@ (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a18      	ldr	r2, [pc, #96]	@ (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10c      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40000c00 	.word	0x40000c00
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40001800 	.word	0x40001800

08005b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e042      	b.n	8005c18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc f806 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	@ 0x24
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f973 	bl	8005eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	@ 0x28
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d175      	bne.n	8005d2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_UART_Transmit+0x2c>
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e06e      	b.n	8005d2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2221      	movs	r2, #33	@ 0x21
 8005c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c5e:	f7fc f97b 	bl	8001f58 <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c78:	d108      	bne.n	8005c8c <HAL_UART_Transmit+0x6c>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	e003      	b.n	8005c94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c94:	e02e      	b.n	8005cf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2180      	movs	r1, #128	@ 0x80
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f848 	bl	8005d36 <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e03a      	b.n	8005d2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	e007      	b.n	8005ce6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	781a      	ldrb	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1cb      	bne.n	8005c96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	2140      	movs	r1, #64	@ 0x40
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f814 	bl	8005d36 <UART_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e006      	b.n	8005d2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e000      	b.n	8005d2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b086      	sub	sp, #24
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	e03b      	b.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d037      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d50:	f7fc f902 	bl	8001f58 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d302      	bcc.n	8005d66 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e03a      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d023      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b80      	cmp	r3, #128	@ 0x80
 8005d7c:	d020      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b40      	cmp	r3, #64	@ 0x40
 8005d82:	d01d      	beq.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d116      	bne.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f81d 	bl	8005de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2208      	movs	r2, #8
 8005db2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e00f      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	bf0c      	ite	eq
 8005dd0:	2301      	moveq	r3, #1
 8005dd2:	2300      	movne	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d0b4      	beq.n	8005d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b095      	sub	sp, #84	@ 0x54
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e10:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f023 0301 	bic.w	r3, r3, #1
 8005e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3314      	adds	r3, #20
 8005e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e5      	bne.n	8005e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d119      	bne.n	8005e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f023 0310 	bic.w	r3, r3, #16
 8005e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e80:	61ba      	str	r2, [r7, #24]
 8005e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6979      	ldr	r1, [r7, #20]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ea2:	bf00      	nop
 8005ea4:	3754      	adds	r7, #84	@ 0x54
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb4:	b0c0      	sub	sp, #256	@ 0x100
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	68d9      	ldr	r1, [r3, #12]
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	ea40 0301 	orr.w	r3, r0, r1
 8005ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f08:	f021 010c 	bic.w	r1, r1, #12
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f16:	430b      	orrs	r3, r1
 8005f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2a:	6999      	ldr	r1, [r3, #24]
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	ea40 0301 	orr.w	r3, r0, r1
 8005f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b8f      	ldr	r3, [pc, #572]	@ (800617c <UART_SetConfig+0x2cc>)
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d005      	beq.n	8005f50 <UART_SetConfig+0xa0>
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006180 <UART_SetConfig+0x2d0>)
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d104      	bne.n	8005f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fd f9e8 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8005f54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f58:	e003      	b.n	8005f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f5a:	f7fd f9cf 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6c:	f040 810c 	bne.w	8006188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f82:	4622      	mov	r2, r4
 8005f84:	462b      	mov	r3, r5
 8005f86:	1891      	adds	r1, r2, r2
 8005f88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f8a:	415b      	adcs	r3, r3
 8005f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f92:	4621      	mov	r1, r4
 8005f94:	eb12 0801 	adds.w	r8, r2, r1
 8005f98:	4629      	mov	r1, r5
 8005f9a:	eb43 0901 	adc.w	r9, r3, r1
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb2:	4690      	mov	r8, r2
 8005fb4:	4699      	mov	r9, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	eb18 0303 	adds.w	r3, r8, r3
 8005fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	eb49 0303 	adc.w	r3, r9, r3
 8005fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fde:	460b      	mov	r3, r1
 8005fe0:	18db      	adds	r3, r3, r3
 8005fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	eb42 0303 	adc.w	r3, r2, r3
 8005fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ff4:	f7fa fd82 	bl	8000afc <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4b61      	ldr	r3, [pc, #388]	@ (8006184 <UART_SetConfig+0x2d4>)
 8005ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	011c      	lsls	r4, r3, #4
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006010:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	1891      	adds	r1, r2, r2
 800601e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006020:	415b      	adcs	r3, r3
 8006022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006028:	4641      	mov	r1, r8
 800602a:	eb12 0a01 	adds.w	sl, r2, r1
 800602e:	4649      	mov	r1, r9
 8006030:	eb43 0b01 	adc.w	fp, r3, r1
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006048:	4692      	mov	sl, r2
 800604a:	469b      	mov	fp, r3
 800604c:	4643      	mov	r3, r8
 800604e:	eb1a 0303 	adds.w	r3, sl, r3
 8006052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006056:	464b      	mov	r3, r9
 8006058:	eb4b 0303 	adc.w	r3, fp, r3
 800605c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800606c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006074:	460b      	mov	r3, r1
 8006076:	18db      	adds	r3, r3, r3
 8006078:	643b      	str	r3, [r7, #64]	@ 0x40
 800607a:	4613      	mov	r3, r2
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
 8006082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800608a:	f7fa fd37 	bl	8000afc <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4611      	mov	r1, r2
 8006094:	4b3b      	ldr	r3, [pc, #236]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006096:	fba3 2301 	umull	r2, r3, r3, r1
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	2264      	movs	r2, #100	@ 0x64
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	1acb      	subs	r3, r1, r3
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060aa:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <UART_SetConfig+0x2d4>)
 80060ac:	fba3 2302 	umull	r2, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060b8:	441c      	add	r4, r3
 80060ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	1891      	adds	r1, r2, r2
 80060d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060d4:	415b      	adcs	r3, r3
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060dc:	4641      	mov	r1, r8
 80060de:	1851      	adds	r1, r2, r1
 80060e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80060e2:	4649      	mov	r1, r9
 80060e4:	414b      	adcs	r3, r1
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060f4:	4659      	mov	r1, fp
 80060f6:	00cb      	lsls	r3, r1, #3
 80060f8:	4651      	mov	r1, sl
 80060fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060fe:	4651      	mov	r1, sl
 8006100:	00ca      	lsls	r2, r1, #3
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	4603      	mov	r3, r0
 8006108:	4642      	mov	r2, r8
 800610a:	189b      	adds	r3, r3, r2
 800610c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006110:	464b      	mov	r3, r9
 8006112:	460a      	mov	r2, r1
 8006114:	eb42 0303 	adc.w	r3, r2, r3
 8006118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006128:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800612c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006130:	460b      	mov	r3, r1
 8006132:	18db      	adds	r3, r3, r3
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006136:	4613      	mov	r3, r2
 8006138:	eb42 0303 	adc.w	r3, r2, r3
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800613e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006146:	f7fa fcd9 	bl	8000afc <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006150:	fba3 1302 	umull	r1, r3, r3, r2
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	2164      	movs	r1, #100	@ 0x64
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	3332      	adds	r3, #50	@ 0x32
 8006162:	4a08      	ldr	r2, [pc, #32]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f003 0207 	and.w	r2, r3, #7
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4422      	add	r2, r4
 8006176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006178:	e106      	b.n	8006388 <UART_SetConfig+0x4d8>
 800617a:	bf00      	nop
 800617c:	40011000 	.word	0x40011000
 8006180:	40011400 	.word	0x40011400
 8006184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618c:	2200      	movs	r2, #0
 800618e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006192:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800619a:	4642      	mov	r2, r8
 800619c:	464b      	mov	r3, r9
 800619e:	1891      	adds	r1, r2, r2
 80061a0:	6239      	str	r1, [r7, #32]
 80061a2:	415b      	adcs	r3, r3
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061aa:	4641      	mov	r1, r8
 80061ac:	1854      	adds	r4, r2, r1
 80061ae:	4649      	mov	r1, r9
 80061b0:	eb43 0501 	adc.w	r5, r3, r1
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	00eb      	lsls	r3, r5, #3
 80061be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061c2:	00e2      	lsls	r2, r4, #3
 80061c4:	4614      	mov	r4, r2
 80061c6:	461d      	mov	r5, r3
 80061c8:	4643      	mov	r3, r8
 80061ca:	18e3      	adds	r3, r4, r3
 80061cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061d0:	464b      	mov	r3, r9
 80061d2:	eb45 0303 	adc.w	r3, r5, r3
 80061d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061f6:	4629      	mov	r1, r5
 80061f8:	008b      	lsls	r3, r1, #2
 80061fa:	4621      	mov	r1, r4
 80061fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006200:	4621      	mov	r1, r4
 8006202:	008a      	lsls	r2, r1, #2
 8006204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006208:	f7fa fc78 	bl	8000afc <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4b60      	ldr	r3, [pc, #384]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006212:	fba3 2302 	umull	r2, r3, r3, r2
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	011c      	lsls	r4, r3, #4
 800621a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006224:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	1891      	adds	r1, r2, r2
 8006232:	61b9      	str	r1, [r7, #24]
 8006234:	415b      	adcs	r3, r3
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800623c:	4641      	mov	r1, r8
 800623e:	1851      	adds	r1, r2, r1
 8006240:	6139      	str	r1, [r7, #16]
 8006242:	4649      	mov	r1, r9
 8006244:	414b      	adcs	r3, r1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006254:	4659      	mov	r1, fp
 8006256:	00cb      	lsls	r3, r1, #3
 8006258:	4651      	mov	r1, sl
 800625a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800625e:	4651      	mov	r1, sl
 8006260:	00ca      	lsls	r2, r1, #3
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	4603      	mov	r3, r0
 8006268:	4642      	mov	r2, r8
 800626a:	189b      	adds	r3, r3, r2
 800626c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006270:	464b      	mov	r3, r9
 8006272:	460a      	mov	r2, r1
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006286:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006294:	4649      	mov	r1, r9
 8006296:	008b      	lsls	r3, r1, #2
 8006298:	4641      	mov	r1, r8
 800629a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629e:	4641      	mov	r1, r8
 80062a0:	008a      	lsls	r2, r1, #2
 80062a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062a6:	f7fa fc29 	bl	8000afc <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	4b38      	ldr	r3, [pc, #224]	@ (8006394 <UART_SetConfig+0x4e4>)
 80062b2:	fba3 2301 	umull	r2, r3, r3, r1
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	2264      	movs	r2, #100	@ 0x64
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	1acb      	subs	r3, r1, r3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	3332      	adds	r3, #50	@ 0x32
 80062c4:	4a33      	ldr	r2, [pc, #204]	@ (8006394 <UART_SetConfig+0x4e4>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d0:	441c      	add	r4, r3
 80062d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d6:	2200      	movs	r2, #0
 80062d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80062da:	677a      	str	r2, [r7, #116]	@ 0x74
 80062dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	1891      	adds	r1, r2, r2
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	415b      	adcs	r3, r3
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f0:	4641      	mov	r1, r8
 80062f2:	1851      	adds	r1, r2, r1
 80062f4:	6039      	str	r1, [r7, #0]
 80062f6:	4649      	mov	r1, r9
 80062f8:	414b      	adcs	r3, r1
 80062fa:	607b      	str	r3, [r7, #4]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006308:	4659      	mov	r1, fp
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006312:	4651      	mov	r1, sl
 8006314:	00ca      	lsls	r2, r1, #3
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	4603      	mov	r3, r0
 800631c:	4642      	mov	r2, r8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006322:	464b      	mov	r3, r9
 8006324:	460a      	mov	r2, r1
 8006326:	eb42 0303 	adc.w	r3, r2, r3
 800632a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	663b      	str	r3, [r7, #96]	@ 0x60
 8006336:	667a      	str	r2, [r7, #100]	@ 0x64
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006344:	4649      	mov	r1, r9
 8006346:	008b      	lsls	r3, r1, #2
 8006348:	4641      	mov	r1, r8
 800634a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634e:	4641      	mov	r1, r8
 8006350:	008a      	lsls	r2, r1, #2
 8006352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006356:	f7fa fbd1 	bl	8000afc <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006360:	fba3 1302 	umull	r1, r3, r3, r2
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	2164      	movs	r1, #100	@ 0x64
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	3332      	adds	r3, #50	@ 0x32
 8006372:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4422      	add	r2, r4
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800638e:	46bd      	mov	sp, r7
 8006390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006394:	51eb851f 	.word	0x51eb851f

08006398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006398:	b084      	sub	sp, #16
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	f107 001c 	add.w	r0, r7, #28
 80063a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d123      	bne.n	80063fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80063c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d105      	bne.n	80063ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa9a 	bl	8006928 <USB_CoreReset>
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	e01b      	b.n	8006432 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa8e 	bl	8006928 <USB_CoreReset>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006410:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38
 8006424:	e005      	b.n	8006432 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006432:	7fbb      	ldrb	r3, [r7, #30]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10b      	bne.n	8006450 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f043 0206 	orr.w	r2, r3, #6
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f043 0220 	orr.w	r2, r3, #32
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800645c:	b004      	add	sp, #16
 800645e:	4770      	bx	lr

08006460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f023 0201 	bic.w	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d115      	bne.n	80064d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064b0:	200a      	movs	r0, #10
 80064b2:	f7fb fd5d 	bl	8001f70 <HAL_Delay>
      ms += 10U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	330a      	adds	r3, #10
 80064ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa25 	bl	800690c <USB_GetMode>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d01e      	beq.n	8006506 <USB_SetCurrentMode+0x84>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80064cc:	d9f0      	bls.n	80064b0 <USB_SetCurrentMode+0x2e>
 80064ce:	e01a      	b.n	8006506 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d115      	bne.n	8006502 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064e2:	200a      	movs	r0, #10
 80064e4:	f7fb fd44 	bl	8001f70 <HAL_Delay>
      ms += 10U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	330a      	adds	r3, #10
 80064ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa0c 	bl	800690c <USB_GetMode>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <USB_SetCurrentMode+0x84>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80064fe:	d9f0      	bls.n	80064e2 <USB_SetCurrentMode+0x60>
 8006500:	e001      	b.n	8006506 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e005      	b.n	8006512 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2bc8      	cmp	r3, #200	@ 0xc8
 800650a:	d101      	bne.n	8006510 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800651c:	b084      	sub	sp, #16
 800651e:	b580      	push	{r7, lr}
 8006520:	b086      	sub	sp, #24
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800652a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	e009      	b.n	8006550 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3340      	adds	r3, #64	@ 0x40
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	2200      	movs	r2, #0
 8006548:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3301      	adds	r3, #1
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b0e      	cmp	r3, #14
 8006554:	d9f2      	bls.n	800653c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006556:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800655a:	2b00      	cmp	r3, #0
 800655c:	d11c      	bne.n	8006598 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800656c:	f043 0302 	orr.w	r3, r3, #2
 8006570:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e005      	b.n	80065a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065aa:	461a      	mov	r2, r3
 80065ac:	2300      	movs	r3, #0
 80065ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d10d      	bne.n	80065d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d104      	bne.n	80065ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065c0:	2100      	movs	r1, #0
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f968 	bl	8006898 <USB_SetDevSpeed>
 80065c8:	e008      	b.n	80065dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065ca:	2101      	movs	r1, #1
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f963 	bl	8006898 <USB_SetDevSpeed>
 80065d2:	e003      	b.n	80065dc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065d4:	2103      	movs	r1, #3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f95e 	bl	8006898 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065dc:	2110      	movs	r1, #16
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f8fa 	bl	80067d8 <USB_FlushTxFifo>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f924 	bl	800683c <USB_FlushRxFifo>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006604:	461a      	mov	r2, r3
 8006606:	2300      	movs	r3, #0
 8006608:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661c:	461a      	mov	r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e043      	b.n	80066b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800663a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800663e:	d118      	bne.n	8006672 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006652:	461a      	mov	r2, r3
 8006654:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	e013      	b.n	8006684 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006668:	461a      	mov	r2, r3
 800666a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	e008      	b.n	8006684 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800667e:	461a      	mov	r2, r3
 8006680:	2300      	movs	r3, #0
 8006682:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006690:	461a      	mov	r2, r3
 8006692:	2300      	movs	r3, #0
 8006694:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a2:	461a      	mov	r2, r3
 80066a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3301      	adds	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066b4:	461a      	mov	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d3b5      	bcc.n	8006628 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066bc:	2300      	movs	r3, #0
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	e043      	b.n	800674a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d8:	d118      	bne.n	800670c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	461a      	mov	r2, r3
 80066ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	e013      	b.n	800671e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006702:	461a      	mov	r2, r3
 8006704:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e008      	b.n	800671e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006718:	461a      	mov	r2, r3
 800671a:	2300      	movs	r3, #0
 800671c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672a:	461a      	mov	r2, r3
 800672c:	2300      	movs	r3, #0
 800672e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800673c:	461a      	mov	r2, r3
 800673e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006742:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3301      	adds	r3, #1
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800674e:	461a      	mov	r2, r3
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4293      	cmp	r3, r2
 8006754:	d3b5      	bcc.n	80066c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006768:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006776:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006778:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	4b10      	ldr	r3, [pc, #64]	@ (80067d4 <USB_DevInit+0x2b8>)
 8006792:	4313      	orrs	r3, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006798:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f043 0208 	orr.w	r2, r3, #8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d107      	bne.n	80067c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067bc:	f043 0304 	orr.w	r3, r3, #4
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067d0:	b004      	add	sp, #16
 80067d2:	4770      	bx	lr
 80067d4:	803c3800 	.word	0x803c3800

080067d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067f2:	d901      	bls.n	80067f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e01b      	b.n	8006830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	daf2      	bge.n	80067e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	019b      	lsls	r3, r3, #6
 8006808:	f043 0220 	orr.w	r2, r3, #32
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800681c:	d901      	bls.n	8006822 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e006      	b.n	8006830 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b20      	cmp	r3, #32
 800682c:	d0f0      	beq.n	8006810 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006854:	d901      	bls.n	800685a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e018      	b.n	800688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	daf2      	bge.n	8006848 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2210      	movs	r2, #16
 800686a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3301      	adds	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006878:	d901      	bls.n	800687e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e006      	b.n	800688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d0f0      	beq.n	800686c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	68f9      	ldr	r1, [r7, #12]
 80068b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068b8:	4313      	orrs	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068e4:	f023 0303 	bic.w	r3, r3, #3
 80068e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068f8:	f043 0302 	orr.w	r3, r3, #2
 80068fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0301 	and.w	r3, r3, #1
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006940:	d901      	bls.n	8006946 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e01b      	b.n	800697e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	daf2      	bge.n	8006934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f043 0201 	orr.w	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800696a:	d901      	bls.n	8006970 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e006      	b.n	800697e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d0f0      	beq.n	800695e <USB_CoreReset+0x36>

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <sniprintf>:
 800698c:	b40c      	push	{r2, r3}
 800698e:	b530      	push	{r4, r5, lr}
 8006990:	4b17      	ldr	r3, [pc, #92]	@ (80069f0 <sniprintf+0x64>)
 8006992:	1e0c      	subs	r4, r1, #0
 8006994:	681d      	ldr	r5, [r3, #0]
 8006996:	b09d      	sub	sp, #116	@ 0x74
 8006998:	da08      	bge.n	80069ac <sniprintf+0x20>
 800699a:	238b      	movs	r3, #139	@ 0x8b
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	f04f 30ff 	mov.w	r0, #4294967295
 80069a2:	b01d      	add	sp, #116	@ 0x74
 80069a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069a8:	b002      	add	sp, #8
 80069aa:	4770      	bx	lr
 80069ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80069b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069b4:	bf14      	ite	ne
 80069b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069ba:	4623      	moveq	r3, r4
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069c4:	9002      	str	r0, [sp, #8]
 80069c6:	9006      	str	r0, [sp, #24]
 80069c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80069ce:	ab21      	add	r3, sp, #132	@ 0x84
 80069d0:	a902      	add	r1, sp, #8
 80069d2:	4628      	mov	r0, r5
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	f000 f9b5 	bl	8006d44 <_svfiprintf_r>
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	bfbc      	itt	lt
 80069de:	238b      	movlt	r3, #139	@ 0x8b
 80069e0:	602b      	strlt	r3, [r5, #0]
 80069e2:	2c00      	cmp	r4, #0
 80069e4:	d0dd      	beq.n	80069a2 <sniprintf+0x16>
 80069e6:	9b02      	ldr	r3, [sp, #8]
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	e7d9      	b.n	80069a2 <sniprintf+0x16>
 80069ee:	bf00      	nop
 80069f0:	20000010 	.word	0x20000010

080069f4 <siprintf>:
 80069f4:	b40e      	push	{r1, r2, r3}
 80069f6:	b500      	push	{lr}
 80069f8:	b09c      	sub	sp, #112	@ 0x70
 80069fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80069fc:	9002      	str	r0, [sp, #8]
 80069fe:	9006      	str	r0, [sp, #24]
 8006a00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a04:	4809      	ldr	r0, [pc, #36]	@ (8006a2c <siprintf+0x38>)
 8006a06:	9107      	str	r1, [sp, #28]
 8006a08:	9104      	str	r1, [sp, #16]
 8006a0a:	4909      	ldr	r1, [pc, #36]	@ (8006a30 <siprintf+0x3c>)
 8006a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a10:	9105      	str	r1, [sp, #20]
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	a902      	add	r1, sp, #8
 8006a18:	f000 f994 	bl	8006d44 <_svfiprintf_r>
 8006a1c:	9b02      	ldr	r3, [sp, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	b01c      	add	sp, #112	@ 0x70
 8006a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a28:	b003      	add	sp, #12
 8006a2a:	4770      	bx	lr
 8006a2c:	20000010 	.word	0x20000010
 8006a30:	ffff0208 	.word	0xffff0208

08006a34 <memset>:
 8006a34:	4402      	add	r2, r0
 8006a36:	4603      	mov	r3, r0
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d100      	bne.n	8006a3e <memset+0xa>
 8006a3c:	4770      	bx	lr
 8006a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a42:	e7f9      	b.n	8006a38 <memset+0x4>

08006a44 <__errno>:
 8006a44:	4b01      	ldr	r3, [pc, #4]	@ (8006a4c <__errno+0x8>)
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000010 	.word	0x20000010

08006a50 <__libc_init_array>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	4d0d      	ldr	r5, [pc, #52]	@ (8006a88 <__libc_init_array+0x38>)
 8006a54:	4c0d      	ldr	r4, [pc, #52]	@ (8006a8c <__libc_init_array+0x3c>)
 8006a56:	1b64      	subs	r4, r4, r5
 8006a58:	10a4      	asrs	r4, r4, #2
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	42a6      	cmp	r6, r4
 8006a5e:	d109      	bne.n	8006a74 <__libc_init_array+0x24>
 8006a60:	4d0b      	ldr	r5, [pc, #44]	@ (8006a90 <__libc_init_array+0x40>)
 8006a62:	4c0c      	ldr	r4, [pc, #48]	@ (8006a94 <__libc_init_array+0x44>)
 8006a64:	f000 fc66 	bl	8007334 <_init>
 8006a68:	1b64      	subs	r4, r4, r5
 8006a6a:	10a4      	asrs	r4, r4, #2
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	42a6      	cmp	r6, r4
 8006a70:	d105      	bne.n	8006a7e <__libc_init_array+0x2e>
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a78:	4798      	blx	r3
 8006a7a:	3601      	adds	r6, #1
 8006a7c:	e7ee      	b.n	8006a5c <__libc_init_array+0xc>
 8006a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a82:	4798      	blx	r3
 8006a84:	3601      	adds	r6, #1
 8006a86:	e7f2      	b.n	8006a6e <__libc_init_array+0x1e>
 8006a88:	080073e0 	.word	0x080073e0
 8006a8c:	080073e0 	.word	0x080073e0
 8006a90:	080073e0 	.word	0x080073e0
 8006a94:	080073e4 	.word	0x080073e4

08006a98 <__retarget_lock_acquire_recursive>:
 8006a98:	4770      	bx	lr

08006a9a <__retarget_lock_release_recursive>:
 8006a9a:	4770      	bx	lr

08006a9c <_free_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	d041      	beq.n	8006b28 <_free_r+0x8c>
 8006aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa8:	1f0c      	subs	r4, r1, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bfb8      	it	lt
 8006aae:	18e4      	addlt	r4, r4, r3
 8006ab0:	f000 f8e0 	bl	8006c74 <__malloc_lock>
 8006ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b2c <_free_r+0x90>)
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	b933      	cbnz	r3, 8006ac8 <_free_r+0x2c>
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	6014      	str	r4, [r2, #0]
 8006abe:	4628      	mov	r0, r5
 8006ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ac4:	f000 b8dc 	b.w	8006c80 <__malloc_unlock>
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	d908      	bls.n	8006ade <_free_r+0x42>
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	1821      	adds	r1, r4, r0
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	bf01      	itttt	eq
 8006ad4:	6819      	ldreq	r1, [r3, #0]
 8006ad6:	685b      	ldreq	r3, [r3, #4]
 8006ad8:	1809      	addeq	r1, r1, r0
 8006ada:	6021      	streq	r1, [r4, #0]
 8006adc:	e7ed      	b.n	8006aba <_free_r+0x1e>
 8006ade:	461a      	mov	r2, r3
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b10b      	cbz	r3, 8006ae8 <_free_r+0x4c>
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d9fa      	bls.n	8006ade <_free_r+0x42>
 8006ae8:	6811      	ldr	r1, [r2, #0]
 8006aea:	1850      	adds	r0, r2, r1
 8006aec:	42a0      	cmp	r0, r4
 8006aee:	d10b      	bne.n	8006b08 <_free_r+0x6c>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	4401      	add	r1, r0
 8006af4:	1850      	adds	r0, r2, r1
 8006af6:	4283      	cmp	r3, r0
 8006af8:	6011      	str	r1, [r2, #0]
 8006afa:	d1e0      	bne.n	8006abe <_free_r+0x22>
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	6053      	str	r3, [r2, #4]
 8006b02:	4408      	add	r0, r1
 8006b04:	6010      	str	r0, [r2, #0]
 8006b06:	e7da      	b.n	8006abe <_free_r+0x22>
 8006b08:	d902      	bls.n	8006b10 <_free_r+0x74>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	e7d6      	b.n	8006abe <_free_r+0x22>
 8006b10:	6820      	ldr	r0, [r4, #0]
 8006b12:	1821      	adds	r1, r4, r0
 8006b14:	428b      	cmp	r3, r1
 8006b16:	bf04      	itt	eq
 8006b18:	6819      	ldreq	r1, [r3, #0]
 8006b1a:	685b      	ldreq	r3, [r3, #4]
 8006b1c:	6063      	str	r3, [r4, #4]
 8006b1e:	bf04      	itt	eq
 8006b20:	1809      	addeq	r1, r1, r0
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	6054      	str	r4, [r2, #4]
 8006b26:	e7ca      	b.n	8006abe <_free_r+0x22>
 8006b28:	bd38      	pop	{r3, r4, r5, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200007fc 	.word	0x200007fc

08006b30 <sbrk_aligned>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	4e0f      	ldr	r6, [pc, #60]	@ (8006b70 <sbrk_aligned+0x40>)
 8006b34:	460c      	mov	r4, r1
 8006b36:	6831      	ldr	r1, [r6, #0]
 8006b38:	4605      	mov	r5, r0
 8006b3a:	b911      	cbnz	r1, 8006b42 <sbrk_aligned+0x12>
 8006b3c:	f000 fba6 	bl	800728c <_sbrk_r>
 8006b40:	6030      	str	r0, [r6, #0]
 8006b42:	4621      	mov	r1, r4
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 fba1 	bl	800728c <_sbrk_r>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d103      	bne.n	8006b56 <sbrk_aligned+0x26>
 8006b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b52:	4620      	mov	r0, r4
 8006b54:	bd70      	pop	{r4, r5, r6, pc}
 8006b56:	1cc4      	adds	r4, r0, #3
 8006b58:	f024 0403 	bic.w	r4, r4, #3
 8006b5c:	42a0      	cmp	r0, r4
 8006b5e:	d0f8      	beq.n	8006b52 <sbrk_aligned+0x22>
 8006b60:	1a21      	subs	r1, r4, r0
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 fb92 	bl	800728c <_sbrk_r>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d1f2      	bne.n	8006b52 <sbrk_aligned+0x22>
 8006b6c:	e7ef      	b.n	8006b4e <sbrk_aligned+0x1e>
 8006b6e:	bf00      	nop
 8006b70:	200007f8 	.word	0x200007f8

08006b74 <_malloc_r>:
 8006b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b78:	1ccd      	adds	r5, r1, #3
 8006b7a:	f025 0503 	bic.w	r5, r5, #3
 8006b7e:	3508      	adds	r5, #8
 8006b80:	2d0c      	cmp	r5, #12
 8006b82:	bf38      	it	cc
 8006b84:	250c      	movcc	r5, #12
 8006b86:	2d00      	cmp	r5, #0
 8006b88:	4606      	mov	r6, r0
 8006b8a:	db01      	blt.n	8006b90 <_malloc_r+0x1c>
 8006b8c:	42a9      	cmp	r1, r5
 8006b8e:	d904      	bls.n	8006b9a <_malloc_r+0x26>
 8006b90:	230c      	movs	r3, #12
 8006b92:	6033      	str	r3, [r6, #0]
 8006b94:	2000      	movs	r0, #0
 8006b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c70 <_malloc_r+0xfc>
 8006b9e:	f000 f869 	bl	8006c74 <__malloc_lock>
 8006ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba6:	461c      	mov	r4, r3
 8006ba8:	bb44      	cbnz	r4, 8006bfc <_malloc_r+0x88>
 8006baa:	4629      	mov	r1, r5
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff ffbf 	bl	8006b30 <sbrk_aligned>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	d158      	bne.n	8006c6a <_malloc_r+0xf6>
 8006bb8:	f8d8 4000 	ldr.w	r4, [r8]
 8006bbc:	4627      	mov	r7, r4
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	d143      	bne.n	8006c4a <_malloc_r+0xd6>
 8006bc2:	2c00      	cmp	r4, #0
 8006bc4:	d04b      	beq.n	8006c5e <_malloc_r+0xea>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	4639      	mov	r1, r7
 8006bca:	4630      	mov	r0, r6
 8006bcc:	eb04 0903 	add.w	r9, r4, r3
 8006bd0:	f000 fb5c 	bl	800728c <_sbrk_r>
 8006bd4:	4581      	cmp	r9, r0
 8006bd6:	d142      	bne.n	8006c5e <_malloc_r+0xea>
 8006bd8:	6821      	ldr	r1, [r4, #0]
 8006bda:	1a6d      	subs	r5, r5, r1
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff ffa6 	bl	8006b30 <sbrk_aligned>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d03a      	beq.n	8006c5e <_malloc_r+0xea>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	442b      	add	r3, r5
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	bb62      	cbnz	r2, 8006c50 <_malloc_r+0xdc>
 8006bf6:	f8c8 7000 	str.w	r7, [r8]
 8006bfa:	e00f      	b.n	8006c1c <_malloc_r+0xa8>
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	1b52      	subs	r2, r2, r5
 8006c00:	d420      	bmi.n	8006c44 <_malloc_r+0xd0>
 8006c02:	2a0b      	cmp	r2, #11
 8006c04:	d917      	bls.n	8006c36 <_malloc_r+0xc2>
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	6025      	str	r5, [r4, #0]
 8006c0c:	bf18      	it	ne
 8006c0e:	6059      	strne	r1, [r3, #4]
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	bf08      	it	eq
 8006c14:	f8c8 1000 	streq.w	r1, [r8]
 8006c18:	5162      	str	r2, [r4, r5]
 8006c1a:	604b      	str	r3, [r1, #4]
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f000 f82f 	bl	8006c80 <__malloc_unlock>
 8006c22:	f104 000b 	add.w	r0, r4, #11
 8006c26:	1d23      	adds	r3, r4, #4
 8006c28:	f020 0007 	bic.w	r0, r0, #7
 8006c2c:	1ac2      	subs	r2, r0, r3
 8006c2e:	bf1c      	itt	ne
 8006c30:	1a1b      	subne	r3, r3, r0
 8006c32:	50a3      	strne	r3, [r4, r2]
 8006c34:	e7af      	b.n	8006b96 <_malloc_r+0x22>
 8006c36:	6862      	ldr	r2, [r4, #4]
 8006c38:	42a3      	cmp	r3, r4
 8006c3a:	bf0c      	ite	eq
 8006c3c:	f8c8 2000 	streq.w	r2, [r8]
 8006c40:	605a      	strne	r2, [r3, #4]
 8006c42:	e7eb      	b.n	8006c1c <_malloc_r+0xa8>
 8006c44:	4623      	mov	r3, r4
 8006c46:	6864      	ldr	r4, [r4, #4]
 8006c48:	e7ae      	b.n	8006ba8 <_malloc_r+0x34>
 8006c4a:	463c      	mov	r4, r7
 8006c4c:	687f      	ldr	r7, [r7, #4]
 8006c4e:	e7b6      	b.n	8006bbe <_malloc_r+0x4a>
 8006c50:	461a      	mov	r2, r3
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	d1fb      	bne.n	8006c50 <_malloc_r+0xdc>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6053      	str	r3, [r2, #4]
 8006c5c:	e7de      	b.n	8006c1c <_malloc_r+0xa8>
 8006c5e:	230c      	movs	r3, #12
 8006c60:	6033      	str	r3, [r6, #0]
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 f80c 	bl	8006c80 <__malloc_unlock>
 8006c68:	e794      	b.n	8006b94 <_malloc_r+0x20>
 8006c6a:	6005      	str	r5, [r0, #0]
 8006c6c:	e7d6      	b.n	8006c1c <_malloc_r+0xa8>
 8006c6e:	bf00      	nop
 8006c70:	200007fc 	.word	0x200007fc

08006c74 <__malloc_lock>:
 8006c74:	4801      	ldr	r0, [pc, #4]	@ (8006c7c <__malloc_lock+0x8>)
 8006c76:	f7ff bf0f 	b.w	8006a98 <__retarget_lock_acquire_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	200007f4 	.word	0x200007f4

08006c80 <__malloc_unlock>:
 8006c80:	4801      	ldr	r0, [pc, #4]	@ (8006c88 <__malloc_unlock+0x8>)
 8006c82:	f7ff bf0a 	b.w	8006a9a <__retarget_lock_release_recursive>
 8006c86:	bf00      	nop
 8006c88:	200007f4 	.word	0x200007f4

08006c8c <__ssputs_r>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	688e      	ldr	r6, [r1, #8]
 8006c92:	461f      	mov	r7, r3
 8006c94:	42be      	cmp	r6, r7
 8006c96:	680b      	ldr	r3, [r1, #0]
 8006c98:	4682      	mov	sl, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	4690      	mov	r8, r2
 8006c9e:	d82d      	bhi.n	8006cfc <__ssputs_r+0x70>
 8006ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ca4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ca8:	d026      	beq.n	8006cf8 <__ssputs_r+0x6c>
 8006caa:	6965      	ldr	r5, [r4, #20]
 8006cac:	6909      	ldr	r1, [r1, #16]
 8006cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb2:	eba3 0901 	sub.w	r9, r3, r1
 8006cb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cba:	1c7b      	adds	r3, r7, #1
 8006cbc:	444b      	add	r3, r9
 8006cbe:	106d      	asrs	r5, r5, #1
 8006cc0:	429d      	cmp	r5, r3
 8006cc2:	bf38      	it	cc
 8006cc4:	461d      	movcc	r5, r3
 8006cc6:	0553      	lsls	r3, r2, #21
 8006cc8:	d527      	bpl.n	8006d1a <__ssputs_r+0x8e>
 8006cca:	4629      	mov	r1, r5
 8006ccc:	f7ff ff52 	bl	8006b74 <_malloc_r>
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	b360      	cbz	r0, 8006d2e <__ssputs_r+0xa2>
 8006cd4:	6921      	ldr	r1, [r4, #16]
 8006cd6:	464a      	mov	r2, r9
 8006cd8:	f000 fae8 	bl	80072ac <memcpy>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	6126      	str	r6, [r4, #16]
 8006cea:	6165      	str	r5, [r4, #20]
 8006cec:	444e      	add	r6, r9
 8006cee:	eba5 0509 	sub.w	r5, r5, r9
 8006cf2:	6026      	str	r6, [r4, #0]
 8006cf4:	60a5      	str	r5, [r4, #8]
 8006cf6:	463e      	mov	r6, r7
 8006cf8:	42be      	cmp	r6, r7
 8006cfa:	d900      	bls.n	8006cfe <__ssputs_r+0x72>
 8006cfc:	463e      	mov	r6, r7
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	4632      	mov	r2, r6
 8006d02:	4641      	mov	r1, r8
 8006d04:	f000 faa8 	bl	8007258 <memmove>
 8006d08:	68a3      	ldr	r3, [r4, #8]
 8006d0a:	1b9b      	subs	r3, r3, r6
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	4433      	add	r3, r6
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	2000      	movs	r0, #0
 8006d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	f000 fad4 	bl	80072c8 <_realloc_r>
 8006d20:	4606      	mov	r6, r0
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d1e0      	bne.n	8006ce8 <__ssputs_r+0x5c>
 8006d26:	6921      	ldr	r1, [r4, #16]
 8006d28:	4650      	mov	r0, sl
 8006d2a:	f7ff feb7 	bl	8006a9c <_free_r>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	f8ca 3000 	str.w	r3, [sl]
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d3a:	81a3      	strh	r3, [r4, #12]
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	e7e9      	b.n	8006d16 <__ssputs_r+0x8a>
	...

08006d44 <_svfiprintf_r>:
 8006d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d48:	4698      	mov	r8, r3
 8006d4a:	898b      	ldrh	r3, [r1, #12]
 8006d4c:	061b      	lsls	r3, r3, #24
 8006d4e:	b09d      	sub	sp, #116	@ 0x74
 8006d50:	4607      	mov	r7, r0
 8006d52:	460d      	mov	r5, r1
 8006d54:	4614      	mov	r4, r2
 8006d56:	d510      	bpl.n	8006d7a <_svfiprintf_r+0x36>
 8006d58:	690b      	ldr	r3, [r1, #16]
 8006d5a:	b973      	cbnz	r3, 8006d7a <_svfiprintf_r+0x36>
 8006d5c:	2140      	movs	r1, #64	@ 0x40
 8006d5e:	f7ff ff09 	bl	8006b74 <_malloc_r>
 8006d62:	6028      	str	r0, [r5, #0]
 8006d64:	6128      	str	r0, [r5, #16]
 8006d66:	b930      	cbnz	r0, 8006d76 <_svfiprintf_r+0x32>
 8006d68:	230c      	movs	r3, #12
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	b01d      	add	sp, #116	@ 0x74
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	2340      	movs	r3, #64	@ 0x40
 8006d78:	616b      	str	r3, [r5, #20]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d7e:	2320      	movs	r3, #32
 8006d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d88:	2330      	movs	r3, #48	@ 0x30
 8006d8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f28 <_svfiprintf_r+0x1e4>
 8006d8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d92:	f04f 0901 	mov.w	r9, #1
 8006d96:	4623      	mov	r3, r4
 8006d98:	469a      	mov	sl, r3
 8006d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d9e:	b10a      	cbz	r2, 8006da4 <_svfiprintf_r+0x60>
 8006da0:	2a25      	cmp	r2, #37	@ 0x25
 8006da2:	d1f9      	bne.n	8006d98 <_svfiprintf_r+0x54>
 8006da4:	ebba 0b04 	subs.w	fp, sl, r4
 8006da8:	d00b      	beq.n	8006dc2 <_svfiprintf_r+0x7e>
 8006daa:	465b      	mov	r3, fp
 8006dac:	4622      	mov	r2, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ff6b 	bl	8006c8c <__ssputs_r>
 8006db6:	3001      	adds	r0, #1
 8006db8:	f000 80a7 	beq.w	8006f0a <_svfiprintf_r+0x1c6>
 8006dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dbe:	445a      	add	r2, fp
 8006dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 809f 	beq.w	8006f0a <_svfiprintf_r+0x1c6>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dd6:	f10a 0a01 	add.w	sl, sl, #1
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	9307      	str	r3, [sp, #28]
 8006dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006de4:	4654      	mov	r4, sl
 8006de6:	2205      	movs	r2, #5
 8006de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dec:	484e      	ldr	r0, [pc, #312]	@ (8006f28 <_svfiprintf_r+0x1e4>)
 8006dee:	f7f9 fa17 	bl	8000220 <memchr>
 8006df2:	9a04      	ldr	r2, [sp, #16]
 8006df4:	b9d8      	cbnz	r0, 8006e2e <_svfiprintf_r+0xea>
 8006df6:	06d0      	lsls	r0, r2, #27
 8006df8:	bf44      	itt	mi
 8006dfa:	2320      	movmi	r3, #32
 8006dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e00:	0711      	lsls	r1, r2, #28
 8006e02:	bf44      	itt	mi
 8006e04:	232b      	movmi	r3, #43	@ 0x2b
 8006e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e10:	d015      	beq.n	8006e3e <_svfiprintf_r+0xfa>
 8006e12:	9a07      	ldr	r2, [sp, #28]
 8006e14:	4654      	mov	r4, sl
 8006e16:	2000      	movs	r0, #0
 8006e18:	f04f 0c0a 	mov.w	ip, #10
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e22:	3b30      	subs	r3, #48	@ 0x30
 8006e24:	2b09      	cmp	r3, #9
 8006e26:	d94b      	bls.n	8006ec0 <_svfiprintf_r+0x17c>
 8006e28:	b1b0      	cbz	r0, 8006e58 <_svfiprintf_r+0x114>
 8006e2a:	9207      	str	r2, [sp, #28]
 8006e2c:	e014      	b.n	8006e58 <_svfiprintf_r+0x114>
 8006e2e:	eba0 0308 	sub.w	r3, r0, r8
 8006e32:	fa09 f303 	lsl.w	r3, r9, r3
 8006e36:	4313      	orrs	r3, r2
 8006e38:	9304      	str	r3, [sp, #16]
 8006e3a:	46a2      	mov	sl, r4
 8006e3c:	e7d2      	b.n	8006de4 <_svfiprintf_r+0xa0>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	1d19      	adds	r1, r3, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	9103      	str	r1, [sp, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bfbb      	ittet	lt
 8006e4a:	425b      	neglt	r3, r3
 8006e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e50:	9307      	strge	r3, [sp, #28]
 8006e52:	9307      	strlt	r3, [sp, #28]
 8006e54:	bfb8      	it	lt
 8006e56:	9204      	strlt	r2, [sp, #16]
 8006e58:	7823      	ldrb	r3, [r4, #0]
 8006e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e5c:	d10a      	bne.n	8006e74 <_svfiprintf_r+0x130>
 8006e5e:	7863      	ldrb	r3, [r4, #1]
 8006e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e62:	d132      	bne.n	8006eca <_svfiprintf_r+0x186>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	9203      	str	r2, [sp, #12]
 8006e6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e70:	3402      	adds	r4, #2
 8006e72:	9305      	str	r3, [sp, #20]
 8006e74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f38 <_svfiprintf_r+0x1f4>
 8006e78:	7821      	ldrb	r1, [r4, #0]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	4650      	mov	r0, sl
 8006e7e:	f7f9 f9cf 	bl	8000220 <memchr>
 8006e82:	b138      	cbz	r0, 8006e94 <_svfiprintf_r+0x150>
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	eba0 000a 	sub.w	r0, r0, sl
 8006e8a:	2240      	movs	r2, #64	@ 0x40
 8006e8c:	4082      	lsls	r2, r0
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	3401      	adds	r4, #1
 8006e92:	9304      	str	r3, [sp, #16]
 8006e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e98:	4824      	ldr	r0, [pc, #144]	@ (8006f2c <_svfiprintf_r+0x1e8>)
 8006e9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e9e:	2206      	movs	r2, #6
 8006ea0:	f7f9 f9be 	bl	8000220 <memchr>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d036      	beq.n	8006f16 <_svfiprintf_r+0x1d2>
 8006ea8:	4b21      	ldr	r3, [pc, #132]	@ (8006f30 <_svfiprintf_r+0x1ec>)
 8006eaa:	bb1b      	cbnz	r3, 8006ef4 <_svfiprintf_r+0x1b0>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	3307      	adds	r3, #7
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	9303      	str	r3, [sp, #12]
 8006eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eba:	4433      	add	r3, r6
 8006ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ebe:	e76a      	b.n	8006d96 <_svfiprintf_r+0x52>
 8006ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	e7a8      	b.n	8006e1c <_svfiprintf_r+0xd8>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	3401      	adds	r4, #1
 8006ece:	9305      	str	r3, [sp, #20]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f04f 0c0a 	mov.w	ip, #10
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006edc:	3a30      	subs	r2, #48	@ 0x30
 8006ede:	2a09      	cmp	r2, #9
 8006ee0:	d903      	bls.n	8006eea <_svfiprintf_r+0x1a6>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0c6      	beq.n	8006e74 <_svfiprintf_r+0x130>
 8006ee6:	9105      	str	r1, [sp, #20]
 8006ee8:	e7c4      	b.n	8006e74 <_svfiprintf_r+0x130>
 8006eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eee:	4604      	mov	r4, r0
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e7f0      	b.n	8006ed6 <_svfiprintf_r+0x192>
 8006ef4:	ab03      	add	r3, sp, #12
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	462a      	mov	r2, r5
 8006efa:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <_svfiprintf_r+0x1f0>)
 8006efc:	a904      	add	r1, sp, #16
 8006efe:	4638      	mov	r0, r7
 8006f00:	f3af 8000 	nop.w
 8006f04:	1c42      	adds	r2, r0, #1
 8006f06:	4606      	mov	r6, r0
 8006f08:	d1d6      	bne.n	8006eb8 <_svfiprintf_r+0x174>
 8006f0a:	89ab      	ldrh	r3, [r5, #12]
 8006f0c:	065b      	lsls	r3, r3, #25
 8006f0e:	f53f af2d 	bmi.w	8006d6c <_svfiprintf_r+0x28>
 8006f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f14:	e72c      	b.n	8006d70 <_svfiprintf_r+0x2c>
 8006f16:	ab03      	add	r3, sp, #12
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	4b05      	ldr	r3, [pc, #20]	@ (8006f34 <_svfiprintf_r+0x1f0>)
 8006f1e:	a904      	add	r1, sp, #16
 8006f20:	4638      	mov	r0, r7
 8006f22:	f000 f879 	bl	8007018 <_printf_i>
 8006f26:	e7ed      	b.n	8006f04 <_svfiprintf_r+0x1c0>
 8006f28:	080073a4 	.word	0x080073a4
 8006f2c:	080073ae 	.word	0x080073ae
 8006f30:	00000000 	.word	0x00000000
 8006f34:	08006c8d 	.word	0x08006c8d
 8006f38:	080073aa 	.word	0x080073aa

08006f3c <_printf_common>:
 8006f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	4616      	mov	r6, r2
 8006f42:	4698      	mov	r8, r3
 8006f44:	688a      	ldr	r2, [r1, #8]
 8006f46:	690b      	ldr	r3, [r1, #16]
 8006f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	bfb8      	it	lt
 8006f50:	4613      	movlt	r3, r2
 8006f52:	6033      	str	r3, [r6, #0]
 8006f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f58:	4607      	mov	r7, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	b10a      	cbz	r2, 8006f62 <_printf_common+0x26>
 8006f5e:	3301      	adds	r3, #1
 8006f60:	6033      	str	r3, [r6, #0]
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	0699      	lsls	r1, r3, #26
 8006f66:	bf42      	ittt	mi
 8006f68:	6833      	ldrmi	r3, [r6, #0]
 8006f6a:	3302      	addmi	r3, #2
 8006f6c:	6033      	strmi	r3, [r6, #0]
 8006f6e:	6825      	ldr	r5, [r4, #0]
 8006f70:	f015 0506 	ands.w	r5, r5, #6
 8006f74:	d106      	bne.n	8006f84 <_printf_common+0x48>
 8006f76:	f104 0a19 	add.w	sl, r4, #25
 8006f7a:	68e3      	ldr	r3, [r4, #12]
 8006f7c:	6832      	ldr	r2, [r6, #0]
 8006f7e:	1a9b      	subs	r3, r3, r2
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	dc26      	bgt.n	8006fd2 <_printf_common+0x96>
 8006f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f88:	6822      	ldr	r2, [r4, #0]
 8006f8a:	3b00      	subs	r3, #0
 8006f8c:	bf18      	it	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	0692      	lsls	r2, r2, #26
 8006f92:	d42b      	bmi.n	8006fec <_printf_common+0xb0>
 8006f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f98:	4641      	mov	r1, r8
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	47c8      	blx	r9
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d01e      	beq.n	8006fe0 <_printf_common+0xa4>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	6922      	ldr	r2, [r4, #16]
 8006fa6:	f003 0306 	and.w	r3, r3, #6
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	bf02      	ittt	eq
 8006fae:	68e5      	ldreq	r5, [r4, #12]
 8006fb0:	6833      	ldreq	r3, [r6, #0]
 8006fb2:	1aed      	subeq	r5, r5, r3
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	bf0c      	ite	eq
 8006fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fbc:	2500      	movne	r5, #0
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bfc4      	itt	gt
 8006fc2:	1a9b      	subgt	r3, r3, r2
 8006fc4:	18ed      	addgt	r5, r5, r3
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	341a      	adds	r4, #26
 8006fca:	42b5      	cmp	r5, r6
 8006fcc:	d11a      	bne.n	8007004 <_printf_common+0xc8>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e008      	b.n	8006fe4 <_printf_common+0xa8>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4652      	mov	r2, sl
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	4638      	mov	r0, r7
 8006fda:	47c8      	blx	r9
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d103      	bne.n	8006fe8 <_printf_common+0xac>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	3501      	adds	r5, #1
 8006fea:	e7c6      	b.n	8006f7a <_printf_common+0x3e>
 8006fec:	18e1      	adds	r1, r4, r3
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	2030      	movs	r0, #48	@ 0x30
 8006ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ff6:	4422      	add	r2, r4
 8006ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007000:	3302      	adds	r3, #2
 8007002:	e7c7      	b.n	8006f94 <_printf_common+0x58>
 8007004:	2301      	movs	r3, #1
 8007006:	4622      	mov	r2, r4
 8007008:	4641      	mov	r1, r8
 800700a:	4638      	mov	r0, r7
 800700c:	47c8      	blx	r9
 800700e:	3001      	adds	r0, #1
 8007010:	d0e6      	beq.n	8006fe0 <_printf_common+0xa4>
 8007012:	3601      	adds	r6, #1
 8007014:	e7d9      	b.n	8006fca <_printf_common+0x8e>
	...

08007018 <_printf_i>:
 8007018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	7e0f      	ldrb	r7, [r1, #24]
 800701e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007020:	2f78      	cmp	r7, #120	@ 0x78
 8007022:	4691      	mov	r9, r2
 8007024:	4680      	mov	r8, r0
 8007026:	460c      	mov	r4, r1
 8007028:	469a      	mov	sl, r3
 800702a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800702e:	d807      	bhi.n	8007040 <_printf_i+0x28>
 8007030:	2f62      	cmp	r7, #98	@ 0x62
 8007032:	d80a      	bhi.n	800704a <_printf_i+0x32>
 8007034:	2f00      	cmp	r7, #0
 8007036:	f000 80d2 	beq.w	80071de <_printf_i+0x1c6>
 800703a:	2f58      	cmp	r7, #88	@ 0x58
 800703c:	f000 80b9 	beq.w	80071b2 <_printf_i+0x19a>
 8007040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007048:	e03a      	b.n	80070c0 <_printf_i+0xa8>
 800704a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800704e:	2b15      	cmp	r3, #21
 8007050:	d8f6      	bhi.n	8007040 <_printf_i+0x28>
 8007052:	a101      	add	r1, pc, #4	@ (adr r1, 8007058 <_printf_i+0x40>)
 8007054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007058:	080070b1 	.word	0x080070b1
 800705c:	080070c5 	.word	0x080070c5
 8007060:	08007041 	.word	0x08007041
 8007064:	08007041 	.word	0x08007041
 8007068:	08007041 	.word	0x08007041
 800706c:	08007041 	.word	0x08007041
 8007070:	080070c5 	.word	0x080070c5
 8007074:	08007041 	.word	0x08007041
 8007078:	08007041 	.word	0x08007041
 800707c:	08007041 	.word	0x08007041
 8007080:	08007041 	.word	0x08007041
 8007084:	080071c5 	.word	0x080071c5
 8007088:	080070ef 	.word	0x080070ef
 800708c:	0800717f 	.word	0x0800717f
 8007090:	08007041 	.word	0x08007041
 8007094:	08007041 	.word	0x08007041
 8007098:	080071e7 	.word	0x080071e7
 800709c:	08007041 	.word	0x08007041
 80070a0:	080070ef 	.word	0x080070ef
 80070a4:	08007041 	.word	0x08007041
 80070a8:	08007041 	.word	0x08007041
 80070ac:	08007187 	.word	0x08007187
 80070b0:	6833      	ldr	r3, [r6, #0]
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6032      	str	r2, [r6, #0]
 80070b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070c0:	2301      	movs	r3, #1
 80070c2:	e09d      	b.n	8007200 <_printf_i+0x1e8>
 80070c4:	6833      	ldr	r3, [r6, #0]
 80070c6:	6820      	ldr	r0, [r4, #0]
 80070c8:	1d19      	adds	r1, r3, #4
 80070ca:	6031      	str	r1, [r6, #0]
 80070cc:	0606      	lsls	r6, r0, #24
 80070ce:	d501      	bpl.n	80070d4 <_printf_i+0xbc>
 80070d0:	681d      	ldr	r5, [r3, #0]
 80070d2:	e003      	b.n	80070dc <_printf_i+0xc4>
 80070d4:	0645      	lsls	r5, r0, #25
 80070d6:	d5fb      	bpl.n	80070d0 <_printf_i+0xb8>
 80070d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070dc:	2d00      	cmp	r5, #0
 80070de:	da03      	bge.n	80070e8 <_printf_i+0xd0>
 80070e0:	232d      	movs	r3, #45	@ 0x2d
 80070e2:	426d      	negs	r5, r5
 80070e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070e8:	4859      	ldr	r0, [pc, #356]	@ (8007250 <_printf_i+0x238>)
 80070ea:	230a      	movs	r3, #10
 80070ec:	e011      	b.n	8007112 <_printf_i+0xfa>
 80070ee:	6821      	ldr	r1, [r4, #0]
 80070f0:	6833      	ldr	r3, [r6, #0]
 80070f2:	0608      	lsls	r0, r1, #24
 80070f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80070f8:	d402      	bmi.n	8007100 <_printf_i+0xe8>
 80070fa:	0649      	lsls	r1, r1, #25
 80070fc:	bf48      	it	mi
 80070fe:	b2ad      	uxthmi	r5, r5
 8007100:	2f6f      	cmp	r7, #111	@ 0x6f
 8007102:	4853      	ldr	r0, [pc, #332]	@ (8007250 <_printf_i+0x238>)
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	bf14      	ite	ne
 8007108:	230a      	movne	r3, #10
 800710a:	2308      	moveq	r3, #8
 800710c:	2100      	movs	r1, #0
 800710e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007112:	6866      	ldr	r6, [r4, #4]
 8007114:	60a6      	str	r6, [r4, #8]
 8007116:	2e00      	cmp	r6, #0
 8007118:	bfa2      	ittt	ge
 800711a:	6821      	ldrge	r1, [r4, #0]
 800711c:	f021 0104 	bicge.w	r1, r1, #4
 8007120:	6021      	strge	r1, [r4, #0]
 8007122:	b90d      	cbnz	r5, 8007128 <_printf_i+0x110>
 8007124:	2e00      	cmp	r6, #0
 8007126:	d04b      	beq.n	80071c0 <_printf_i+0x1a8>
 8007128:	4616      	mov	r6, r2
 800712a:	fbb5 f1f3 	udiv	r1, r5, r3
 800712e:	fb03 5711 	mls	r7, r3, r1, r5
 8007132:	5dc7      	ldrb	r7, [r0, r7]
 8007134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007138:	462f      	mov	r7, r5
 800713a:	42bb      	cmp	r3, r7
 800713c:	460d      	mov	r5, r1
 800713e:	d9f4      	bls.n	800712a <_printf_i+0x112>
 8007140:	2b08      	cmp	r3, #8
 8007142:	d10b      	bne.n	800715c <_printf_i+0x144>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	07df      	lsls	r7, r3, #31
 8007148:	d508      	bpl.n	800715c <_printf_i+0x144>
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	6861      	ldr	r1, [r4, #4]
 800714e:	4299      	cmp	r1, r3
 8007150:	bfde      	ittt	le
 8007152:	2330      	movle	r3, #48	@ 0x30
 8007154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007158:	f106 36ff 	addle.w	r6, r6, #4294967295
 800715c:	1b92      	subs	r2, r2, r6
 800715e:	6122      	str	r2, [r4, #16]
 8007160:	f8cd a000 	str.w	sl, [sp]
 8007164:	464b      	mov	r3, r9
 8007166:	aa03      	add	r2, sp, #12
 8007168:	4621      	mov	r1, r4
 800716a:	4640      	mov	r0, r8
 800716c:	f7ff fee6 	bl	8006f3c <_printf_common>
 8007170:	3001      	adds	r0, #1
 8007172:	d14a      	bne.n	800720a <_printf_i+0x1f2>
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	b004      	add	sp, #16
 800717a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f043 0320 	orr.w	r3, r3, #32
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	4833      	ldr	r0, [pc, #204]	@ (8007254 <_printf_i+0x23c>)
 8007188:	2778      	movs	r7, #120	@ 0x78
 800718a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6831      	ldr	r1, [r6, #0]
 8007192:	061f      	lsls	r7, r3, #24
 8007194:	f851 5b04 	ldr.w	r5, [r1], #4
 8007198:	d402      	bmi.n	80071a0 <_printf_i+0x188>
 800719a:	065f      	lsls	r7, r3, #25
 800719c:	bf48      	it	mi
 800719e:	b2ad      	uxthmi	r5, r5
 80071a0:	6031      	str	r1, [r6, #0]
 80071a2:	07d9      	lsls	r1, r3, #31
 80071a4:	bf44      	itt	mi
 80071a6:	f043 0320 	orrmi.w	r3, r3, #32
 80071aa:	6023      	strmi	r3, [r4, #0]
 80071ac:	b11d      	cbz	r5, 80071b6 <_printf_i+0x19e>
 80071ae:	2310      	movs	r3, #16
 80071b0:	e7ac      	b.n	800710c <_printf_i+0xf4>
 80071b2:	4827      	ldr	r0, [pc, #156]	@ (8007250 <_printf_i+0x238>)
 80071b4:	e7e9      	b.n	800718a <_printf_i+0x172>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	f023 0320 	bic.w	r3, r3, #32
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	e7f6      	b.n	80071ae <_printf_i+0x196>
 80071c0:	4616      	mov	r6, r2
 80071c2:	e7bd      	b.n	8007140 <_printf_i+0x128>
 80071c4:	6833      	ldr	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	6961      	ldr	r1, [r4, #20]
 80071ca:	1d18      	adds	r0, r3, #4
 80071cc:	6030      	str	r0, [r6, #0]
 80071ce:	062e      	lsls	r6, r5, #24
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	d501      	bpl.n	80071d8 <_printf_i+0x1c0>
 80071d4:	6019      	str	r1, [r3, #0]
 80071d6:	e002      	b.n	80071de <_printf_i+0x1c6>
 80071d8:	0668      	lsls	r0, r5, #25
 80071da:	d5fb      	bpl.n	80071d4 <_printf_i+0x1bc>
 80071dc:	8019      	strh	r1, [r3, #0]
 80071de:	2300      	movs	r3, #0
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	4616      	mov	r6, r2
 80071e4:	e7bc      	b.n	8007160 <_printf_i+0x148>
 80071e6:	6833      	ldr	r3, [r6, #0]
 80071e8:	1d1a      	adds	r2, r3, #4
 80071ea:	6032      	str	r2, [r6, #0]
 80071ec:	681e      	ldr	r6, [r3, #0]
 80071ee:	6862      	ldr	r2, [r4, #4]
 80071f0:	2100      	movs	r1, #0
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7f9 f814 	bl	8000220 <memchr>
 80071f8:	b108      	cbz	r0, 80071fe <_printf_i+0x1e6>
 80071fa:	1b80      	subs	r0, r0, r6
 80071fc:	6060      	str	r0, [r4, #4]
 80071fe:	6863      	ldr	r3, [r4, #4]
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	2300      	movs	r3, #0
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007208:	e7aa      	b.n	8007160 <_printf_i+0x148>
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	4632      	mov	r2, r6
 800720e:	4649      	mov	r1, r9
 8007210:	4640      	mov	r0, r8
 8007212:	47d0      	blx	sl
 8007214:	3001      	adds	r0, #1
 8007216:	d0ad      	beq.n	8007174 <_printf_i+0x15c>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	079b      	lsls	r3, r3, #30
 800721c:	d413      	bmi.n	8007246 <_printf_i+0x22e>
 800721e:	68e0      	ldr	r0, [r4, #12]
 8007220:	9b03      	ldr	r3, [sp, #12]
 8007222:	4298      	cmp	r0, r3
 8007224:	bfb8      	it	lt
 8007226:	4618      	movlt	r0, r3
 8007228:	e7a6      	b.n	8007178 <_printf_i+0x160>
 800722a:	2301      	movs	r3, #1
 800722c:	4632      	mov	r2, r6
 800722e:	4649      	mov	r1, r9
 8007230:	4640      	mov	r0, r8
 8007232:	47d0      	blx	sl
 8007234:	3001      	adds	r0, #1
 8007236:	d09d      	beq.n	8007174 <_printf_i+0x15c>
 8007238:	3501      	adds	r5, #1
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	9903      	ldr	r1, [sp, #12]
 800723e:	1a5b      	subs	r3, r3, r1
 8007240:	42ab      	cmp	r3, r5
 8007242:	dcf2      	bgt.n	800722a <_printf_i+0x212>
 8007244:	e7eb      	b.n	800721e <_printf_i+0x206>
 8007246:	2500      	movs	r5, #0
 8007248:	f104 0619 	add.w	r6, r4, #25
 800724c:	e7f5      	b.n	800723a <_printf_i+0x222>
 800724e:	bf00      	nop
 8007250:	080073b5 	.word	0x080073b5
 8007254:	080073c6 	.word	0x080073c6

08007258 <memmove>:
 8007258:	4288      	cmp	r0, r1
 800725a:	b510      	push	{r4, lr}
 800725c:	eb01 0402 	add.w	r4, r1, r2
 8007260:	d902      	bls.n	8007268 <memmove+0x10>
 8007262:	4284      	cmp	r4, r0
 8007264:	4623      	mov	r3, r4
 8007266:	d807      	bhi.n	8007278 <memmove+0x20>
 8007268:	1e43      	subs	r3, r0, #1
 800726a:	42a1      	cmp	r1, r4
 800726c:	d008      	beq.n	8007280 <memmove+0x28>
 800726e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007276:	e7f8      	b.n	800726a <memmove+0x12>
 8007278:	4402      	add	r2, r0
 800727a:	4601      	mov	r1, r0
 800727c:	428a      	cmp	r2, r1
 800727e:	d100      	bne.n	8007282 <memmove+0x2a>
 8007280:	bd10      	pop	{r4, pc}
 8007282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800728a:	e7f7      	b.n	800727c <memmove+0x24>

0800728c <_sbrk_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	@ (80072a8 <_sbrk_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7fa fd86 	bl	8001da8 <_sbrk>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_sbrk_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_sbrk_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200007f0 	.word	0x200007f0

080072ac <memcpy>:
 80072ac:	440a      	add	r2, r1
 80072ae:	4291      	cmp	r1, r2
 80072b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b4:	d100      	bne.n	80072b8 <memcpy+0xc>
 80072b6:	4770      	bx	lr
 80072b8:	b510      	push	{r4, lr}
 80072ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c2:	4291      	cmp	r1, r2
 80072c4:	d1f9      	bne.n	80072ba <memcpy+0xe>
 80072c6:	bd10      	pop	{r4, pc}

080072c8 <_realloc_r>:
 80072c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072cc:	4680      	mov	r8, r0
 80072ce:	4615      	mov	r5, r2
 80072d0:	460c      	mov	r4, r1
 80072d2:	b921      	cbnz	r1, 80072de <_realloc_r+0x16>
 80072d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	4611      	mov	r1, r2
 80072da:	f7ff bc4b 	b.w	8006b74 <_malloc_r>
 80072de:	b92a      	cbnz	r2, 80072ec <_realloc_r+0x24>
 80072e0:	f7ff fbdc 	bl	8006a9c <_free_r>
 80072e4:	2400      	movs	r4, #0
 80072e6:	4620      	mov	r0, r4
 80072e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ec:	f000 f81a 	bl	8007324 <_malloc_usable_size_r>
 80072f0:	4285      	cmp	r5, r0
 80072f2:	4606      	mov	r6, r0
 80072f4:	d802      	bhi.n	80072fc <_realloc_r+0x34>
 80072f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072fa:	d8f4      	bhi.n	80072e6 <_realloc_r+0x1e>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4640      	mov	r0, r8
 8007300:	f7ff fc38 	bl	8006b74 <_malloc_r>
 8007304:	4607      	mov	r7, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	d0ec      	beq.n	80072e4 <_realloc_r+0x1c>
 800730a:	42b5      	cmp	r5, r6
 800730c:	462a      	mov	r2, r5
 800730e:	4621      	mov	r1, r4
 8007310:	bf28      	it	cs
 8007312:	4632      	movcs	r2, r6
 8007314:	f7ff ffca 	bl	80072ac <memcpy>
 8007318:	4621      	mov	r1, r4
 800731a:	4640      	mov	r0, r8
 800731c:	f7ff fbbe 	bl	8006a9c <_free_r>
 8007320:	463c      	mov	r4, r7
 8007322:	e7e0      	b.n	80072e6 <_realloc_r+0x1e>

08007324 <_malloc_usable_size_r>:
 8007324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007328:	1f18      	subs	r0, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	bfbc      	itt	lt
 800732e:	580b      	ldrlt	r3, [r1, r0]
 8007330:	18c0      	addlt	r0, r0, r3
 8007332:	4770      	bx	lr

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
